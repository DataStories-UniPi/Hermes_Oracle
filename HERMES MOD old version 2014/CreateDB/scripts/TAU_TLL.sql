
--                                         P A C K A G E S

-- Start of DDL script for D_DATE_PACKAGE
-- Generated 5-Nov-00  3:42:56 pm
-- from -PELETLL:1

-- Drop the old instance of D_DATE_PACKAGE

DROP PACKAGE d_date_package
/

-- Package D_DATE_PACKAGE

CREATE OR REPLACE
PACKAGE D_Date_Package AS
    FUNCTION year(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer) return pls_integer;
    FUNCTION month(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer) return pls_integer;
    FUNCTION day(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer) return pls_integer;
    FUNCTION day_of_year(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer) return pls_integer;
    FUNCTION day_of_week(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer) return pls_integer;
    FUNCTION month_of_year(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer) return pls_integer;
    PROCEDURE f_current(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer, Y OUT pls_integer, M OUT pls_integer, D OUT pls_integer);
    PROCEDURE f_next(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer, week_day pls_integer, Y OUT pls_integer, M OUT pls_integer, D OUT pls_integer);
    PROCEDURE f_previous(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer, week_day pls_integer, Y OUT pls_integer, M OUT pls_integer, D OUT pls_integer);
    FUNCTION is_between(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer, b_Year pls_integer, b_Month pls_integer, b_Day pls_integer, e_Year pls_integer, e_Month pls_integer, e_Day pls_integer) return pls_integer;
    FUNCTION is_leap_year(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer) return pls_integer;
    FUNCTION is_leap_year(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer, y pls_integer) return pls_integer;
    FUNCTION days_in_year(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer) return pls_integer;
    FUNCTION days_in_year(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer, y pls_integer) return pls_integer;
    FUNCTION days_in_month(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer) return pls_integer;
    FUNCTION days_in_month(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer, y pls_integer, m pls_integer) return pls_integer;
    FUNCTION is_valid_date(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer, y pls_integer, m pls_integer, d pls_integer) return pls_integer;
    FUNCTION is_valid(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer) return pls_integer;
    FUNCTION day_of_the_year(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer, y pls_integer, m pls_integer, d pls_integer) return pls_integer;
    FUNCTION julian_day(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer, y pls_integer, m pls_integer, d pls_integer) return double precision;
    PROCEDURE julian_to_gregorian(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer, JD double precision, Y OUT pls_integer, M OUT pls_integer, D OUT pls_integer);
    FUNCTION getAbsDate(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer) return double precision;
    PROCEDURE setAbsDate(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer, num_of_days double precision, Y OUT pls_integer, M OUT pls_integer, D OUT pls_integer);
    PROCEDURE Easter(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer, year pls_integer, Y OUT pls_integer, M OUT pls_integer, D OUT pls_integer);
    PROCEDURE f_ass_date(m_Year IN OUT pls_integer, m_Month  IN OUT pls_integer, m_Day IN OUT pls_integer, d_Year pls_integer, d_Month pls_integer, d_Day pls_integer);
    PROCEDURE f_ass_timestamp(m_Year IN OUT pls_integer, m_Month IN OUT pls_integer, m_Day IN OUT pls_integer, t_Year pls_integer, t_Month pls_integer, t_Day pls_integer);
    PROCEDURE f_add_interval(m_Year IN OUT pls_integer, m_Month IN OUT pls_integer, m_Day IN OUT pls_integer, i_Value double precision);
    PROCEDURE f_add_days(m_Year IN OUT pls_integer, m_Month IN OUT pls_integer, m_Day IN OUT pls_integer, i pls_integer);
    PROCEDURE f_incr(m_Year IN OUT pls_integer, m_Month IN OUT pls_integer, m_Day IN OUT pls_integer);
    PROCEDURE f_sub_interval(m_Year IN OUT pls_integer, m_Month IN OUT pls_integer, m_Day IN OUT pls_integer, i_Value double precision);
    PROCEDURE f_sub_days(m_Year IN OUT pls_integer, m_Month IN OUT pls_integer, m_Day IN OUT pls_integer, i pls_integer);
    PROCEDURE f_decr(m_Year IN OUT pls_integer, m_Month IN OUT pls_integer, m_Day IN OUT pls_integer);
    PROCEDURE f_add(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer, d_Year pls_integer, d_Month pls_integer, d_Day pls_integer, i_Value double precision, Y OUT pls_integer, M OUT pls_integer, D OUT pls_integer);
    FUNCTION f_sub(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer, d1_Year pls_integer, d1_Month pls_integer, d1_Day pls_integer, d2_Year pls_integer, d2_Month pls_integer, d2_Day pls_integer) return double precision;
    PROCEDURE f_sub(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer, d_Year pls_integer, d_Month pls_integer, d_Day pls_integer, i_Value double precision, Y OUT pls_integer, M OUT pls_integer, D OUT pls_integer);
    FUNCTION f_eq(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer, i_Year pls_integer, i_Month pls_integer, i_Day pls_integer, j_Year pls_integer, j_Month pls_integer, j_Day pls_integer) return pls_integer;
    FUNCTION f_n_eq(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer, i_Year pls_integer, i_Month pls_integer, i_Day pls_integer, j_Year pls_integer, j_Month pls_integer, j_Day pls_integer) return pls_integer;
    FUNCTION f_l(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer, i_Year pls_integer, i_Month pls_integer, i_Day pls_integer, j_Year pls_integer, j_Month pls_integer, j_Day pls_integer) return pls_integer;
    FUNCTION f_l_e(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer, i_Year pls_integer, i_Month pls_integer, i_Day pls_integer, j_Year pls_integer, j_Month pls_integer, j_Day pls_integer) return pls_integer;
    FUNCTION f_b(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer, i_Year pls_integer, i_Month pls_integer, i_Day pls_integer, j_Year pls_integer, j_Month pls_integer, j_Day pls_integer) return pls_integer;
    FUNCTION f_b_e(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer, i_Year pls_integer, i_Month pls_integer, i_Day pls_integer, j_Year pls_integer, j_Month pls_integer, j_Day pls_integer) return pls_integer;
    FUNCTION f_overlaps(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer, d1_Year pls_integer, d1_Month pls_integer, d1_Day pls_integer, d2_Year pls_integer, d2_Month pls_integer, d2_Day pls_integer,  d3_Year pls_integer, d3_Month pls_integer, d3_Day pls_integer, d4_Year pls_integer, d4_Month pls_integer, d4_Day pls_integer) return pls_integer;
    FUNCTION f_timestamp_overlaps(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer, t1_Year pls_integer, t1_Month pls_integer, t1_Day pls_integer, t2_Year pls_integer, t2_Month pls_integer, t2_Day pls_integer, d1_Year pls_integer, d1_Month pls_integer, d1_Day pls_integer, d2_Year pls_integer, d2_Month pls_integer, d2_Day pls_integer) return pls_integer;
    FUNCTION f_date_overlaps(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer, d1_Year pls_integer, d1_Month pls_integer, d1_Day pls_integer, d2_Year pls_integer, d2_Month pls_integer, d2_Day pls_integer, t1_Year pls_integer, t1_Month pls_integer, t1_Day pls_integer, t2_Year pls_integer, t2_Month pls_integer, t2_Day pls_integer) return pls_integer;

END;
/

-- End of DDL script for D_DATE_PACKAGE

-- Start of DDL script for D_INTERVAL_PACKAGE
-- Generated 5-Nov-00  3:42:57 pm
-- from -PELETLL:1

-- Drop the old instance of D_INTERVAL_PACKAGE

DROP PACKAGE d_interval_package
/

-- Package D_INTERVAL_PACKAGE

CREATE OR REPLACE
PACKAGE D_Interval_Package AS
    FUNCTION day(m_Value double precision) return double precision;
    FUNCTION hour(m_Value double precision) return pls_integer;
    FUNCTION minute(m_Value double precision) return pls_integer;
    FUNCTION second(m_Value double precision) return double precision;
    FUNCTION is_zero(m_Value double precision) return pls_integer;
    FUNCTION to_string(m_Value double precision) return varchar2;

    FUNCTION f_ass(m_Value double precision, i_Value double precision) return double precision;
    FUNCTION f_add_to_self(m_Value double precision, i_Value double precision) return double precision;
    FUNCTION f_sub_to_self(m_Value double precision, i_Value double precision) return double precision;
    FUNCTION f_mul_to_self(m_Value double precision, i pls_integer) return double precision;
    FUNCTION f_div_to_self(m_Value double precision, i pls_integer) return double precision;
    FUNCTION f_min(m_Value double precision) return double precision;

    FUNCTION f_add(i_Value double precision, j_Value double precision) return double precision;
    FUNCTION f_sub(i_Value double precision, j_Value double precision) return double precision;
    FUNCTION f_mul(i_Value double precision, j pls_integer) return double precision;
    FUNCTION f_div(i_Value double precision, j pls_integer) return double precision;
    FUNCTION f_eq(i_Value double precision, j_Value double precision) return pls_integer;
    FUNCTION f_n_eq(i_Value double precision, j_Value double precision) return pls_integer;
    FUNCTION f_l(i_Value double precision, j_Value double precision) return pls_integer;
    FUNCTION f_l_e(i_Value double precision, j_Value double precision) return pls_integer;
    FUNCTION f_b(i_Value double precision, j_Value double precision) return pls_integer;
    FUNCTION f_b_e(i_Value double precision, j_Value double precision) return pls_integer;

END;
/

-- End of DDL script for D_INTERVAL_PACKAGE

-- Start of DDL script for D_PERIOD_D_PACKAGE
-- Generated 5-Nov-00  3:42:57 pm
-- from -PELETLL:1

-- Drop the old instance of D_PERIOD_D_PACKAGE

DROP PACKAGE d_period_d_package
/

-- Package D_PERIOD_D_PACKAGE

CREATE OR REPLACE
PACKAGE D_Period_D_Package AS

    PROCEDURE change_status(b_m_y IN OUT pls_integer, b_m_m IN OUT pls_integer, b_m_d IN OUT pls_integer, e_m_y IN OUT pls_integer, e_m_m IN OUT pls_integer, e_m_d IN OUT pls_integer, special_value pls_integer);
    PROCEDURE f_begin(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer);
    PROCEDURE f_end(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer);
    PROCEDURE set_begin(b_m_y IN OUT pls_integer, b_m_m IN OUT pls_integer, b_m_d IN OUT pls_integer, e_m_y IN OUT pls_integer, e_m_m IN OUT pls_integer, e_m_d IN OUT pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer);
    PROCEDURE set_end(b_m_y IN OUT pls_integer, b_m_m IN OUT pls_integer, b_m_d IN OUT pls_integer, e_m_y IN OUT pls_integer, e_m_m IN OUT pls_integer, e_m_d IN OUT pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer);
    FUNCTION get_granularity(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer) return pls_integer;
    PROCEDURE duration(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, i_Value OUT double precision);
    FUNCTION to_string(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer) return Varchar2;
    FUNCTION to_temporal_element(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer) return Varchar2;
    PROCEDURE f_ass_period(b_m_y IN OUT pls_integer, b_m_m IN OUT pls_integer, b_m_d IN OUT pls_integer, e_m_y IN OUT pls_integer, e_m_m IN OUT pls_integer, e_m_d IN OUT pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer);
    PROCEDURE f_add_interval(b_m_y IN OUT pls_integer, b_m_m IN OUT pls_integer, b_m_d IN OUT pls_integer, e_m_y IN OUT pls_integer, e_m_m IN OUT pls_integer, e_m_d IN OUT pls_integer, i_m_Value double precision);
    PROCEDURE f_sub_interval(b_m_y IN OUT pls_integer, b_m_m IN OUT pls_integer, b_m_d IN OUT pls_integer, e_m_y IN OUT pls_integer, e_m_m IN OUT pls_integer, e_m_d IN OUT pls_integer, i_m_Value double precision);
    PROCEDURE f_add(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, i_m_Value double precision, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer);
    PROCEDURE f_sub(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, i_m_Value double precision, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer);
    FUNCTION f_add(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, p1_b_m_y pls_integer, p1b_m_m pls_integer, p1_b_m_d pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer) return Varchar2;
    FUNCTION f_sub(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, p1_b_m_y pls_integer, p1b_m_m pls_integer, p1_b_m_d pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer) return Varchar2;
    FUNCTION f_add(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, p1_b_m_y pls_integer, p1b_m_m pls_integer, p1_b_m_d pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, te_string Varchar2) return Varchar2;
    FUNCTION f_sub(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, p1_b_m_y pls_integer, p1b_m_m pls_integer, p1_b_m_d pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, te_string Varchar2) return Varchar2;
    PROCEDURE intersects(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer);
    PROCEDURE intersects(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer);
    FUNCTION intersects(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, p1_b_m_y pls_integer, p1b_m_m pls_integer, p1_b_m_d pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, te_string Varchar2) return Varchar2;
    FUNCTION f_eq(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer) return pls_integer;
    FUNCTION f_n_eq(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer) return pls_integer;
    FUNCTION f_l(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer) return pls_integer;
    FUNCTION f_l_e(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer) return pls_integer;
    FUNCTION f_b(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer) return pls_integer;
    FUNCTION f_b_e(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer) return pls_integer;

    FUNCTION f_overlaps(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer) return pls_integer;
    FUNCTION f_precedes(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer) return pls_integer;
    FUNCTION f_meets(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer) return pls_integer;
    FUNCTION f_equal(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer) return pls_integer;
    FUNCTION f_contains(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer) return pls_integer;

    FUNCTION f_overlaps(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer) return pls_integer;
    FUNCTION f_precedes(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer) return pls_integer;
    FUNCTION f_meets(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer) return pls_integer;
    FUNCTION f_equal(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer) return pls_integer;
    FUNCTION f_contains(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer) return pls_integer;

    FUNCTION f_overlaps(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, p1_b_m_y pls_integer, p1b_m_m pls_integer, p1_b_m_d pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, te_string Varchar2) return pls_integer;
    FUNCTION f_precedes(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, p1_b_m_y pls_integer, p1b_m_m pls_integer, p1_b_m_d pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, te_string Varchar2) return pls_integer;
    FUNCTION f_meets(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, p1_b_m_y pls_integer, p1b_m_m pls_integer, p1_b_m_d pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, te_string Varchar2) return pls_integer;
    FUNCTION f_equal(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, p1_b_m_y pls_integer, p1b_m_m pls_integer, p1_b_m_d pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, te_string Varchar2) return pls_integer;
    FUNCTION f_contains(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, p1_b_m_y pls_integer, p1b_m_m pls_integer, p1_b_m_d pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, te_string Varchar2) return pls_integer;

END;
/

-- End of DDL script for D_PERIOD_D_PACKAGE

-- Start of DDL script for D_PERIOD_H_PACKAGE
-- Generated 5-Nov-00  3:42:57 pm
-- from -PELETLL:1

-- Drop the old instance of D_PERIOD_H_PACKAGE

DROP PACKAGE d_period_h_package
/

-- Package D_PERIOD_H_PACKAGE

CREATE OR REPLACE
PACKAGE D_Period_H_Package AS

    PROCEDURE change_status(b_m_y IN OUT pls_integer, b_m_m IN OUT pls_integer, b_m_d IN OUT pls_integer, b_m_h IN OUT pls_integer, e_m_y IN OUT pls_integer, e_m_m IN OUT pls_integer, e_m_d IN OUT pls_integer, e_m_h IN OUT pls_integer, special_value pls_integer);
    PROCEDURE f_begin(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, b_h OUT pls_integer);
    PROCEDURE f_end(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer, e_h OUT pls_integer);
    PROCEDURE set_begin(b_m_y IN OUT pls_integer, b_m_m IN OUT pls_integer, b_m_d IN OUT pls_integer, b_m_h IN OUT pls_integer, e_m_y IN OUT pls_integer, e_m_m IN OUT pls_integer, e_m_d IN OUT pls_integer, e_m_h IN OUT pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer);
    PROCEDURE set_end(b_m_y IN OUT pls_integer, b_m_m IN OUT pls_integer, b_m_d IN OUT pls_integer, b_m_h IN OUT pls_integer, e_m_y IN OUT pls_integer, e_m_m IN OUT pls_integer, e_m_d IN OUT pls_integer, e_m_h IN OUT pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer);
    FUNCTION get_granularity(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer) return pls_integer;
    PROCEDURE duration(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, i_Value OUT double precision);
    FUNCTION to_string(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer) return Varchar2;
    FUNCTION to_temporal_element(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer) return Varchar2;
    PROCEDURE f_ass_period(b_m_y IN OUT pls_integer, b_m_m IN OUT pls_integer, b_m_d IN OUT pls_integer, b_m_h IN OUT pls_integer, e_m_y IN OUT pls_integer, e_m_m IN OUT pls_integer, e_m_d IN OUT pls_integer, e_m_h IN OUT pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer);
    PROCEDURE f_add_interval(b_m_y IN OUT pls_integer, b_m_m IN OUT pls_integer, b_m_d IN OUT pls_integer, b_m_h IN OUT pls_integer, e_m_y IN OUT pls_integer, e_m_m IN OUT pls_integer, e_m_d IN OUT pls_integer, e_m_h IN OUT pls_integer, i_m_Value double precision);
    PROCEDURE f_sub_interval(b_m_y IN OUT pls_integer, b_m_m IN OUT pls_integer, b_m_d IN OUT pls_integer, b_m_h IN OUT pls_integer, e_m_y IN OUT pls_integer, e_m_m IN OUT pls_integer, e_m_d IN OUT pls_integer, e_m_h IN OUT pls_integer, i_m_Value double precision);
    PROCEDURE f_add(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, i_m_Value double precision, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, b_h OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer, e_h OUT pls_integer);
    PROCEDURE f_sub(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, i_m_Value double precision, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, b_h OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer, e_h OUT pls_integer);
    FUNCTION f_add(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer) return Varchar2;
    FUNCTION f_sub(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer) return Varchar2;
    FUNCTION f_add(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, te_string Varchar2) return Varchar2;
    FUNCTION f_sub(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, te_string Varchar2) return Varchar2;
    PROCEDURE intersects(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, b_h OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer, e_h OUT pls_integer);
    PROCEDURE intersects(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, b_h OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer, e_h OUT pls_integer);
    FUNCTION intersects(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, te_string Varchar2) return Varchar2;
    FUNCTION f_eq(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer) return pls_integer;
    FUNCTION f_n_eq(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer) return pls_integer;
    FUNCTION f_l(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer) return pls_integer;
    FUNCTION f_l_e(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer) return pls_integer;
    FUNCTION f_b(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer) return pls_integer;
    FUNCTION f_b_e(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer) return pls_integer;

    FUNCTION f_overlaps(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer) return pls_integer;
    FUNCTION f_precedes(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer) return pls_integer;
    FUNCTION f_meets(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer) return pls_integer;
    FUNCTION f_equal(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer) return pls_integer;
    FUNCTION f_contains(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer) return pls_integer;

    FUNCTION f_overlaps(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer) return pls_integer;
    FUNCTION f_precedes(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer) return pls_integer;
    FUNCTION f_meets(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer) return pls_integer;
    FUNCTION f_equal(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer) return pls_integer;
    FUNCTION f_contains(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer) return pls_integer;

    FUNCTION f_overlaps(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, te_string Varchar2) return pls_integer;
    FUNCTION f_precedes(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, te_string Varchar2) return pls_integer;
    FUNCTION f_meets(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, te_string Varchar2) return pls_integer;
    FUNCTION f_equal(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, te_string Varchar2) return pls_integer;
    FUNCTION f_contains(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, te_string Varchar2) return pls_integer;

END;
/

-- End of DDL script for D_PERIOD_H_PACKAGE

-- Start of DDL script for D_PERIOD_MIN_PACKAGE
-- Generated 5-Nov-00  3:42:57 pm
-- from -PELETLL:1

-- Drop the old instance of D_PERIOD_MIN_PACKAGE

DROP PACKAGE d_period_min_package
/

-- Package D_PERIOD_MIN_PACKAGE

CREATE OR REPLACE
PACKAGE D_Period_Min_Package AS

    PROCEDURE change_status(b_m_y IN OUT pls_integer, b_m_m IN OUT pls_integer, b_m_d IN OUT pls_integer, b_m_h IN OUT pls_integer, b_m_min IN OUT pls_integer, e_m_y IN OUT pls_integer, e_m_m IN OUT pls_integer, e_m_d IN OUT pls_integer, e_m_h IN OUT pls_integer, e_m_min IN OUT pls_integer, special_value pls_integer);
    PROCEDURE f_begin(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, b_h OUT pls_integer, b_min OUT pls_integer);
    PROCEDURE f_end(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer, e_h OUT pls_integer, e_min OUT pls_integer);
    PROCEDURE set_begin(b_m_y IN OUT pls_integer, b_m_m IN OUT pls_integer, b_m_d IN OUT pls_integer, b_m_h IN OUT pls_integer, b_m_min IN OUT pls_integer, e_m_y IN OUT pls_integer, e_m_m IN OUT pls_integer, e_m_d IN OUT pls_integer, e_m_h IN OUT pls_integer, e_m_min IN OUT pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer);
    PROCEDURE set_end(b_m_y IN OUT pls_integer, b_m_m IN OUT pls_integer, b_m_d IN OUT pls_integer, b_m_h IN OUT pls_integer, b_m_min IN OUT pls_integer, e_m_y IN OUT pls_integer, e_m_m IN OUT pls_integer, e_m_d IN OUT pls_integer, e_m_h IN OUT pls_integer, e_m_min IN OUT pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer);
    FUNCTION get_granularity(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer) return pls_integer;
    PROCEDURE duration(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, i_Value OUT double precision);
    FUNCTION to_string(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer) return Varchar2;
    FUNCTION to_temporal_element(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer) return Varchar2;
    PROCEDURE f_ass_period(b_m_y IN OUT pls_integer, b_m_m IN OUT pls_integer, b_m_d IN OUT pls_integer, b_m_h IN OUT pls_integer, b_m_min IN OUT pls_integer, e_m_y IN OUT pls_integer, e_m_m IN OUT pls_integer, e_m_d IN OUT pls_integer, e_m_h IN OUT pls_integer, e_m_min IN OUT pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer);
    PROCEDURE f_add_interval(b_m_y IN OUT pls_integer, b_m_m IN OUT pls_integer, b_m_d IN OUT pls_integer, b_m_h IN OUT pls_integer, b_m_min IN OUT pls_integer, e_m_y IN OUT pls_integer, e_m_m IN OUT pls_integer, e_m_d IN OUT pls_integer, e_m_h IN OUT pls_integer, e_m_min IN OUT pls_integer, i_m_Value double precision);
    PROCEDURE f_sub_interval(b_m_y IN OUT pls_integer, b_m_m IN OUT pls_integer, b_m_d IN OUT pls_integer, b_m_h IN OUT pls_integer, b_m_min IN OUT pls_integer, e_m_y IN OUT pls_integer, e_m_m IN OUT pls_integer, e_m_d IN OUT pls_integer, e_m_h IN OUT pls_integer, e_m_min IN OUT pls_integer, i_m_Value double precision);
    PROCEDURE f_add(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer, i_m_Value double precision, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, b_h OUT pls_integer, b_min OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer, e_h OUT pls_integer, e_min OUT pls_integer);
    PROCEDURE f_sub(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer, i_m_Value double precision, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, b_h OUT pls_integer, b_min OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer, e_h OUT pls_integer, e_min OUT pls_integer);
    FUNCTION f_add(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_b_m_min pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer, p2_e_m_min pls_integer) return Varchar2;
    FUNCTION f_sub(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_b_m_min pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer, p2_e_m_min pls_integer) return Varchar2;
    FUNCTION f_add(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, te_string Varchar2) return Varchar2;
    FUNCTION f_sub(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, te_string Varchar2) return Varchar2;
    PROCEDURE intersects(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, b_h OUT pls_integer, b_min OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer, e_h OUT pls_integer, e_min OUT pls_integer);
    PROCEDURE intersects(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_b_m_min pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer, p2_e_m_min pls_integer, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, b_h OUT pls_integer, b_min OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer, e_h OUT pls_integer, e_min OUT pls_integer);
    FUNCTION intersects(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, te_string Varchar2) return Varchar2;
    FUNCTION f_eq(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_b_m_min pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer, p2_e_m_min pls_integer) return pls_integer;
    FUNCTION f_n_eq(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_b_m_min pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer, p2_e_m_min pls_integer) return pls_integer;
    FUNCTION f_l(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_b_m_min pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer, p2_e_m_min pls_integer) return pls_integer;
    FUNCTION f_l_e(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_b_m_min pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer, p2_e_m_min pls_integer) return pls_integer;
    FUNCTION f_b(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_b_m_min pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer, p2_e_m_min pls_integer) return pls_integer;
    FUNCTION f_b_e(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_b_m_min pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer, p2_e_m_min pls_integer) return pls_integer;

    FUNCTION f_overlaps(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer) return pls_integer;
    FUNCTION f_precedes(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer) return pls_integer;
    FUNCTION f_meets(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer) return pls_integer;
    FUNCTION f_equal(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer) return pls_integer;
    FUNCTION f_contains(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer) return pls_integer;

    FUNCTION f_overlaps(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_b_m_min pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer, p2_e_m_min pls_integer) return pls_integer;
    FUNCTION f_precedes(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_b_m_min pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer, p2_e_m_min pls_integer) return pls_integer;
    FUNCTION f_meets(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_b_m_min pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer, p2_e_m_min pls_integer) return pls_integer;
    FUNCTION f_equal(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_b_m_min pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer, p2_e_m_min pls_integer) return pls_integer;
    FUNCTION f_contains(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_b_m_min pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer, p2_e_m_min pls_integer) return pls_integer;

    FUNCTION f_overlaps(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, te_string Varchar2) return pls_integer;
    FUNCTION f_precedes(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, te_string Varchar2) return pls_integer;
    FUNCTION f_meets(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, te_string Varchar2) return pls_integer;
    FUNCTION f_equal(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, te_string Varchar2) return pls_integer;
    FUNCTION f_contains(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, te_string Varchar2) return pls_integer;

END;
/

-- End of DDL script for D_PERIOD_MIN_PACKAGE

-- Start of DDL script for D_PERIOD_M_PACKAGE
-- Generated 5-Nov-00  3:42:58 pm
-- from -PELETLL:1

-- Drop the old instance of D_PERIOD_M_PACKAGE

DROP PACKAGE d_period_m_package
/

-- Package D_PERIOD_M_PACKAGE

CREATE OR REPLACE
PACKAGE D_Period_M_Package AS

    PROCEDURE change_status(b_m_y IN OUT pls_integer, b_m_m IN OUT pls_integer, e_m_y IN OUT pls_integer, e_m_m IN OUT pls_integer, special_value pls_integer);
    PROCEDURE f_begin(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer, b_y OUT pls_integer, b_m OUT pls_integer);
    PROCEDURE f_end(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_y OUT pls_integer, e_m OUT pls_integer);
    PROCEDURE set_begin(b_m_y IN OUT pls_integer, b_m_m IN OUT pls_integer, e_m_y IN OUT pls_integer, e_m_m IN OUT pls_integer, tp_m_y pls_integer, tp_m_m pls_integer);
    PROCEDURE set_end(b_m_y IN OUT pls_integer, b_m_m IN OUT pls_integer, e_m_y IN OUT pls_integer, e_m_m IN OUT pls_integer, tp_m_y pls_integer, tp_m_m pls_integer);
    FUNCTION get_granularity(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer) return pls_integer;
    PROCEDURE duration(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer, i_Value OUT double precision);
    FUNCTION to_string(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer) return Varchar2;
    FUNCTION to_temporal_element(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer) return Varchar2;
    PROCEDURE f_ass_period(b_m_y IN OUT pls_integer, b_m_m IN OUT pls_integer, e_m_y IN OUT pls_integer, e_m_m IN OUT pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer);
    PROCEDURE f_add_interval(b_m_y IN OUT pls_integer, b_m_m IN OUT pls_integer, e_m_y IN OUT pls_integer, e_m_m IN OUT pls_integer, i_m_Value double precision);
    PROCEDURE f_sub_interval(b_m_y IN OUT pls_integer, b_m_m IN OUT pls_integer, e_m_y IN OUT pls_integer, e_m_m IN OUT pls_integer, i_m_Value double precision);
    PROCEDURE f_add(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, i_m_Value double precision, b_y OUT pls_integer, b_m OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer);
    PROCEDURE f_sub(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, i_m_Value double precision, b_y OUT pls_integer, b_m OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer);
    FUNCTION f_add(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer) return Varchar2;
    FUNCTION f_sub(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer) return Varchar2;
    FUNCTION f_add(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, te_string Varchar2) return Varchar2;
    FUNCTION f_sub(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, te_string Varchar2) return Varchar2;
    PROCEDURE intersects(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, b_y OUT pls_integer, b_m OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer);
    PROCEDURE intersects(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, b_y OUT pls_integer, b_m OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer);
    FUNCTION intersects(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, te_string Varchar2) return Varchar2;
    FUNCTION f_eq(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer) return pls_integer;
    FUNCTION f_n_eq(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer) return pls_integer;
    FUNCTION f_l(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer) return pls_integer;
    FUNCTION f_l_e(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer) return pls_integer;
    FUNCTION f_b(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer) return pls_integer;
    FUNCTION f_b_e(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer) return pls_integer;

    FUNCTION f_overlaps(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, tp_m_y pls_integer, tp_m_m pls_integer) return pls_integer;
    FUNCTION f_precedes(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, tp_m_y pls_integer, tp_m_m pls_integer) return pls_integer;
    FUNCTION f_meets(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, tp_m_y pls_integer, tp_m_m pls_integer) return pls_integer;
    FUNCTION f_equal(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, tp_m_y pls_integer, tp_m_m pls_integer) return pls_integer;
    FUNCTION f_contains(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, tp_m_y pls_integer, tp_m_m pls_integer) return pls_integer;

    FUNCTION f_overlaps(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer) return pls_integer;
    FUNCTION f_precedes(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer) return pls_integer;
    FUNCTION f_meets(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer) return pls_integer;
    FUNCTION f_equal(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer) return pls_integer;
    FUNCTION f_contains(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer) return pls_integer;

    FUNCTION f_overlaps(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, te_string Varchar2) return pls_integer;
    FUNCTION f_precedes(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, te_string Varchar2) return pls_integer;
    FUNCTION f_meets(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, te_string Varchar2) return pls_integer;
    FUNCTION f_equal(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, te_string Varchar2) return pls_integer;
    FUNCTION f_contains(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, te_string Varchar2) return pls_integer;

END;
/

-- End of DDL script for D_PERIOD_M_PACKAGE

-- Start of DDL script for D_PERIOD_SEC_PACKAGE
-- Generated 5-Nov-00  3:42:58 pm
-- from -PELETLL:1

-- Drop the old instance of D_PERIOD_SEC_PACKAGE

DROP PACKAGE d_period_sec_package
/

-- Package D_PERIOD_SEC_PACKAGE

CREATE OR REPLACE
PACKAGE D_Period_Sec_Package AS

    PROCEDURE change_status(b_m_y IN OUT pls_integer, b_m_m IN OUT pls_integer, b_m_d IN OUT pls_integer, b_m_h IN OUT pls_integer, b_m_min IN OUT pls_integer, b_m_sec IN OUT double precision, e_m_y IN OUT pls_integer, e_m_m IN OUT pls_integer, e_m_d IN OUT pls_integer, e_m_h IN OUT pls_integer, e_m_min IN OUT pls_integer, e_m_sec IN OUT double precision, special_value pls_integer);
    PROCEDURE f_begin(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, b_h OUT pls_integer, b_min OUT pls_integer, b_sec OUT double precision);
    PROCEDURE f_end(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer, e_h OUT pls_integer, e_min OUT pls_integer, e_sec OUT double precision);
    PROCEDURE set_begin(b_m_y IN OUT pls_integer, b_m_m IN OUT pls_integer, b_m_d IN OUT pls_integer, b_m_h IN OUT pls_integer, b_m_min IN OUT pls_integer, b_m_sec IN OUT double precision, e_m_y IN OUT pls_integer, e_m_m IN OUT pls_integer, e_m_d IN OUT pls_integer, e_m_h IN OUT pls_integer, e_m_min IN OUT pls_integer, e_m_sec IN OUT double precision, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision);
    PROCEDURE set_end(b_m_y IN OUT pls_integer, b_m_m IN OUT pls_integer, b_m_d IN OUT pls_integer, b_m_h IN OUT pls_integer, b_m_min IN OUT pls_integer, b_m_sec IN OUT double precision, e_m_y IN OUT pls_integer, e_m_m IN OUT pls_integer, e_m_d IN OUT pls_integer, e_m_h IN OUT pls_integer, e_m_min IN OUT pls_integer, e_m_sec IN OUT double precision, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision);
    FUNCTION get_granularity(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision) return pls_integer;
    PROCEDURE duration(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision, i_Value OUT double precision);
    FUNCTION to_string(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision) return Varchar2;
    FUNCTION to_temporal_element(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision) return Varchar2;
    PROCEDURE f_ass_period(b_m_y IN OUT pls_integer, b_m_m IN OUT pls_integer, b_m_d IN OUT pls_integer, b_m_h IN OUT pls_integer, b_m_min IN OUT pls_integer, b_m_sec IN OUT double precision, e_m_y IN OUT pls_integer, e_m_m IN OUT pls_integer, e_m_d IN OUT pls_integer, e_m_h IN OUT pls_integer, e_m_min IN OUT pls_integer, e_m_sec IN OUT double precision, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_b_m_sec double precision, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer, p_e_m_sec double precision);
    PROCEDURE f_add_interval(b_m_y IN OUT pls_integer, b_m_m IN OUT pls_integer, b_m_d IN OUT pls_integer, b_m_h IN OUT pls_integer, b_m_min IN OUT pls_integer, b_m_sec IN OUT double precision, e_m_y IN OUT pls_integer, e_m_m IN OUT pls_integer, e_m_d IN OUT pls_integer, e_m_h IN OUT pls_integer, e_m_min IN OUT pls_integer, e_m_sec IN OUT double precision, i_m_Value double precision);
    PROCEDURE f_sub_interval(b_m_y IN OUT pls_integer, b_m_m IN OUT pls_integer, b_m_d IN OUT pls_integer, b_m_h IN OUT pls_integer, b_m_min IN OUT pls_integer, b_m_sec IN OUT double precision, e_m_y IN OUT pls_integer, e_m_m IN OUT pls_integer, e_m_d IN OUT pls_integer, e_m_h IN OUT pls_integer, e_m_min IN OUT pls_integer, e_m_sec IN OUT double precision, i_m_Value double precision);
    PROCEDURE f_add(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_b_m_sec double precision, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer, p_e_m_sec double precision, i_m_Value double precision, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, b_h OUT pls_integer, b_min OUT pls_integer, b_sec OUT double precision, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer, e_h OUT pls_integer, e_min OUT pls_integer, e_sec OUT double precision);
    PROCEDURE f_sub(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_b_m_sec double precision, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer, p_e_m_sec double precision, i_m_Value double precision, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, b_h OUT pls_integer, b_min OUT pls_integer, b_sec OUT double precision, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer, e_h OUT pls_integer, e_min OUT pls_integer, e_sec OUT double precision);
    FUNCTION f_add(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_b_m_sec double precision, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p1_e_m_sec double precision, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_b_m_min pls_integer, p2_b_m_sec double precision, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer, p2_e_m_min pls_integer, p2_e_m_sec double precision) return Varchar2;
    FUNCTION f_sub(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_b_m_sec double precision, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p1_e_m_sec double precision, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_b_m_min pls_integer, p2_b_m_sec double precision, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer, p2_e_m_min pls_integer, p2_e_m_sec double precision) return Varchar2;
    FUNCTION f_add(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_b_m_sec double precision, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p1_e_m_sec double precision, te_string Varchar2) return Varchar2;
    FUNCTION f_sub(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_b_m_sec double precision, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p1_e_m_sec double precision, te_string Varchar2) return Varchar2;
    PROCEDURE intersects(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_b_m_sec double precision, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer, p_e_m_sec double precision, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, b_h OUT pls_integer, b_min OUT pls_integer, b_sec OUT double precision, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer, e_h OUT pls_integer, e_min OUT pls_integer, e_sec OUT double precision);
    PROCEDURE intersects(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_b_m_sec double precision, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p1_e_m_sec double precision, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_b_m_min pls_integer, p2_b_m_sec double precision, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer, p2_e_m_min pls_integer, p2_e_m_sec double precision, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, b_h OUT pls_integer, b_min OUT pls_integer, b_sec OUT double precision, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer, e_h OUT pls_integer, e_min OUT pls_integer, e_sec OUT double precision);
    FUNCTION intersects(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_b_m_sec double precision, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p1_e_m_sec double precision, te_string Varchar2) return Varchar2;
    FUNCTION f_eq(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_b_m_sec double precision, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p1_e_m_sec double precision, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_b_m_min pls_integer, p2_b_m_sec double precision, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer, p2_e_m_min pls_integer, p2_e_m_sec double precision) return pls_integer;
    FUNCTION f_n_eq(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_b_m_sec double precision, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p1_e_m_sec double precision, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_b_m_min pls_integer, p2_b_m_sec double precision, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer, p2_e_m_min pls_integer, p2_e_m_sec double precision) return pls_integer;
    FUNCTION f_l(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_b_m_sec double precision, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p1_e_m_sec double precision, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_b_m_min pls_integer, p2_b_m_sec double precision, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer, p2_e_m_min pls_integer, p2_e_m_sec double precision) return pls_integer;
    FUNCTION f_l_e(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_b_m_sec double precision, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p1_e_m_sec double precision, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_b_m_min pls_integer, p2_b_m_sec double precision, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer, p2_e_m_min pls_integer, p2_e_m_sec double precision) return pls_integer;
    FUNCTION f_b(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_b_m_sec double precision, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p1_e_m_sec double precision, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_b_m_min pls_integer, p2_b_m_sec double precision, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer, p2_e_m_min pls_integer, p2_e_m_sec double precision) return pls_integer;
    FUNCTION f_b_e(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_b_m_sec double precision, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p1_e_m_sec double precision, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_b_m_min pls_integer, p2_b_m_sec double precision, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer, p2_e_m_min pls_integer, p2_e_m_sec double precision) return pls_integer;

    FUNCTION f_overlaps(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_b_m_sec double precision, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer, p_e_m_sec double precision, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision) return pls_integer;
    FUNCTION f_precedes(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_b_m_sec double precision, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer, p_e_m_sec double precision, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision) return pls_integer;
    FUNCTION f_meets(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_b_m_sec double precision, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer, p_e_m_sec double precision, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision) return pls_integer;
    FUNCTION f_equal(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_b_m_sec double precision, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer, p_e_m_sec double precision, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision) return pls_integer;
    FUNCTION f_contains(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_b_m_sec double precision, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer, p_e_m_sec double precision, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision) return pls_integer;

    FUNCTION f_overlaps(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_b_m_sec double precision, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p1_e_m_sec double precision, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_b_m_min pls_integer, p2_b_m_sec double precision, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer, p2_e_m_min pls_integer, p2_e_m_sec double precision) return pls_integer;
    FUNCTION f_precedes(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_b_m_sec double precision, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p1_e_m_sec double precision, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_b_m_min pls_integer, p2_b_m_sec double precision, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer, p2_e_m_min pls_integer, p2_e_m_sec double precision) return pls_integer;
    FUNCTION f_meets(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_b_m_sec double precision, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p1_e_m_sec double precision, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_b_m_min pls_integer, p2_b_m_sec double precision, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer, p2_e_m_min pls_integer, p2_e_m_sec double precision) return pls_integer;
    FUNCTION f_equal(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_b_m_sec double precision, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p1_e_m_sec double precision, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_b_m_min pls_integer, p2_b_m_sec double precision, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer, p2_e_m_min pls_integer, p2_e_m_sec double precision) return pls_integer;
    FUNCTION f_contains(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_b_m_sec double precision, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p1_e_m_sec double precision, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_b_m_min pls_integer, p2_b_m_sec double precision, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer, p2_e_m_min pls_integer, p2_e_m_sec double precision) return pls_integer;

    FUNCTION f_overlaps(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_b_m_sec double precision, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p1_e_m_sec double precision, te_string Varchar2) return pls_integer;
    FUNCTION f_precedes(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_b_m_sec double precision, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p1_e_m_sec double precision, te_string Varchar2) return pls_integer;
    FUNCTION f_meets(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_b_m_sec double precision, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p1_e_m_sec double precision, te_string Varchar2) return pls_integer;
    FUNCTION f_equal(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_b_m_sec double precision, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p1_e_m_sec double precision, te_string Varchar2) return pls_integer;
    FUNCTION f_contains(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_b_m_sec double precision, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p1_e_m_sec double precision, te_string Varchar2) return pls_integer;

END;
/

-- End of DDL script for D_PERIOD_SEC_PACKAGE

-- Start of DDL script for D_PERIOD_Y_PACKAGE
-- Generated 5-Nov-00  3:42:58 pm
-- from -PELETLL:1

-- Drop the old instance of D_PERIOD_Y_PACKAGE

DROP PACKAGE d_period_y_package
/

-- Package D_PERIOD_Y_PACKAGE

CREATE OR REPLACE
PACKAGE D_Period_Y_Package AS

    PROCEDURE change_status(b_m_y IN OUT pls_integer, e_m_y IN OUT pls_integer, special_value pls_integer);
    PROCEDURE f_begin(b_m_y pls_integer, e_m_y pls_integer, b_y OUT pls_integer);
    PROCEDURE f_end(b_m_y pls_integer, e_m_y pls_integer, e_y OUT pls_integer);
    PROCEDURE set_begin(b_m_y IN OUT pls_integer, e_m_y IN OUT pls_integer, tp_m_y pls_integer);
    PROCEDURE set_end(b_m_y IN OUT pls_integer, e_m_y IN OUT pls_integer, tp_m_y pls_integer);
    FUNCTION get_granularity(b_m_y pls_integer, e_m_y pls_integer) return pls_integer;
    PROCEDURE duration(b_m_y pls_integer, e_m_y pls_integer, i_Value OUT double precision);
    FUNCTION to_string(b_m_y pls_integer, e_m_y pls_integer) return Varchar2;
    FUNCTION to_temporal_element(b_m_y pls_integer, e_m_y pls_integer) return Varchar2;
    PROCEDURE f_ass_period(b_m_y IN OUT pls_integer, e_m_y IN OUT pls_integer, p_b_m_y pls_integer, p_e_m_y pls_integer);
    PROCEDURE f_add_interval(b_m_y IN OUT pls_integer, e_m_y IN OUT pls_integer, i_m_Value double precision);
    PROCEDURE f_sub_interval(b_m_y IN OUT pls_integer, e_m_y IN OUT pls_integer, i_m_Value double precision);
    PROCEDURE f_add(b_m_y pls_integer, e_m_y pls_integer, p_b_m_y pls_integer, p_e_m_y pls_integer, i_m_Value double precision, b_y OUT pls_integer, e_y OUT pls_integer);
    PROCEDURE f_sub(b_m_y pls_integer, e_m_y pls_integer, p_b_m_y pls_integer, p_e_m_y pls_integer, i_m_Value double precision, b_y OUT pls_integer, e_y OUT pls_integer);
    FUNCTION f_add(b_m_y pls_integer, e_m_y pls_integer, p1_b_m_y pls_integer, p1_e_m_y pls_integer, p2_b_m_y pls_integer, p2_e_m_y pls_integer) return Varchar2;
    FUNCTION f_sub(b_m_y pls_integer, e_m_y pls_integer, p1_b_m_y pls_integer, p1_e_m_y pls_integer, p2_b_m_y pls_integer, p2_e_m_y pls_integer) return Varchar2;
    FUNCTION f_add(b_m_y pls_integer, e_m_y pls_integer, p1_b_m_y pls_integer, p1_e_m_y pls_integer, te_string Varchar2) return Varchar2;
    FUNCTION f_sub(b_m_y pls_integer, e_m_y pls_integer, p1_b_m_y pls_integer, p1_e_m_y pls_integer, te_string Varchar2) return Varchar2;
    PROCEDURE intersects(b_m_y pls_integer, e_m_y pls_integer, p_b_m_y pls_integer, p_e_m_y pls_integer, tp_m_y pls_integer, b_y OUT pls_integer, e_y OUT pls_integer);
    PROCEDURE intersects(b_m_y pls_integer, e_m_y pls_integer, p1_b_m_y pls_integer, p1_e_m_y pls_integer, p2_b_m_y pls_integer, p2_e_m_y pls_integer, b_y OUT pls_integer, e_y OUT pls_integer);
    FUNCTION intersects(b_m_y pls_integer, e_m_y pls_integer, p1_b_m_y pls_integer, p1_e_m_y pls_integer, te_string Varchar2) return Varchar2;
    FUNCTION f_eq(b_m_y pls_integer, e_m_y pls_integer, p1_b_m_y pls_integer, p1_e_m_y pls_integer, p2_b_m_y pls_integer, p2_e_m_y pls_integer) return pls_integer;
    FUNCTION f_n_eq(b_m_y pls_integer, e_m_y pls_integer, p1_b_m_y pls_integer, p1_e_m_y pls_integer, p2_b_m_y pls_integer, p2_e_m_y pls_integer) return pls_integer;
    FUNCTION f_l(b_m_y pls_integer, e_m_y pls_integer, p1_b_m_y pls_integer, p1_e_m_y pls_integer, p2_b_m_y pls_integer, p2_e_m_y pls_integer) return pls_integer;
    FUNCTION f_l_e(b_m_y pls_integer, e_m_y pls_integer, p1_b_m_y pls_integer, p1_e_m_y pls_integer, p2_b_m_y pls_integer, p2_e_m_y pls_integer) return pls_integer;
    FUNCTION f_b(b_m_y pls_integer, e_m_y pls_integer, p1_b_m_y pls_integer, p1_e_m_y pls_integer, p2_b_m_y pls_integer, p2_e_m_y pls_integer) return pls_integer;
    FUNCTION f_b_e(b_m_y pls_integer, e_m_y pls_integer, p1_b_m_y pls_integer, p1_e_m_y pls_integer, p2_b_m_y pls_integer, p2_e_m_y pls_integer) return pls_integer;

    FUNCTION f_overlaps(b_m_y pls_integer, e_m_y pls_integer, p_b_m_y pls_integer, p_e_m_y pls_integer, tp_m_y pls_integer) return pls_integer;
    FUNCTION f_precedes(b_m_y pls_integer, e_m_y pls_integer, p_b_m_y pls_integer, p_e_m_y pls_integer, tp_m_y pls_integer) return pls_integer;
    FUNCTION f_meets(b_m_y pls_integer, e_m_y pls_integer, p_b_m_y pls_integer, p_e_m_y pls_integer, tp_m_y pls_integer) return pls_integer;
    FUNCTION f_equal(b_m_y pls_integer, e_m_y pls_integer, p_b_m_y pls_integer, p_e_m_y pls_integer, tp_m_y pls_integer) return pls_integer;
    FUNCTION f_contains(b_m_y pls_integer, e_m_y pls_integer, p_b_m_y pls_integer, p_e_m_y pls_integer, tp_m_y pls_integer) return pls_integer;

    FUNCTION f_overlaps(b_m_y pls_integer, e_m_y pls_integer, p1_b_m_y pls_integer, p1_e_m_y pls_integer, p2_b_m_y pls_integer, p2_e_m_y pls_integer) return pls_integer;
    FUNCTION f_precedes(b_m_y pls_integer, e_m_y pls_integer, p1_b_m_y pls_integer, p1_e_m_y pls_integer, p2_b_m_y pls_integer, p2_e_m_y pls_integer) return pls_integer;
    FUNCTION f_meets(b_m_y pls_integer, e_m_y pls_integer, p1_b_m_y pls_integer, p1_e_m_y pls_integer, p2_b_m_y pls_integer, p2_e_m_y pls_integer) return pls_integer;
    FUNCTION f_equal(b_m_y pls_integer, e_m_y pls_integer, p1_b_m_y pls_integer, p1_e_m_y pls_integer, p2_b_m_y pls_integer, p2_e_m_y pls_integer) return pls_integer;
    FUNCTION f_contains(b_m_y pls_integer, e_m_y pls_integer, p1_b_m_y pls_integer, p1_e_m_y pls_integer, p2_b_m_y pls_integer, p2_e_m_y pls_integer) return pls_integer;

    FUNCTION f_overlaps(b_m_y pls_integer, e_m_y pls_integer, p1_b_m_y pls_integer, p1_e_m_y pls_integer, te_string Varchar2) return pls_integer;
    FUNCTION f_precedes(b_m_y pls_integer, e_m_y pls_integer, p1_b_m_y pls_integer, p1_e_m_y pls_integer, te_string Varchar2) return pls_integer;
    FUNCTION f_meets(b_m_y pls_integer, e_m_y pls_integer, p1_b_m_y pls_integer, p1_e_m_y pls_integer, te_string Varchar2) return pls_integer;
    FUNCTION f_equal(b_m_y pls_integer, e_m_y pls_integer, p1_b_m_y pls_integer, p1_e_m_y pls_integer, te_string Varchar2) return pls_integer;
    FUNCTION f_contains(b_m_y pls_integer, e_m_y pls_integer, p1_b_m_y pls_integer, p1_e_m_y pls_integer, te_string Varchar2) return pls_integer;

END;
/

-- End of DDL script for D_PERIOD_Y_PACKAGE

-- Start of DDL script for D_TE_D_PACKAGE
-- Generated 5-Nov-00  3:42:59 pm
-- from -PELETLL:1

-- Drop the old instance of D_TE_D_PACKAGE

DROP PACKAGE d_te_d_package
/

-- Package D_TE_D_PACKAGE

CREATE OR REPLACE
PACKAGE D_TE_D_Package AS

    FUNCTION to_string(te_string Varchar2) return Varchar2;
    PROCEDURE f_begin(te_string Varchar2, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer);
    PROCEDURE f_end(te_string Varchar2, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer);
    FUNCTION get_granularity(te_string Varchar2) return pls_integer;
    PROCEDURE duration(te_string Varchar2, i_Value OUT double precision);
    FUNCTION cardinality(te_string Varchar2) return pls_integer;
    PROCEDURE go(te_string Varchar2, num pls_integer, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer);
    FUNCTION f_ass_temp_element(te_string Varchar2, te1_string Varchar2) return Varchar2;
    FUNCTION f_add_temp_element(te_string Varchar2, te1_string Varchar2) return Varchar2;
    FUNCTION f_add_period(te_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer) return Varchar2;
    FUNCTION f_sub_temp_element(te_string Varchar2, te1_string Varchar2) return Varchar2;
    FUNCTION f_sub_period(te_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer) return Varchar2;
    FUNCTION f_add(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer) return Varchar2;
    FUNCTION f_add(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return Varchar2;
    FUNCTION f_sub(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer) return Varchar2;
    FUNCTION f_sub(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return Varchar2;
    FUNCTION intersects(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer) return Varchar2;
    FUNCTION intersects(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer) return Varchar2;
    FUNCTION intersects(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return Varchar2;
    FUNCTION f_eq(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer;
    FUNCTION f_n_eq(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer;
    FUNCTION f_overlaps(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer) return pls_integer;
    FUNCTION f_precedes(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer) return pls_integer;
    FUNCTION f_meets(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer) return pls_integer;
    FUNCTION f_equal(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer) return pls_integer;
    FUNCTION f_contains(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer) return pls_integer;
    FUNCTION f_overlaps(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer) return pls_integer;
    FUNCTION f_precedes(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer) return pls_integer;
    FUNCTION f_meets(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer) return pls_integer;
    FUNCTION f_equal(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer) return pls_integer;
    FUNCTION f_contains(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer) return pls_integer;
    FUNCTION f_overlaps(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer;
    FUNCTION f_precedes(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer;
    FUNCTION f_meets(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer;
    FUNCTION f_equal(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer;
    FUNCTION f_contains(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer;

END;
/

-- End of DDL script for D_TE_D_PACKAGE

-- Start of DDL script for D_TE_H_PACKAGE
-- Generated 5-Nov-00  3:42:59 pm
-- from -PELETLL:1

-- Drop the old instance of D_TE_H_PACKAGE

DROP PACKAGE d_te_h_package
/

-- Package D_TE_H_PACKAGE

CREATE OR REPLACE
PACKAGE D_TE_H_Package AS

    FUNCTION to_string(te_string Varchar2) return Varchar2;
    PROCEDURE f_begin(te_string Varchar2, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, b_h OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer, e_h OUT pls_integer);
    PROCEDURE f_end(te_string Varchar2, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, b_h OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer, e_h OUT pls_integer);
    FUNCTION get_granularity(te_string Varchar2) return pls_integer;
    PROCEDURE duration(te_string Varchar2, i_Value OUT double precision);
    FUNCTION cardinality(te_string Varchar2) return pls_integer;
    PROCEDURE go(te_string Varchar2, num pls_integer, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, b_h OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer, e_h OUT pls_integer);
    FUNCTION f_ass_temp_element(te_string Varchar2, te1_string Varchar2) return Varchar2;
    FUNCTION f_add_temp_element(te_string Varchar2, te1_string Varchar2) return Varchar2;
    FUNCTION f_add_period(te_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer) return Varchar2;
    FUNCTION f_sub_temp_element(te_string Varchar2, te1_string Varchar2) return Varchar2;
    FUNCTION f_sub_period(te_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer) return Varchar2;
    FUNCTION f_add(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer) return Varchar2;
    FUNCTION f_add(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return Varchar2;
    FUNCTION f_sub(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer) return Varchar2;
    FUNCTION f_sub(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return Varchar2;
    FUNCTION intersects(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer) return Varchar2;
    FUNCTION intersects(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer) return Varchar2;
    FUNCTION intersects(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return Varchar2;
    FUNCTION f_eq(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer;
    FUNCTION f_n_eq(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer;
    FUNCTION f_overlaps(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer) return pls_integer;
    FUNCTION f_precedes(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer) return pls_integer;
    FUNCTION f_meets(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer) return pls_integer;
    FUNCTION f_equal(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer) return pls_integer;
    FUNCTION f_contains(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer) return pls_integer;
    FUNCTION f_overlaps(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer) return pls_integer;
    FUNCTION f_precedes(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer) return pls_integer;
    FUNCTION f_meets(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer) return pls_integer;
    FUNCTION f_equal(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer) return pls_integer;
    FUNCTION f_contains(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer) return pls_integer;
    FUNCTION f_overlaps(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer;
    FUNCTION f_precedes(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer;
    FUNCTION f_meets(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer;
    FUNCTION f_equal(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer;
    FUNCTION f_contains(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer;

END;
/

-- End of DDL script for D_TE_H_PACKAGE

-- Start of DDL script for D_TE_MIN_PACKAGE
-- Generated 5-Nov-00  3:42:59 pm
-- from -PELETLL:1

-- Drop the old instance of D_TE_MIN_PACKAGE

DROP PACKAGE d_te_min_package
/

-- Package D_TE_MIN_PACKAGE

CREATE OR REPLACE
PACKAGE D_TE_Min_Package AS

    FUNCTION to_string(te_string Varchar2) return Varchar2;
    PROCEDURE f_begin(te_string Varchar2, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, b_h OUT pls_integer, b_min OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer, e_h OUT pls_integer, e_min OUT pls_integer);
    PROCEDURE f_end(te_string Varchar2, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, b_h OUT pls_integer, b_min OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer, e_h OUT pls_integer, e_min OUT pls_integer);
    FUNCTION get_granularity(te_string Varchar2) return pls_integer;
    PROCEDURE duration(te_string Varchar2, i_Value OUT double precision);
    FUNCTION cardinality(te_string Varchar2) return pls_integer;
    PROCEDURE go(te_string Varchar2, num pls_integer, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, b_h OUT pls_integer, b_min OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer, e_h OUT pls_integer, e_min OUT pls_integer);
    FUNCTION f_ass_temp_element(te_string Varchar2, te1_string Varchar2) return Varchar2;
    FUNCTION f_add_temp_element(te_string Varchar2, te1_string Varchar2) return Varchar2;
    FUNCTION f_add_period(te_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer) return Varchar2;
    FUNCTION f_sub_temp_element(te_string Varchar2, te1_string Varchar2) return Varchar2;
    FUNCTION f_sub_period(te_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer) return Varchar2;
    FUNCTION f_add(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer) return Varchar2;
    FUNCTION f_add(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return Varchar2;
    FUNCTION f_sub(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer) return Varchar2;
    FUNCTION f_sub(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return Varchar2;
    FUNCTION intersects(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer) return Varchar2;
    FUNCTION intersects(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer) return Varchar2;
    FUNCTION intersects(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return Varchar2;
    FUNCTION f_eq(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer;
    FUNCTION f_n_eq(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer;
    FUNCTION f_overlaps(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer) return pls_integer;
    FUNCTION f_precedes(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer) return pls_integer;
    FUNCTION f_meets(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer) return pls_integer;
    FUNCTION f_equal(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer) return pls_integer;
    FUNCTION f_contains(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer) return pls_integer;
    FUNCTION f_overlaps(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer) return pls_integer;
    FUNCTION f_precedes(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer) return pls_integer;
    FUNCTION f_meets(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer) return pls_integer;
    FUNCTION f_equal(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer) return pls_integer;
    FUNCTION f_contains(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer) return pls_integer;
    FUNCTION f_overlaps(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer;
    FUNCTION f_precedes(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer;
    FUNCTION f_meets(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer;
    FUNCTION f_equal(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer;
    FUNCTION f_contains(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer;

END;
/

-- End of DDL script for D_TE_MIN_PACKAGE

-- Start of DDL script for D_TE_M_PACKAGE
-- Generated 5-Nov-00  3:43:00 pm
-- from -PELETLL:1

-- Drop the old instance of D_TE_M_PACKAGE

DROP PACKAGE d_te_m_package
/

-- Package D_TE_M_PACKAGE

CREATE OR REPLACE
PACKAGE D_TE_M_Package AS

    FUNCTION to_string(te_string Varchar2) return Varchar2;
    PROCEDURE f_begin(te_string Varchar2, b_y OUT pls_integer, b_m OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer);
    PROCEDURE f_end(te_string Varchar2, b_y OUT pls_integer, b_m OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer);
    FUNCTION get_granularity(te_string Varchar2) return pls_integer;
    PROCEDURE duration(te_string Varchar2, i_Value OUT double precision);
    FUNCTION cardinality(te_string Varchar2) return pls_integer;
    PROCEDURE go(te_string Varchar2, num pls_integer, b_y OUT pls_integer, b_m OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer);
    FUNCTION f_ass_temp_element(te_string Varchar2, te1_string Varchar2) return Varchar2;
    FUNCTION f_add_temp_element(te_string Varchar2, te1_string Varchar2) return Varchar2;
    FUNCTION f_add_period(te_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer) return Varchar2;
    FUNCTION f_sub_temp_element(te_string Varchar2, te1_string Varchar2) return Varchar2;
    FUNCTION f_sub_period(te_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer) return Varchar2;
    FUNCTION f_add(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer) return Varchar2;
    FUNCTION f_add(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return Varchar2;
    FUNCTION f_sub(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer) return Varchar2;
    FUNCTION f_sub(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return Varchar2;
    FUNCTION intersects(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer, tp_m_m pls_integer) return Varchar2;
    FUNCTION intersects(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer) return Varchar2;
    FUNCTION intersects(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return Varchar2;
    FUNCTION f_eq(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer;
    FUNCTION f_n_eq(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer;
    FUNCTION f_overlaps(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer, tp_m_m pls_integer) return pls_integer;
    FUNCTION f_precedes(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer, tp_m_m pls_integer) return pls_integer;
    FUNCTION f_meets(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer, tp_m_m pls_integer) return pls_integer;
    FUNCTION f_equal(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer, tp_m_m pls_integer) return pls_integer;
    FUNCTION f_contains(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer, tp_m_m pls_integer) return pls_integer;
    FUNCTION f_overlaps(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer) return pls_integer;
    FUNCTION f_precedes(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer) return pls_integer;
    FUNCTION f_meets(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer) return pls_integer;
    FUNCTION f_equal(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer) return pls_integer;
    FUNCTION f_contains(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer) return pls_integer;
    FUNCTION f_overlaps(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer;
    FUNCTION f_precedes(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer;
    FUNCTION f_meets(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer;
    FUNCTION f_equal(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer;
    FUNCTION f_contains(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer;

END;
/

-- End of DDL script for D_TE_M_PACKAGE

-- Start of DDL script for D_TE_SEC_PACKAGE
-- Generated 5-Nov-00  3:43:00 pm
-- from -PELETLL:1

-- Drop the old instance of D_TE_SEC_PACKAGE

DROP PACKAGE d_te_sec_package
/

-- Package D_TE_SEC_PACKAGE

CREATE OR REPLACE
PACKAGE D_TE_Sec_Package AS

    FUNCTION to_string(te_string Varchar2) return Varchar2;
    PROCEDURE f_begin(te_string Varchar2, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, b_h OUT pls_integer, b_min OUT pls_integer, b_sec OUT double precision, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer, e_h OUT pls_integer, e_min OUT pls_integer, e_sec OUT double precision);
    PROCEDURE f_end(te_string Varchar2, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, b_h OUT pls_integer, b_min OUT pls_integer, b_sec OUT double precision, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer, e_h OUT pls_integer, e_min OUT pls_integer, e_sec OUT double precision);
    FUNCTION get_granularity(te_string Varchar2) return pls_integer;
    PROCEDURE duration(te_string Varchar2, i_Value OUT double precision);
    FUNCTION cardinality(te_string Varchar2) return pls_integer;
    PROCEDURE go(te_string Varchar2, num pls_integer, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, b_h OUT pls_integer, b_min OUT pls_integer, b_sec OUT double precision, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer, e_h OUT pls_integer, e_min OUT pls_integer, e_sec OUT double precision);
    FUNCTION f_ass_temp_element(te_string Varchar2, te1_string Varchar2) return Varchar2;
    FUNCTION f_add_temp_element(te_string Varchar2, te1_string Varchar2) return Varchar2;
    FUNCTION f_add_period(te_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_b_m_sec double precision, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer, p_e_m_sec double precision) return Varchar2;
    FUNCTION f_sub_temp_element(te_string Varchar2, te1_string Varchar2) return Varchar2;
    FUNCTION f_sub_period(te_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_b_m_sec double precision, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer, p_e_m_sec double precision) return Varchar2;
    FUNCTION f_add(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_b_m_sec double precision, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer, p_e_m_sec double precision) return Varchar2;
    FUNCTION f_add(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return Varchar2;
    FUNCTION f_sub(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_b_m_sec double precision, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer, p_e_m_sec double precision) return Varchar2;
    FUNCTION f_sub(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return Varchar2;
    FUNCTION intersects(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision) return Varchar2;
    FUNCTION intersects(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_b_m_sec double precision, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer, p_e_m_sec double precision) return Varchar2;
    FUNCTION intersects(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return Varchar2;
    FUNCTION f_eq(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer;
    FUNCTION f_n_eq(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer;
    FUNCTION f_overlaps(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision) return pls_integer;
    FUNCTION f_precedes(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision) return pls_integer;
    FUNCTION f_meets(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision) return pls_integer;
    FUNCTION f_equal(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision) return pls_integer;
    FUNCTION f_contains(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision) return pls_integer;
    FUNCTION f_overlaps(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_b_m_sec double precision, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer, p_e_m_sec double precision) return pls_integer;
    FUNCTION f_precedes(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_b_m_sec double precision, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer, p_e_m_sec double precision) return pls_integer;
    FUNCTION f_meets(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_b_m_sec double precision, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer, p_e_m_sec double precision) return pls_integer;
    FUNCTION f_equal(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_b_m_sec double precision, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer, p_e_m_sec double precision) return pls_integer;
    FUNCTION f_contains(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_b_m_sec double precision, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer, p_e_m_sec double precision) return pls_integer;
    FUNCTION f_overlaps(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer;
    FUNCTION f_precedes(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer;
    FUNCTION f_meets(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer;
    FUNCTION f_equal(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer;
    FUNCTION f_contains(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer;

END;
/

-- End of DDL script for D_TE_SEC_PACKAGE

-- Start of DDL script for D_TE_Y_PACKAGE
-- Generated 5-Nov-00  3:43:00 pm
-- from -PELETLL:1

-- Drop the old instance of D_TE_Y_PACKAGE

DROP PACKAGE d_te_y_package
/

-- Package D_TE_Y_PACKAGE

CREATE OR REPLACE
PACKAGE D_TE_Y_Package AS

    FUNCTION to_string(te_string Varchar2) return Varchar2;
    PROCEDURE f_begin(te_string Varchar2, b_y OUT pls_integer, e_y OUT pls_integer);
    PROCEDURE f_end(te_string Varchar2, b_y OUT pls_integer, e_y OUT pls_integer);
    FUNCTION get_granularity(te_string Varchar2) return pls_integer;
    PROCEDURE duration(te_string Varchar2, i_Value OUT double precision);
    FUNCTION cardinality(te_string Varchar2) return pls_integer;
    PROCEDURE go(te_string Varchar2, num pls_integer, b_y OUT pls_integer, e_y OUT pls_integer);
    FUNCTION f_ass_temp_element(te_string Varchar2, te1_string Varchar2) return Varchar2;
    FUNCTION f_add_temp_element(te_string Varchar2, te1_string Varchar2) return Varchar2;
    FUNCTION f_add_period(te_string Varchar2, p_b_m_y pls_integer, p_e_m_y pls_integer) return Varchar2;
    FUNCTION f_sub_temp_element(te_string Varchar2, te1_string Varchar2) return Varchar2;
    FUNCTION f_sub_period(te_string Varchar2, p_b_m_y pls_integer, p_e_m_y pls_integer) return Varchar2;
    FUNCTION f_add(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_e_m_y pls_integer) return Varchar2;
    FUNCTION f_add(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return Varchar2;
    FUNCTION f_sub(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_e_m_y pls_integer) return Varchar2;
    FUNCTION f_sub(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return Varchar2;
    FUNCTION intersects(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer) return Varchar2;
    FUNCTION intersects(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_e_m_y pls_integer) return Varchar2;
    FUNCTION intersects(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return Varchar2;
    FUNCTION f_eq(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer;
    FUNCTION f_n_eq(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer;
    FUNCTION f_overlaps(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer) return pls_integer;
    FUNCTION f_precedes(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer) return pls_integer;
    FUNCTION f_meets(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer) return pls_integer;
    FUNCTION f_equal(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer) return pls_integer;
    FUNCTION f_contains(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer) return pls_integer;
    FUNCTION f_overlaps(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_e_m_y pls_integer) return pls_integer;
    FUNCTION f_precedes(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_e_m_y pls_integer) return pls_integer;
    FUNCTION f_meets(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_e_m_y pls_integer) return pls_integer;
    FUNCTION f_equal(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_e_m_y pls_integer) return pls_integer;
    FUNCTION f_contains(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_e_m_y pls_integer) return pls_integer;
    FUNCTION f_overlaps(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer;
    FUNCTION f_precedes(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer;
    FUNCTION f_meets(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer;
    FUNCTION f_equal(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer;
    FUNCTION f_contains(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer;

END;
/

-- End of DDL script for D_TE_Y_PACKAGE

-- Start of DDL script for D_TIMEPOINT_D_PACKAGE
-- Generated 5-Nov-00  3:43:01 pm
-- from -PELETLL:1

-- Drop the old instance of D_TIMEPOINT_D_PACKAGE

DROP PACKAGE d_timepoint_d_package
/

-- Package D_TIMEPOINT_D_PACKAGE

CREATE OR REPLACE
PACKAGE D_Timepoint_D_Package AS

    PROCEDURE change_status(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, special_value pls_integer, year pls_integer);
    FUNCTION year(m_y pls_integer, m_m pls_integer, m_d pls_integer) return pls_integer;
    FUNCTION month(m_y pls_integer, m_m pls_integer, m_d pls_integer) return pls_integer;
    FUNCTION day(m_y pls_integer, m_m pls_integer, m_d pls_integer) return pls_integer;
    FUNCTION get_granularity(m_y pls_integer, m_m pls_integer, m_d pls_integer) return pls_integer;
    FUNCTION get_Abs_Date(m_y pls_integer, m_m pls_integer, m_d pls_integer) return double precision;
    PROCEDURE set_year(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, year pls_integer);
    PROCEDURE set_month(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, month pls_integer);
    PROCEDURE set_day(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, day pls_integer);
    PROCEDURE set_Abs_Date(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, d double precision);
    PROCEDURE to_period(m_y pls_integer, m_m pls_integer, m_d pls_integer, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer);
    FUNCTION to_temporal_element(m_y pls_integer, m_m pls_integer, m_d pls_integer) return Varchar2;
    FUNCTION to_string(m_y pls_integer, m_m pls_integer, m_d pls_integer) return Varchar2;
    FUNCTION is_Leap_Year(m_y pls_integer, m_m pls_integer, m_d pls_integer) return pls_integer;
    FUNCTION is_Leap_Year(m_y pls_integer, m_m pls_integer, m_d pls_integer, year pls_integer) return pls_integer;
    FUNCTION days_in_month(m_y pls_integer, m_m pls_integer, m_d pls_integer) return pls_integer;
    PROCEDURE f_ass_timestamp(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer);
    PROCEDURE f_ass_timepoint(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer);
    PROCEDURE f_add_interval(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, i_m_Value double precision);
    PROCEDURE f_sub_interval(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, i_m_Value double precision);
    PROCEDURE f_incr(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer);
    PROCEDURE f_decr(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer);
    PROCEDURE f_add(m_y pls_integer, m_m pls_integer, m_d pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, i_m_Value double precision, y OUT pls_integer, m OUT pls_integer, d OUT pls_integer);
    PROCEDURE f_sub(m_y pls_integer, m_m pls_integer, m_d pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, i_m_Value double precision, y OUT pls_integer, m OUT pls_integer, d OUT pls_integer);
    PROCEDURE intersects(m_y pls_integer, m_m pls_integer, m_d pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer);
    PROCEDURE intersects(m_y pls_integer, m_m pls_integer, m_d pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer);
    FUNCTION intersects(m_y pls_integer, m_m pls_integer, m_d pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, te_string Varchar2) return Varchar2;
    FUNCTION f_eq(m_y pls_integer, m_m pls_integer, m_d pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer) return pls_integer;
    FUNCTION f_n_eq(m_y pls_integer, m_m pls_integer, m_d pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer) return pls_integer;
    FUNCTION f_l(m_y pls_integer, m_m pls_integer, m_d pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer) return pls_integer;
    FUNCTION f_l_e(m_y pls_integer, m_m pls_integer, m_d pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer) return pls_integer;
    FUNCTION f_b(m_y pls_integer, m_m pls_integer, m_d pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer) return pls_integer;
    FUNCTION f_b_e(m_y pls_integer, m_m pls_integer, m_d pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer) return pls_integer;
    PROCEDURE f_diff(m_y pls_integer, m_m pls_integer, m_d pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, i_Value OUT double precision);
    FUNCTION f_eq(m_y pls_integer, m_m pls_integer, m_d pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer;
    FUNCTION f_n_eq(m_y pls_integer, m_m pls_integer, m_d pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer;
    FUNCTION f_l(m_y pls_integer, m_m pls_integer, m_d pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer;
    FUNCTION f_l_e(m_y pls_integer, m_m pls_integer, m_d pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer;
    FUNCTION f_b(m_y pls_integer, m_m pls_integer, m_d pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer;
    FUNCTION f_b_e(m_y pls_integer, m_m pls_integer, m_d pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer;
    FUNCTION f_overlaps(m_y pls_integer, m_m pls_integer, m_d pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer) return pls_integer;
    FUNCTION f_precedes(m_y pls_integer, m_m pls_integer, m_d pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer) return pls_integer;
    FUNCTION f_meets(m_y pls_integer, m_m pls_integer, m_d pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer) return pls_integer;
    FUNCTION f_equal(m_y pls_integer, m_m pls_integer, m_d pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer) return pls_integer;
    FUNCTION f_contains(m_y pls_integer, m_m pls_integer, m_d pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer) return pls_integer;
    FUNCTION f_overlaps(m_y pls_integer, m_m pls_integer, m_d pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer) return pls_integer;
    FUNCTION f_precedes(m_y pls_integer, m_m pls_integer, m_d pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer) return pls_integer;
    FUNCTION f_meets(m_y pls_integer, m_m pls_integer, m_d pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer) return pls_integer;
    FUNCTION f_equal(m_y pls_integer, m_m pls_integer, m_d pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer) return pls_integer;
    FUNCTION f_contains(m_y pls_integer, m_m pls_integer, m_d pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer) return pls_integer;
    FUNCTION f_overlaps(m_y pls_integer, m_m pls_integer, m_d pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, te_string Varchar2) return pls_integer;
    FUNCTION f_precedes(m_y pls_integer, m_m pls_integer, m_d pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, te_string Varchar2) return pls_integer;
    FUNCTION f_meets(m_y pls_integer, m_m pls_integer, m_d pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, te_string Varchar2) return pls_integer;
    FUNCTION f_equal(m_y pls_integer, m_m pls_integer, m_d pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, te_string Varchar2) return pls_integer;
    FUNCTION f_contains(m_y pls_integer, m_m pls_integer, m_d pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, te_string Varchar2) return pls_integer;
    FUNCTION f_overlaps(m_y pls_integer, m_m pls_integer, m_d pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp3_m_y pls_integer, tp3_m_m pls_integer, tp3_m_d pls_integer, tp4_m_y pls_integer, tp4_m_m pls_integer, tp4_m_d pls_integer) return pls_integer;

END;
/

-- End of DDL script for D_TIMEPOINT_D_PACKAGE

-- Start of DDL script for D_TIMEPOINT_H_PACKAGE
-- Generated 5-Nov-00  3:43:01 pm
-- from -PELETLL:1

-- Drop the old instance of D_TIMEPOINT_H_PACKAGE

DROP PACKAGE d_timepoint_h_package
/

-- Package D_TIMEPOINT_H_PACKAGE

CREATE OR REPLACE
PACKAGE D_Timepoint_H_Package AS

    PROCEDURE change_status(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, special_value pls_integer, special_hours pls_integer, year pls_integer);
    PROCEDURE change_status(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, special_hours pls_integer);
    FUNCTION year(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer) return pls_integer;
    FUNCTION month(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer) return pls_integer;
    FUNCTION day(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer) return pls_integer;
    FUNCTION hour(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer) return pls_integer;
    FUNCTION get_granularity(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer) return pls_integer;
    FUNCTION get_Abs_Date(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer) return double precision;
    PROCEDURE set_year(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, year pls_integer);
    PROCEDURE set_month(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, month pls_integer);
    PROCEDURE set_day(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, day pls_integer);
    PROCEDURE set_hour(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, hour pls_integer);
    PROCEDURE set_Abs_Date(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, d double precision);
    PROCEDURE to_period(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, b_h OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer, e_h OUT pls_integer);
    FUNCTION to_temporal_element(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer) return Varchar2;
    FUNCTION to_string(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer) return Varchar2;
    FUNCTION is_Leap_Year(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer) return pls_integer;
    FUNCTION is_Leap_Year(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, year pls_integer) return pls_integer;
    FUNCTION days_in_month(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer) return pls_integer;
    PROCEDURE f_ass_timestamp(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer);
    PROCEDURE f_ass_timepoint(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer);
    PROCEDURE f_add_interval(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, i_m_Value double precision);
    PROCEDURE f_sub_interval(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, i_m_Value double precision);
    PROCEDURE f_incr(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer);
    PROCEDURE f_decr(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer);
    PROCEDURE f_add(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, i_m_Value double precision, y OUT pls_integer, m OUT pls_integer, d OUT pls_integer, h OUT pls_integer);
    PROCEDURE f_sub(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, i_m_Value double precision, y OUT pls_integer, m OUT pls_integer, d OUT pls_integer, h OUT pls_integer);
    PROCEDURE intersects(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, b_h OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer, e_h OUT pls_integer);
    PROCEDURE intersects(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, b_h OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer, e_h OUT pls_integer);
    FUNCTION intersects(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, te_string Varchar2) return Varchar2;
    FUNCTION f_eq(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer) return pls_integer;
    FUNCTION f_n_eq(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer) return pls_integer;
    FUNCTION f_l(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer) return pls_integer;
    FUNCTION f_l_e(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer) return pls_integer;
    FUNCTION f_b(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer) return pls_integer;
    FUNCTION f_b_e(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer) return pls_integer;
    PROCEDURE f_diff(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer, i_Value OUT double precision);
    FUNCTION f_eq(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer;
    FUNCTION f_n_eq(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer;
    FUNCTION f_l(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer;
    FUNCTION f_l_e(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer;
    FUNCTION f_b(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer;
    FUNCTION f_b_e(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer;
    FUNCTION f_overlaps(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer) return pls_integer;
    FUNCTION f_precedes(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer) return pls_integer;
    FUNCTION f_meets(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer) return pls_integer;
    FUNCTION f_equal(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer) return pls_integer;
    FUNCTION f_contains(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer) return pls_integer;
    FUNCTION f_overlaps(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer) return pls_integer;
    FUNCTION f_precedes(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer) return pls_integer;
    FUNCTION f_meets(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer) return pls_integer;
    FUNCTION f_equal(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer) return pls_integer;
    FUNCTION f_contains(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer) return pls_integer;
    FUNCTION f_overlaps(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, te_string Varchar2) return pls_integer;
    FUNCTION f_precedes(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, te_string Varchar2) return pls_integer;
    FUNCTION f_meets(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, te_string Varchar2) return pls_integer;
    FUNCTION f_equal(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, te_string Varchar2) return pls_integer;
    FUNCTION f_contains(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, te_string Varchar2) return pls_integer;
    FUNCTION f_overlaps(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer, tp3_m_y pls_integer, tp3_m_m pls_integer, tp3_m_d pls_integer, tp3_m_h pls_integer, tp4_m_y pls_integer, tp4_m_m pls_integer, tp4_m_d pls_integer, tp4_m_h pls_integer) return pls_integer;

END;
/

-- End of DDL script for D_TIMEPOINT_H_PACKAGE

-- Start of DDL script for D_TIMEPOINT_MIN_PACKAGE
-- Generated 5-Nov-00  3:43:02 pm
-- from -PELETLL:1

-- Drop the old instance of D_TIMEPOINT_MIN_PACKAGE

DROP PACKAGE d_timepoint_min_package
/

-- Package D_TIMEPOINT_MIN_PACKAGE

CREATE OR REPLACE
PACKAGE D_Timepoint_Min_Package AS

    PROCEDURE change_status(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, m_min IN OUT pls_integer, special_value pls_integer, special_hours pls_integer, year pls_integer);
    FUNCTION year(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer) return pls_integer;
    FUNCTION month(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer) return pls_integer;
    FUNCTION day(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer) return pls_integer;
    FUNCTION hour(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer) return pls_integer;
    FUNCTION minute(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer) return pls_integer;
    FUNCTION get_granularity(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer) return pls_integer;
    FUNCTION get_Abs_Date(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer) return double precision;
    PROCEDURE set_year(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, m_min IN OUT pls_integer, year pls_integer);
    PROCEDURE set_month(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, m_min IN OUT pls_integer, month pls_integer);
    PROCEDURE set_day(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, m_min IN OUT pls_integer, day pls_integer);
    PROCEDURE set_hour(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, m_min IN OUT pls_integer, hour pls_integer);
    PROCEDURE set_minute(m_y  IN OUT pls_integer, m_m  IN OUT pls_integer, m_d  IN OUT pls_integer, m_h  IN OUT pls_integer, m_min  IN OUT pls_integer, minute pls_integer);
    PROCEDURE set_Abs_Date(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, m_min IN OUT pls_integer, d double precision);
    PROCEDURE to_period(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, b_h OUT pls_integer, b_min OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer, e_h OUT pls_integer, e_min OUT pls_integer);
    FUNCTION to_temporal_element(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer) return Varchar2;
    FUNCTION to_string(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer) return Varchar2;
    FUNCTION is_Leap_Year(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer) return pls_integer;
    FUNCTION is_Leap_Year(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, year pls_integer) return pls_integer;
    FUNCTION days_in_month(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer) return pls_integer;
    PROCEDURE f_ass_timestamp(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, m_min IN OUT pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer);
    PROCEDURE f_ass_timepoint(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, m_min IN OUT pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer);
    PROCEDURE f_add_interval(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, m_min IN OUT pls_integer, i_m_Value double precision);
    PROCEDURE f_sub_interval(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, m_min IN OUT pls_integer, i_m_Value double precision);
    PROCEDURE f_incr(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, m_min IN OUT pls_integer);
    PROCEDURE f_decr(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, m_min IN OUT pls_integer);
    PROCEDURE f_add(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, i_m_Value double precision, y OUT pls_integer, m OUT pls_integer, d OUT pls_integer, h OUT pls_integer, minute OUT pls_integer);
    PROCEDURE f_sub(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, i_m_Value double precision, y OUT pls_integer, m OUT pls_integer, d OUT pls_integer, h OUT pls_integer, minute OUT pls_integer);
    PROCEDURE intersects(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp1_m_min pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer, tp2_m_min pls_integer, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, b_h OUT pls_integer, b_min OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer, e_h OUT pls_integer, e_min OUT pls_integer);
    PROCEDURE intersects(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, b_h OUT pls_integer, b_min OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer, e_h OUT pls_integer, e_min OUT pls_integer);
    FUNCTION intersects(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, te_string Varchar2) return Varchar2;
    FUNCTION f_eq(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp1_m_min pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer, tp2_m_min pls_integer) return pls_integer;
    FUNCTION f_n_eq(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp1_m_min pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer, tp2_m_min pls_integer) return pls_integer;
    FUNCTION f_l(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp1_m_min pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer, tp2_m_min pls_integer) return pls_integer;
    FUNCTION f_l_e(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp1_m_min pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer, tp2_m_min pls_integer) return pls_integer;
    FUNCTION f_b(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp1_m_min pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer, tp2_m_min pls_integer) return pls_integer;
    FUNCTION f_b_e(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp1_m_min pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer, tp2_m_min pls_integer) return pls_integer;
    PROCEDURE f_diff(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp1_m_min pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer, tp2_m_min pls_integer, i_Value OUT double precision);
    FUNCTION f_eq(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer;
    FUNCTION f_n_eq(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer;
    FUNCTION f_l(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer;
    FUNCTION f_l_e(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer;
    FUNCTION f_b(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer;
    FUNCTION f_b_e(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer;
    FUNCTION f_overlaps(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp1_m_min pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer, tp2_m_min pls_integer) return pls_integer;
    FUNCTION f_precedes(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp1_m_min pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer, tp2_m_min pls_integer) return pls_integer;
    FUNCTION f_meets(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp1_m_min pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer, tp2_m_min pls_integer) return pls_integer;
    FUNCTION f_equal(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp1_m_min pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer, tp2_m_min pls_integer) return pls_integer;
    FUNCTION f_contains(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp1_m_min pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer, tp2_m_min pls_integer) return pls_integer;
    FUNCTION f_overlaps(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer) return pls_integer;
    FUNCTION f_precedes(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer) return pls_integer;
    FUNCTION f_meets(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer) return pls_integer;
    FUNCTION f_equal(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer) return pls_integer;
    FUNCTION f_contains(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer) return pls_integer;
    FUNCTION f_overlaps(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, te_string Varchar2) return pls_integer;
    FUNCTION f_precedes(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, te_string Varchar2) return pls_integer;
    FUNCTION f_meets(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, te_string Varchar2) return pls_integer;
    FUNCTION f_equal(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, te_string Varchar2) return pls_integer;
    FUNCTION f_contains(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, te_string Varchar2) return pls_integer;
    FUNCTION f_overlaps(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp1_m_min pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer, tp2_m_min pls_integer, tp3_m_y pls_integer, tp3_m_m pls_integer, tp3_m_d pls_integer, tp3_m_h pls_integer, tp3_m_min pls_integer, tp4_m_y pls_integer, tp4_m_m pls_integer, tp4_m_d pls_integer, tp4_m_h pls_integer, tp4_m_min pls_integer) return pls_integer;

END;
/

-- End of DDL script for D_TIMEPOINT_MIN_PACKAGE

-- Start of DDL script for D_TIMEPOINT_M_PACKAGE
-- Generated 5-Nov-00  3:43:02 pm
-- from -PELETLL:1

-- Drop the old instance of D_TIMEPOINT_M_PACKAGE

DROP PACKAGE d_timepoint_m_package
/

-- Package D_TIMEPOINT_M_PACKAGE

CREATE OR REPLACE
PACKAGE D_Timepoint_M_Package AS

    PROCEDURE change_status(m_y IN OUT pls_integer, m_m IN OUT pls_integer, special_value pls_integer);
    FUNCTION year(m_y pls_integer, m_m pls_integer) return pls_integer;
    FUNCTION month(m_y pls_integer, m_m pls_integer) return pls_integer;
    FUNCTION get_granularity(m_y pls_integer, m_m pls_integer) return pls_integer;
    FUNCTION get_Abs_Date(m_y pls_integer, m_m pls_integer) return double precision;
    PROCEDURE set_year(m_y IN OUT pls_integer, m_m IN OUT pls_integer, year pls_integer);
    PROCEDURE set_month(m_y IN OUT pls_integer, m_m IN OUT pls_integer, month pls_integer);
    PROCEDURE set_Abs_Date(m_y IN OUT pls_integer, m_m IN OUT pls_integer, d double precision);
    PROCEDURE to_period(m_y pls_integer, m_m pls_integer, b_y OUT pls_integer, b_m OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer);
    FUNCTION to_temporal_element(m_y pls_integer, m_m pls_integer) return Varchar2;
    FUNCTION to_string(m_y pls_integer, m_m pls_integer) return Varchar2;
    FUNCTION is_Leap_Year(m_y pls_integer, m_m pls_integer) return pls_integer;
    FUNCTION is_Leap_Year(m_y pls_integer, m_m pls_integer, year pls_integer) return pls_integer;
    FUNCTION days_in_month(m_y pls_integer, m_m pls_integer) return pls_integer;
    PROCEDURE f_ass_timestamp(m_y IN OUT pls_integer, m_m IN OUT pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer);
    PROCEDURE f_ass_timepoint(m_y IN OUT pls_integer, m_m IN OUT pls_integer, tp_m_y pls_integer, tp_m_m pls_integer);
    PROCEDURE f_add_interval(m_y IN OUT pls_integer, m_m IN OUT pls_integer, i_m_Value double precision);
    PROCEDURE f_sub_interval(m_y IN OUT pls_integer, m_m IN OUT pls_integer, i_m_Value double precision);
    PROCEDURE f_incr(m_y IN OUT pls_integer, m_m IN OUT pls_integer);
    PROCEDURE f_decr(m_y IN OUT pls_integer, m_m IN OUT pls_integer);
    PROCEDURE f_add(m_y pls_integer, m_m pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, i_m_Value double precision, y OUT pls_integer, m OUT pls_integer);
    PROCEDURE f_sub(m_y pls_integer, m_m pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, i_m_Value double precision, y OUT pls_integer, m OUT pls_integer);
    PROCEDURE intersects(m_y pls_integer, m_m pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, b_y OUT pls_integer, b_m OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer);
    PROCEDURE intersects(m_y pls_integer, m_m pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, b_y OUT pls_integer, b_m OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer);
    FUNCTION intersects(m_y pls_integer, m_m pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, te_string Varchar2) return Varchar2;
    FUNCTION f_eq(m_y pls_integer, m_m pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer) return pls_integer;
    FUNCTION f_n_eq(m_y pls_integer, m_m pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer) return pls_integer;
    FUNCTION f_l(m_y pls_integer, m_m pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer) return pls_integer;
    FUNCTION f_l_e(m_y pls_integer, m_m pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer) return pls_integer;
    FUNCTION f_b(m_y pls_integer, m_m pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer) return pls_integer;
    FUNCTION f_b_e(m_y pls_integer, m_m pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer) return pls_integer;
    PROCEDURE f_diff(m_y pls_integer, m_m pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, i_Value OUT double precision);
    FUNCTION f_eq(m_y pls_integer, m_m pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer;
    FUNCTION f_n_eq(m_y pls_integer, m_m pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer;
    FUNCTION f_l(m_y pls_integer, m_m pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer;
    FUNCTION f_l_e(m_y pls_integer, m_m pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer;
    FUNCTION f_b(m_y pls_integer, m_m pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer;
    FUNCTION f_b_e(m_y pls_integer, m_m pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer;
    FUNCTION f_overlaps(m_y pls_integer, m_m pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer) return pls_integer;
    FUNCTION f_precedes(m_y pls_integer, m_m pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer) return pls_integer;
    FUNCTION f_meets(m_y pls_integer, m_m pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer) return pls_integer;
    FUNCTION f_equal(m_y pls_integer, m_m pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer) return pls_integer;
    FUNCTION f_contains(m_y pls_integer, m_m pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer) return pls_integer;
    FUNCTION f_overlaps(m_y pls_integer, m_m pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer) return pls_integer;
    FUNCTION f_precedes(m_y pls_integer, m_m pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer) return pls_integer;
    FUNCTION f_meets(m_y pls_integer, m_m pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer) return pls_integer;
    FUNCTION f_equal(m_y pls_integer, m_m pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer) return pls_integer;
    FUNCTION f_contains(m_y pls_integer, m_m pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer) return pls_integer;
    FUNCTION f_overlaps(m_y pls_integer, m_m pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, te_string Varchar2) return pls_integer;
    FUNCTION f_precedes(m_y pls_integer, m_m pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, te_string Varchar2) return pls_integer;
    FUNCTION f_meets(m_y pls_integer, m_m pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, te_string Varchar2) return pls_integer;
    FUNCTION f_equal(m_y pls_integer, m_m pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, te_string Varchar2) return pls_integer;
    FUNCTION f_contains(m_y pls_integer, m_m pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, te_string Varchar2) return pls_integer;
    FUNCTION f_overlaps(m_y pls_integer, m_m pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp3_m_y pls_integer, tp3_m_m pls_integer, tp4_m_y pls_integer, tp4_m_m pls_integer) return pls_integer;

END;
/

-- End of DDL script for D_TIMEPOINT_M_PACKAGE

-- Start of DDL script for D_TIMEPOINT_SEC_PACKAGE
-- Generated 5-Nov-00  3:43:02 pm
-- from -PELETLL:1

-- Drop the old instance of D_TIMEPOINT_SEC_PACKAGE

DROP PACKAGE d_timepoint_sec_package
/

-- Package D_TIMEPOINT_SEC_PACKAGE

CREATE OR REPLACE
PACKAGE D_Timepoint_Sec_Package AS

    PROCEDURE change_status(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, m_min IN OUT pls_integer, m_sec IN OUT double precision, special_value pls_integer, special_hours pls_integer, year pls_integer);
    FUNCTION year(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision) return pls_integer;
    FUNCTION month(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision) return pls_integer;
    FUNCTION day(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision) return pls_integer;
    FUNCTION hour(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision) return pls_integer;
    FUNCTION minute(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision) return pls_integer;
    FUNCTION second(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision) return double precision;
    FUNCTION get_granularity(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision) return pls_integer;
    FUNCTION get_Abs_Date(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision) return double precision;
    PROCEDURE set_year(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, m_min IN OUT pls_integer, m_sec IN OUT double precision, year pls_integer);
    PROCEDURE set_month(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, m_min IN OUT pls_integer, m_sec IN OUT double precision, month pls_integer);
    PROCEDURE set_day(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, m_min IN OUT pls_integer, m_sec IN OUT double precision, day pls_integer);
    PROCEDURE set_hour(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, m_min IN OUT pls_integer, m_sec IN OUT double precision, hour pls_integer);
    PROCEDURE set_minute(m_y IN OUT  pls_integer, m_m IN OUT  pls_integer, m_d IN OUT  pls_integer, m_h IN OUT  pls_integer, m_min IN OUT  pls_integer, m_sec IN OUT double precision, minute pls_integer);
    PROCEDURE set_second(m_y IN OUT  pls_integer, m_m IN OUT  pls_integer, m_d IN OUT  pls_integer, m_h IN OUT  pls_integer, m_min IN OUT  pls_integer, m_sec IN OUT double precision, second double precision);
    PROCEDURE set_Abs_Date(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, m_min IN OUT pls_integer, m_sec IN OUT double precision, d double precision);
    PROCEDURE to_period(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, b_h OUT pls_integer, b_min OUT pls_integer, b_sec OUT double precision, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer, e_h OUT pls_integer, e_min OUT pls_integer, e_sec OUT double precision);
    FUNCTION to_temporal_element(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision) return Varchar2;
    FUNCTION to_string(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision) return Varchar2;
    FUNCTION is_Leap_Year(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision) return pls_integer;
    FUNCTION is_Leap_Year(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, year pls_integer) return pls_integer;
    FUNCTION days_in_month(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision) return pls_integer;
    PROCEDURE f_ass_timestamp(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, m_min IN OUT pls_integer, m_sec IN OUT double precision, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer);
    PROCEDURE f_ass_timepoint(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, m_min IN OUT pls_integer, m_sec IN OUT double precision, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision);
    PROCEDURE f_add_interval(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, m_min IN OUT pls_integer, m_sec IN OUT double precision, i_m_Value double precision);
    PROCEDURE f_sub_interval(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, m_min IN OUT pls_integer, m_sec IN OUT double precision, i_m_Value double precision);
    PROCEDURE f_incr(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, m_min IN OUT pls_integer, m_sec IN OUT double precision);
    PROCEDURE f_decr(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, m_min IN OUT pls_integer, m_sec IN OUT double precision);
    PROCEDURE f_add(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision, i_m_Value double precision, y OUT pls_integer, m OUT pls_integer, d OUT pls_integer, h OUT pls_integer, minute OUT pls_integer, second OUT double precision);
    PROCEDURE f_sub(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision, i_m_Value double precision, y OUT pls_integer, m OUT pls_integer, d OUT pls_integer, h OUT pls_integer, minute OUT pls_integer, second OUT double precision);
    PROCEDURE intersects(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp1_m_min pls_integer, tp1_m_sec double precision, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer, tp2_m_min pls_integer, tp2_m_sec double precision, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, b_h OUT pls_integer, b_min OUT pls_integer, b_sec OUT double precision, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer, e_h OUT pls_integer, e_min OUT pls_integer, e_sec OUT double precision);
    PROCEDURE intersects(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_b_m_sec double precision, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer, p_e_m_sec double precision, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, b_h OUT pls_integer, b_min OUT pls_integer, b_sec OUT double precision, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer, e_h OUT pls_integer, e_min OUT pls_integer, e_sec OUT double precision);
    FUNCTION intersects(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision, te_string Varchar2) return Varchar2;
    FUNCTION f_eq(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp1_m_min pls_integer, tp1_m_sec double precision, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer, tp2_m_min pls_integer, tp2_m_sec double precision) return pls_integer;
    FUNCTION f_n_eq(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp1_m_min pls_integer, tp1_m_sec double precision, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer, tp2_m_min pls_integer, tp2_m_sec double precision) return pls_integer;
    FUNCTION f_l(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp1_m_min pls_integer, tp1_m_sec double precision, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer, tp2_m_min pls_integer, tp2_m_sec double precision) return pls_integer;
    FUNCTION f_l_e(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp1_m_min pls_integer, tp1_m_sec double precision, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer, tp2_m_min pls_integer, tp2_m_sec double precision) return pls_integer;
    FUNCTION f_b(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp1_m_min pls_integer, tp1_m_sec double precision, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer, tp2_m_min pls_integer, tp2_m_sec double precision) return pls_integer;
    FUNCTION f_b_e(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp1_m_min pls_integer, tp1_m_sec double precision, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer, tp2_m_min pls_integer, tp2_m_sec double precision) return pls_integer;
    PROCEDURE f_diff(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp1_m_min pls_integer, tp1_m_sec double precision, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer, tp2_m_min pls_integer, tp2_m_sec double precision, i_Value OUT double precision);
    FUNCTION f_eq(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer;
    FUNCTION f_n_eq(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer;
    FUNCTION f_l(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer;
    FUNCTION f_l_e(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer;
    FUNCTION f_b(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer;
    FUNCTION f_b_e(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer;
    FUNCTION f_overlaps(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp1_m_min pls_integer, tp1_m_sec double precision, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer, tp2_m_min pls_integer, tp2_m_sec double precision) return pls_integer;
    FUNCTION f_precedes(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp1_m_min pls_integer, tp1_m_sec double precision, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer, tp2_m_min pls_integer, tp2_m_sec double precision) return pls_integer;
    FUNCTION f_meets(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp1_m_min pls_integer, tp1_m_sec double precision, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer, tp2_m_min pls_integer, tp2_m_sec double precision) return pls_integer;
    FUNCTION f_equal(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp1_m_min pls_integer, tp1_m_sec double precision, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer, tp2_m_min pls_integer, tp2_m_sec double precision) return pls_integer;
    FUNCTION f_contains(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp1_m_min pls_integer, tp1_m_sec double precision, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer, tp2_m_min pls_integer, tp2_m_sec double precision) return pls_integer;
    FUNCTION f_overlaps(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_b_m_sec double precision, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer, p_e_m_sec double precision) return pls_integer;
    FUNCTION f_precedes(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_b_m_sec double precision, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer, p_e_m_sec double precision) return pls_integer;
    FUNCTION f_meets(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_b_m_sec double precision, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer, p_e_m_sec double precision) return pls_integer;
    FUNCTION f_equal(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_b_m_sec double precision, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer, p_e_m_sec double precision) return pls_integer;
    FUNCTION f_contains(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_b_m_sec double precision, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer, p_e_m_sec double precision) return pls_integer;
    FUNCTION f_overlaps(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision, te_string varchar2) return pls_integer;
    FUNCTION f_precedes(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision, te_string varchar2) return pls_integer;
    FUNCTION f_meets(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision, te_string varchar2) return pls_integer;
    FUNCTION f_equal(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision, te_string varchar2) return pls_integer;
    FUNCTION f_contains(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision, te_string varchar2) return pls_integer;
    FUNCTION f_overlaps(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp1_m_min pls_integer, tp1_m_sec double precision, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer, tp2_m_min pls_integer, tp2_m_sec double precision, tp3_m_y pls_integer, tp3_m_m pls_integer, tp3_m_d pls_integer, tp3_m_h pls_integer, tp3_m_min pls_integer, tp3_m_sec double precision, tp4_m_y pls_integer, tp4_m_m pls_integer, tp4_m_d pls_integer, tp4_m_h pls_integer, tp4_m_min pls_integer, tp4_m_sec double precision) return pls_integer;

END;
/

-- End of DDL script for D_TIMEPOINT_SEC_PACKAGE

-- Start of DDL script for D_TIMEPOINT_Y_PACKAGE
-- Generated 5-Nov-00  3:43:03 pm
-- from -PELETLL:1

-- Drop the old instance of D_TIMEPOINT_Y_PACKAGE

DROP PACKAGE d_timepoint_y_package
/

-- Package D_TIMEPOINT_Y_PACKAGE

CREATE OR REPLACE
PACKAGE D_Timepoint_Y_Package AS

    PROCEDURE change_status(m_y IN OUT pls_integer, special_value pls_integer);
    FUNCTION year(m_y pls_integer) return pls_integer;
    FUNCTION get_granularity(m_y pls_integer) return pls_integer;
    FUNCTION get_Abs_Date(m_y pls_integer) return double precision;
    PROCEDURE set_year(m_y IN OUT pls_integer, year pls_integer);
    PROCEDURE set_Abs_Date(m_y IN OUT pls_integer, d double precision);
    PROCEDURE to_period(m_y pls_integer, b_y OUT pls_integer, e_y OUT pls_integer);
    FUNCTION to_temporal_element(m_y pls_integer) return Varchar2;
    FUNCTION to_string(m_y pls_integer) return Varchar2;
    FUNCTION is_Leap_Year(m_y pls_integer) return pls_integer;
    FUNCTION is_Leap_Year(m_y pls_integer, year pls_integer) return pls_integer;
    PROCEDURE f_ass_timestamp(m_y IN OUT pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer);
    PROCEDURE f_ass_timepoint(m_y IN OUT pls_integer, tp_m_y pls_integer);
    PROCEDURE f_add_interval(m_y IN OUT pls_integer, i_m_Value double precision);
    PROCEDURE f_sub_interval(m_y IN OUT pls_integer, i_m_Value double precision);
    PROCEDURE f_incr(m_y IN OUT pls_integer);
    PROCEDURE f_decr(m_y IN OUT pls_integer);
    PROCEDURE f_add(m_y pls_integer, tp_m_y pls_integer, i_m_Value double precision, y OUT pls_integer);
    PROCEDURE f_sub(m_y pls_integer, tp_m_y pls_integer, i_m_Value double precision, y OUT pls_integer);
    PROCEDURE intersects(m_y pls_integer, tp1_m_y pls_integer, tp2_m_y pls_integer, b_y OUT pls_integer, e_y OUT pls_integer);
    PROCEDURE intersects(m_y pls_integer, tp_m_y pls_integer, p_b_m_y pls_integer, p_e_m_y pls_integer, b_y OUT pls_integer, e_y OUT pls_integer);
    FUNCTION intersects(m_y pls_integer, tp_m_y pls_integer, te_string Varchar2) return Varchar2;
    FUNCTION f_eq(m_y pls_integer, tp1_m_y pls_integer, tp2_m_y pls_integer) return pls_integer;
    FUNCTION f_n_eq(m_y pls_integer, tp1_m_y pls_integer, tp2_m_y pls_integer) return pls_integer;
    FUNCTION f_l(m_y pls_integer, tp1_m_y pls_integer, tp2_m_y pls_integer) return pls_integer;
    FUNCTION f_l_e(m_y pls_integer, tp1_m_y pls_integer, tp2_m_y pls_integer) return pls_integer;
    FUNCTION f_b(m_y pls_integer, tp1_m_y pls_integer, tp2_m_y pls_integer) return pls_integer;
    FUNCTION f_b_e(m_y pls_integer, tp1_m_y pls_integer, tp2_m_y pls_integer) return pls_integer;
    PROCEDURE f_diff(m_y pls_integer, tp1_m_y pls_integer, tp2_m_y pls_integer, i_Value OUT double precision);
    FUNCTION f_eq(m_y pls_integer, tp_m_y pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer;
    FUNCTION f_n_eq(m_y pls_integer, tp_m_y pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer;
    FUNCTION f_l(m_y pls_integer, tp_m_y pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer;
    FUNCTION f_l_e(m_y pls_integer, tp_m_y pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer;
    FUNCTION f_b(m_y pls_integer, tp_m_y pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer;
    FUNCTION f_b_e(m_y pls_integer, tp_m_y pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer;
    FUNCTION f_overlaps(m_y pls_integer, tp1_m_y pls_integer, tp2_m_y pls_integer) return pls_integer;
    FUNCTION f_precedes(m_y pls_integer, tp1_m_y pls_integer, tp2_m_y pls_integer) return pls_integer;
    FUNCTION f_meets(m_y pls_integer, tp1_m_y pls_integer, tp2_m_y pls_integer) return pls_integer;
    FUNCTION f_equal(m_y pls_integer, tp1_m_y pls_integer, tp2_m_y pls_integer) return pls_integer;
    FUNCTION f_contains(m_y pls_integer, tp1_m_y pls_integer, tp2_m_y pls_integer) return pls_integer;
    FUNCTION f_overlaps(m_y pls_integer, tp_m_y pls_integer, p_b_m_y pls_integer, p_e_m_y pls_integer) return pls_integer;
    FUNCTION f_precedes(m_y pls_integer, tp_m_y pls_integer, p_b_m_y pls_integer, p_e_m_y pls_integer) return pls_integer;
    FUNCTION f_meets(m_y pls_integer, tp_m_y pls_integer, p_b_m_y pls_integer, p_e_m_y pls_integer) return pls_integer;
    FUNCTION f_equal(m_y pls_integer, tp_m_y pls_integer, p_b_m_y pls_integer, p_e_m_y pls_integer) return pls_integer;
    FUNCTION f_contains(m_y pls_integer, tp_m_y pls_integer, p_b_m_y pls_integer, p_e_m_y pls_integer) return pls_integer;
    FUNCTION f_overlaps(m_y pls_integer, tp_m_y pls_integer, te_string Varchar2) return pls_integer;
    FUNCTION f_precedes(m_y pls_integer, tp_m_y pls_integer, te_string Varchar2) return pls_integer;
    FUNCTION f_meets(m_y pls_integer, tp_m_y pls_integer, te_string Varchar2) return pls_integer;
    FUNCTION f_equal(m_y pls_integer, tp_m_y pls_integer, te_string Varchar2) return pls_integer;
    FUNCTION f_contains(m_y pls_integer, tp_m_y pls_integer, te_string Varchar2) return pls_integer;
    FUNCTION f_overlaps(m_y pls_integer, tp1_m_y pls_integer, tp2_m_y pls_integer, tp3_m_y pls_integer, tp4_m_y pls_integer) return pls_integer;

END;
/

-- End of DDL script for D_TIMEPOINT_Y_PACKAGE

-- Start of DDL script for D_TIMESTAMP_PACKAGE
-- Generated 5-Nov-00  3:43:03 pm
-- from -PELETLL:1

-- Drop the old instance of D_TIMESTAMP_PACKAGE

DROP PACKAGE d_timestamp_package
/

-- Package D_TIMESTAMP_PACKAGE

CREATE OR REPLACE
PACKAGE D_Timestamp_Package AS

    PROCEDURE f_date(m_Date_year pls_integer, m_Date_month pls_integer, m_Date_day pls_integer, m_Time_hour pls_integer, m_Time_minute pls_integer, m_Time_second pls_integer, m_Time_hundr_thSec pls_integer, m_Time_tz_hour pls_integer, m_Time_tz_minute pls_integer, Y OUT pls_integer, M OUT pls_integer, D OUT pls_integer);
    PROCEDURE f_time(m_Date_year pls_integer, m_Date_month pls_integer, m_Date_day pls_integer, m_Time_hour pls_integer, m_Time_minute pls_integer, m_Time_second pls_integer, m_Time_hundr_thSec pls_integer, m_Time_tz_hour pls_integer, m_Time_tz_minute pls_integer, H OUT pls_integer, M OUT pls_integer, S OUT pls_integer, hundr_thS OUT pls_integer, tz_H OUT pls_integer, tz_M OUT pls_integer);
    FUNCTION year(m_Date_year pls_integer, m_Date_month pls_integer, m_Date_day pls_integer, m_Time_hour pls_integer, m_Time_minute pls_integer, m_Time_second pls_integer, m_Time_hundr_thSec pls_integer, m_Time_tz_hour pls_integer, m_Time_tz_minute pls_integer) return pls_integer;
    FUNCTION month(m_Date_year pls_integer, m_Date_month pls_integer, m_Date_day pls_integer, m_Time_hour pls_integer, m_Time_minute pls_integer, m_Time_second pls_integer, m_Time_hundr_thSec pls_integer, m_Time_tz_hour pls_integer, m_Time_tz_minute pls_integer) return pls_integer;
    FUNCTION day(m_Date_year pls_integer, m_Date_month pls_integer, m_Date_day pls_integer, m_Time_hour pls_integer, m_Time_minute pls_integer, m_Time_second pls_integer, m_Time_hundr_thSec pls_integer, m_Time_tz_hour pls_integer, m_Time_tz_minute pls_integer) return pls_integer;
    FUNCTION hour(m_Date_year pls_integer, m_Date_month pls_integer, m_Date_day pls_integer, m_Time_hour pls_integer, m_Time_minute pls_integer, m_Time_second pls_integer, m_Time_hundr_thSec pls_integer, m_Time_tz_hour pls_integer, m_Time_tz_minute pls_integer) return pls_integer;
    FUNCTION minute(m_Date_year pls_integer, m_Date_month pls_integer, m_Date_day pls_integer, m_Time_hour pls_integer, m_Time_minute pls_integer, m_Time_second pls_integer, m_Time_hundr_thSec pls_integer, m_Time_tz_hour pls_integer, m_Time_tz_minute pls_integer) return pls_integer;
    FUNCTION second(m_Date_year pls_integer, m_Date_month pls_integer, m_Date_day pls_integer, m_Time_hour pls_integer, m_Time_minute pls_integer, m_Time_second pls_integer, m_Time_hundr_thSec pls_integer, m_Time_tz_hour pls_integer, m_Time_tz_minute pls_integer) return float;
    FUNCTION tz_hour(m_Date_year pls_integer, m_Date_month pls_integer, m_Date_day pls_integer, m_Time_hour pls_integer, m_Time_minute pls_integer, m_Time_second pls_integer, m_Time_hundr_thSec pls_integer, m_Time_tz_hour pls_integer, m_Time_tz_minute pls_integer) return pls_integer;
    FUNCTION tz_minute(m_Date_year pls_integer, m_Date_month pls_integer, m_Date_day pls_integer, m_Time_hour pls_integer, m_Time_minute pls_integer, m_Time_second pls_integer, m_Time_hundr_thSec pls_integer, m_Time_tz_hour pls_integer, m_Time_tz_minute pls_integer) return pls_integer;
    PROCEDURE f_current(m_Date_year pls_integer, m_Date_month pls_integer, m_Date_day pls_integer, m_Time_hour pls_integer, m_Time_minute pls_integer, m_Time_second pls_integer, m_Time_hundr_thSec pls_integer, m_Time_tz_hour pls_integer, m_Time_tz_minute pls_integer, Year OUT pls_integer, Month OUT pls_integer, Day OUT pls_integer, H OUT pls_integer, M OUT pls_integer, S OUT pls_integer, hundr_thS OUT pls_integer, tz_H OUT pls_integer, tz_M OUT pls_integer);
    PROCEDURE f_ass_timestamp(m_Date_m_Year IN OUT pls_integer, m_Date_m_Month IN OUT pls_integer, m_Date_m_Day IN OUT pls_integer, m_Time_m_Hour IN OUT pls_integer, m_Time_m_Minute IN OUT pls_integer, m_Time_m_Second IN OUT pls_integer, m_Time_m_100thSec IN OUT pls_integer, m_Time_m_tzHour IN OUT pls_integer, m_Time_m_tzMinute IN OUT pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer);
    PROCEDURE f_ass_date(m_Date_m_Year IN OUT pls_integer, m_Date_m_Month IN OUT pls_integer, m_Date_m_Day IN OUT pls_integer, m_Time_m_Hour pls_integer, m_Time_m_Minute pls_integer, m_Time_m_Second pls_integer, m_Time_m_100thSec pls_integer, m_Time_m_tzHour pls_integer, m_Time_m_tzMinute pls_integer, d_m_Year pls_integer, d_m_Month pls_integer, d_m_Day pls_integer);
    PROCEDURE f_add_interval(m_Date_m_Year IN OUT pls_integer, m_Date_m_Month IN OUT pls_integer, m_Date_m_Day IN OUT pls_integer, m_Time_m_Hour IN OUT pls_integer, m_Time_m_Minute IN OUT pls_integer, m_Time_m_Second IN OUT pls_integer, m_Time_m_100thSec IN OUT pls_integer, m_Time_m_tzHour IN OUT pls_integer, m_Time_m_tzMinute IN OUT pls_integer, i_m_Value double precision);
    PROCEDURE f_sub_interval(m_Date_m_Year IN OUT pls_integer, m_Date_m_Month IN OUT pls_integer, m_Date_m_Day IN OUT pls_integer, m_Time_m_Hour IN OUT pls_integer, m_Time_m_Minute IN OUT pls_integer, m_Time_m_Second IN OUT pls_integer, m_Time_m_100thSec IN OUT pls_integer, m_Time_m_tzHour IN OUT pls_integer, m_Time_m_tzMinute IN OUT pls_integer, i_m_Value double precision);
    PROCEDURE f_add(m_Date_year pls_integer, m_Date_month pls_integer, m_Date_day pls_integer, m_Time_hour pls_integer, m_Time_minute pls_integer, m_Time_second pls_integer, m_Time_hundr_thSec pls_integer, m_Time_tz_hour pls_integer, m_Time_tz_minute pls_integer, ts_year pls_integer, ts_month pls_integer, ts_day pls_integer, ts_hour pls_integer, ts_minute pls_integer, ts_second pls_integer, ts_hundr_thSec pls_integer, ts_tz_hour pls_integer, ts_tz_minute pls_integer, i_m_Value double precision, Year OUT pls_integer, Month OUT pls_integer, Day OUT pls_integer, H OUT pls_integer, M OUT pls_integer, S OUT pls_integer, hundr_thS OUT pls_integer, tz_H OUT pls_integer, tz_M OUT pls_integer);
    PROCEDURE f_sub(m_Date_year pls_integer, m_Date_month pls_integer, m_Date_day pls_integer, m_Time_hour pls_integer, m_Time_minute pls_integer, m_Time_second pls_integer, m_Time_hundr_thSec pls_integer, m_Time_tz_hour pls_integer, m_Time_tz_minute pls_integer, ts_year pls_integer, ts_month pls_integer, ts_day pls_integer, ts_hour pls_integer, ts_minute pls_integer, ts_second pls_integer, ts_hundr_thSec pls_integer, ts_tz_hour pls_integer, ts_tz_minute pls_integer, i_m_Value double precision, Year OUT pls_integer, Month OUT pls_integer, Day OUT pls_integer, H OUT pls_integer, M OUT pls_integer, S OUT pls_integer, hundr_thS OUT pls_integer, tz_H OUT pls_integer, tz_M OUT pls_integer);
    FUNCTION f_eq(m_Date_year pls_integer, m_Date_month pls_integer, m_Date_day pls_integer, m_Time_hour pls_integer, m_Time_minute pls_integer, m_Time_second pls_integer, m_Time_hundr_thSec pls_integer, m_Time_tz_hour pls_integer, m_Time_tz_minute pls_integer, ts1_m_Date_year pls_integer, ts1_m_Date_month pls_integer, ts1_m_Date_day pls_integer, ts1_m_Time_hour pls_integer, ts1_m_Time_minute pls_integer, ts1_m_Time_second pls_integer, ts1_m_Time_hundr_thSec pls_integer, ts1_m_Time_tz_hour pls_integer, ts1_m_Time_tz_minute pls_integer, ts2_m_Date_year pls_integer, ts2_m_Date_month pls_integer, ts2_m_Date_day pls_integer, ts2_m_Time_hour pls_integer, ts2_m_Time_minute pls_integer, ts2_m_Time_second pls_integer, ts2_m_Time_hundr_thSec pls_integer, ts2_m_Time_tz_hour pls_integer, ts2_m_Time_tz_minute pls_integer) return pls_integer;
    FUNCTION f_n_eq(m_Date_year pls_integer, m_Date_month pls_integer, m_Date_day pls_integer, m_Time_hour pls_integer, m_Time_minute pls_integer, m_Time_second pls_integer, m_Time_hundr_thSec pls_integer, m_Time_tz_hour pls_integer, m_Time_tz_minute pls_integer, ts1_m_Date_year pls_integer, ts1_m_Date_month pls_integer, ts1_m_Date_day pls_integer, ts1_m_Time_hour pls_integer, ts1_m_Time_minute pls_integer, ts1_m_Time_second pls_integer, ts1_m_Time_hundr_thSec pls_integer, ts1_m_Time_tz_hour pls_integer, ts1_m_Time_tz_minute pls_integer, ts2_m_Date_year pls_integer, ts2_m_Date_month pls_integer, ts2_m_Date_day pls_integer, ts2_m_Time_hour pls_integer, ts2_m_Time_minute pls_integer, ts2_m_Time_second pls_integer, ts2_m_Time_hundr_thSec pls_integer, ts2_m_Time_tz_hour pls_integer, ts2_m_Time_tz_minute pls_integer) return pls_integer;
    FUNCTION f_l(m_Date_year pls_integer, m_Date_month pls_integer, m_Date_day pls_integer, m_Time_hour pls_integer, m_Time_minute pls_integer, m_Time_second pls_integer, m_Time_hundr_thSec pls_integer, m_Time_tz_hour pls_integer, m_Time_tz_minute pls_integer, ts1_m_Date_year pls_integer, ts1_m_Date_month pls_integer, ts1_m_Date_day pls_integer, ts1_m_Time_hour pls_integer, ts1_m_Time_minute pls_integer, ts1_m_Time_second pls_integer, ts1_m_Time_hundr_thSec pls_integer, ts1_m_Time_tz_hour pls_integer, ts1_m_Time_tz_minute pls_integer, ts2_m_Date_year pls_integer, ts2_m_Date_month pls_integer, ts2_m_Date_day pls_integer, ts2_m_Time_hour pls_integer, ts2_m_Time_minute pls_integer, ts2_m_Time_second pls_integer, ts2_m_Time_hundr_thSec pls_integer, ts2_m_Time_tz_hour pls_integer, ts2_m_Time_tz_minute pls_integer) return pls_integer;
    FUNCTION f_l_e(m_Date_year pls_integer, m_Date_month pls_integer, m_Date_day pls_integer, m_Time_hour pls_integer, m_Time_minute pls_integer, m_Time_second pls_integer, m_Time_hundr_thSec pls_integer, m_Time_tz_hour pls_integer, m_Time_tz_minute pls_integer, ts1_m_Date_year pls_integer, ts1_m_Date_month pls_integer, ts1_m_Date_day pls_integer, ts1_m_Time_hour pls_integer, ts1_m_Time_minute pls_integer, ts1_m_Time_second pls_integer, ts1_m_Time_hundr_thSec pls_integer, ts1_m_Time_tz_hour pls_integer, ts1_m_Time_tz_minute pls_integer, ts2_m_Date_year pls_integer, ts2_m_Date_month pls_integer, ts2_m_Date_day pls_integer, ts2_m_Time_hour pls_integer, ts2_m_Time_minute pls_integer, ts2_m_Time_second pls_integer, ts2_m_Time_hundr_thSec pls_integer, ts2_m_Time_tz_hour pls_integer, ts2_m_Time_tz_minute pls_integer) return pls_integer;
    FUNCTION f_b(m_Date_year pls_integer, m_Date_month pls_integer, m_Date_day pls_integer, m_Time_hour pls_integer, m_Time_minute pls_integer, m_Time_second pls_integer, m_Time_hundr_thSec pls_integer, m_Time_tz_hour pls_integer, m_Time_tz_minute pls_integer, ts1_m_Date_year pls_integer, ts1_m_Date_month pls_integer, ts1_m_Date_day pls_integer, ts1_m_Time_hour pls_integer, ts1_m_Time_minute pls_integer, ts1_m_Time_second pls_integer, ts1_m_Time_hundr_thSec pls_integer, ts1_m_Time_tz_hour pls_integer, ts1_m_Time_tz_minute pls_integer, ts2_m_Date_year pls_integer, ts2_m_Date_month pls_integer, ts2_m_Date_day pls_integer, ts2_m_Time_hour pls_integer, ts2_m_Time_minute pls_integer, ts2_m_Time_second pls_integer, ts2_m_Time_hundr_thSec pls_integer, ts2_m_Time_tz_hour pls_integer, ts2_m_Time_tz_minute pls_integer) return pls_integer;
    FUNCTION f_b_e(m_Date_year pls_integer, m_Date_month pls_integer, m_Date_day pls_integer, m_Time_hour pls_integer, m_Time_minute pls_integer, m_Time_second pls_integer, m_Time_hundr_thSec pls_integer, m_Time_tz_hour pls_integer, m_Time_tz_minute pls_integer, ts1_m_Date_year pls_integer, ts1_m_Date_month pls_integer, ts1_m_Date_day pls_integer, ts1_m_Time_hour pls_integer, ts1_m_Time_minute pls_integer, ts1_m_Time_second pls_integer, ts1_m_Time_hundr_thSec pls_integer, ts1_m_Time_tz_hour pls_integer, ts1_m_Time_tz_minute pls_integer, ts2_m_Date_year pls_integer, ts2_m_Date_month pls_integer, ts2_m_Date_day pls_integer, ts2_m_Time_hour pls_integer, ts2_m_Time_minute pls_integer, ts2_m_Time_second pls_integer, ts2_m_Time_hundr_thSec pls_integer, ts2_m_Time_tz_hour pls_integer, ts2_m_Time_tz_minute pls_integer) return pls_integer;
    FUNCTION f_overlaps(m_Date_year pls_integer, m_Date_month pls_integer, m_Date_day pls_integer, m_Time_hour pls_integer, m_Time_minute pls_integer, m_Time_second pls_integer, m_Time_hundr_thSec pls_integer, m_Time_tz_hour pls_integer, m_Time_tz_minute pls_integer, ts1_m_Date_year pls_integer, ts1_m_Date_month pls_integer, ts1_m_Date_day pls_integer, ts1_m_Time_hour pls_integer, ts1_m_Time_minute pls_integer, ts1_m_Time_second pls_integer, ts1_m_Time_hundr_thSec pls_integer, ts1_m_Time_tz_hour pls_integer, ts1_m_Time_tz_minute pls_integer, ts2_m_Date_year pls_integer, ts2_m_Date_month pls_integer, ts2_m_Date_day pls_integer, ts2_m_Time_hour pls_integer, ts2_m_Time_minute pls_integer, ts2_m_Time_second pls_integer, ts2_m_Time_hundr_thSec pls_integer, ts2_m_Time_tz_hour pls_integer, ts2_m_Time_tz_minute pls_integer, ts3_m_Date_year pls_integer, ts3_m_Date_month pls_integer, ts3_m_Date_day pls_integer, ts3_m_Time_hour pls_integer, ts3_m_Time_minute pls_integer, ts3_m_Time_second pls_integer, ts3_m_Time_hundr_thSec pls_integer, ts3_m_Time_tz_hour pls_integer, ts3_m_Time_tz_minute pls_integer, ts4_m_Date_year pls_integer, ts4_m_Date_month pls_integer, ts4_m_Date_day pls_integer, ts4_m_Time_hour pls_integer, ts4_m_Time_minute pls_integer, ts4_m_Time_second pls_integer, ts4_m_Time_hundr_thSec pls_integer, ts4_m_Time_tz_hour pls_integer, ts4_m_Time_tz_minute pls_integer) return pls_integer;

END;
/

-- End of DDL script for D_TIMESTAMP_PACKAGE

-- Start of DDL script for D_TIME_PACKAGE
-- Generated 5-Nov-00  3:43:04 pm
-- from -PELETLL:1

-- Drop the old instance of D_TIME_PACKAGE

DROP PACKAGE d_time_package
/

-- Package D_TIME_PACKAGE

CREATE OR REPLACE
PACKAGE D_Time_Package AS
    FUNCTION hour(m_Hour pls_integer, m_Minute pls_integer, m_Second pls_integer, m_100thSec pls_integer, m_tzHour pls_integer, m_tzMinute pls_integer) return pls_integer;
    FUNCTION minute(m_Hour pls_integer, m_Minute pls_integer, m_Second pls_integer, m_100thSec pls_integer, m_tzHour pls_integer, m_tzMinute pls_integer) return pls_integer;
    FUNCTION second(m_Hour pls_integer, m_Minute pls_integer, m_Second pls_integer, m_100thSec pls_integer, m_tzHour pls_integer, m_tzMinute pls_integer) return float;
    FUNCTION tz_hour(m_Hour pls_integer, m_Minute pls_integer, m_Second pls_integer, m_100thSec pls_integer, m_tzHour pls_integer, m_tzMinute pls_integer) return pls_integer;
    FUNCTION tz_minute(m_Hour pls_integer, m_Minute pls_integer, m_Second pls_integer, m_100thSec pls_integer, m_tzHour pls_integer, m_tzMinute pls_integer) return pls_integer;
    PROCEDURE f_current(m_Hour pls_integer, m_Minute pls_integer, m_Second pls_integer, m_100thSec pls_integer, m_tzHour pls_integer, m_tzMinute pls_integer, H OUT pls_integer, M OUT pls_integer, S OUT pls_integer, hundr_thS OUT pls_integer, tz_H OUT pls_integer, tz_M OUT pls_integer);
    FUNCTION is_valid_time(m_Hour pls_integer, m_Minute pls_integer, m_Second pls_integer, m_100thSec pls_integer, m_tzHour pls_integer, m_tzMinute pls_integer, h pls_integer, m pls_integer, s double precision) return pls_integer;
    FUNCTION is_valid(m_Hour pls_integer, m_Minute pls_integer, m_Second pls_integer, m_100thSec pls_integer, m_tzHour pls_integer, m_tzMinute pls_integer) return pls_integer;
    PROCEDURE f_ass_time(m_Hour IN OUT pls_integer, m_Minute IN OUT pls_integer, m_Second IN OUT pls_integer, m_100thSec IN OUT pls_integer, m_tzHour IN OUT pls_integer, m_tzMinute IN OUT pls_integer, t_m_Hour pls_integer, t_m_Minute pls_integer, t_m_Second pls_integer, t_m_100thSec pls_integer, t_m_tzHour pls_integer, t_m_tzMinute pls_integer);
    PROCEDURE f_ass_timestamp(m_Hour IN OUT pls_integer, m_Minute IN OUT pls_integer, m_Second IN OUT pls_integer, m_100thSec IN OUT pls_integer, m_tzHour IN OUT pls_integer, m_tzMinute IN OUT pls_integer, ts_m_Hour pls_integer, ts_m_Minute pls_integer, ts_m_Second pls_integer, ts_m_100thSec pls_integer, ts_m_tzHour pls_integer, ts_m_tzMinute pls_integer);
    PROCEDURE f_add_interval(m_Hour IN OUT pls_integer, m_Minute IN OUT pls_integer, m_Second IN OUT pls_integer, m_100thSec IN OUT pls_integer, m_tzHour IN OUT pls_integer, m_tzMinute IN OUT pls_integer, i_m_Value double precision);
    PROCEDURE f_sub_interval(m_Hour IN OUT pls_integer, m_Minute IN OUT pls_integer, m_Second IN OUT pls_integer, m_100thSec IN OUT pls_integer, m_tzHour IN OUT pls_integer, m_tzMinute IN OUT pls_integer,  i_m_Value double precision);
    PROCEDURE f_add(m_Hour pls_integer, m_Minute pls_integer, m_Second pls_integer, m_100thSec pls_integer, m_tzHour pls_integer, m_tzMinute pls_integer, t_m_Hour pls_integer, t_m_Minute pls_integer, t_m_Second pls_integer, t_m_100thSec pls_integer, t_m_tzHour pls_integer, t_m_tzMinute pls_integer, i_m_Value double precision, H OUT pls_integer, M OUT pls_integer, S OUT pls_integer, hundr_thS OUT pls_integer, tz_H OUT pls_integer, tz_M OUT pls_integer);
    PROCEDURE f_sub_time_from_time(m_Hour pls_integer, m_Minute pls_integer, m_Second pls_integer, m_100thSec pls_integer, m_tzHour pls_integer, m_tzMinute pls_integer, t1_m_Hour pls_integer, t1_m_Minute pls_integer, t1_m_Second pls_integer, t1_m_100thSec pls_integer, t1_m_tzHour pls_integer, t1_m_tzMinute pls_integer, t2_m_Hour pls_integer, t2_m_Minute pls_integer, t2_m_Second pls_integer, t2_m_100thSec pls_integer, t2_m_tzHour pls_integer, t2_m_tzMinute pls_integer, i_Value OUT double precision);
    PROCEDURE f_sub_interval_from_time(m_Hour pls_integer, m_Minute pls_integer, m_Second pls_integer, m_100thSec pls_integer, m_tzHour pls_integer, m_tzMinute pls_integer, t_m_Hour pls_integer, t_m_Minute pls_integer, t_m_Second pls_integer, t_m_100thSec pls_integer, t_m_tzHour pls_integer, t_m_tzMinute pls_integer, i_m_Value double precision, H OUT pls_integer, M OUT pls_integer, S OUT pls_integer, hundr_thS OUT pls_integer, tz_H OUT pls_integer, tz_M OUT pls_integer);
    FUNCTION f_eq(m_Hour pls_integer, m_Minute pls_integer, m_Second pls_integer, m_100thSec pls_integer, m_tzHour pls_integer, m_tzMinute pls_integer, i_m_Hour pls_integer, i_m_Minute pls_integer, i_m_Second pls_integer, i_m_100thSec pls_integer, i_m_tzHour pls_integer, i_m_tzMinute pls_integer, j_m_Hour pls_integer, j_m_Minute pls_integer, j_m_Second pls_integer, j_m_100thSec pls_integer, j_m_tzHour pls_integer, j_m_tzMinute pls_integer) return pls_integer;
    FUNCTION f_n_eq(m_Hour pls_integer, m_Minute pls_integer, m_Second pls_integer, m_100thSec pls_integer, m_tzHour pls_integer, m_tzMinute pls_integer, i_m_Hour pls_integer, i_m_Minute pls_integer, i_m_Second pls_integer, i_m_100thSec pls_integer, i_m_tzHour pls_integer, i_m_tzMinute pls_integer, j_m_Hour pls_integer, j_m_Minute pls_integer, j_m_Second pls_integer, j_m_100thSec pls_integer, j_m_tzHour pls_integer, j_m_tzMinute pls_integer) return pls_integer;
    FUNCTION f_l(m_Hour pls_integer, m_Minute pls_integer, m_Second pls_integer, m_100thSec pls_integer, m_tzHour pls_integer, m_tzMinute pls_integer, i_m_Hour pls_integer, i_m_Minute pls_integer, i_m_Second pls_integer, i_m_100thSec pls_integer, i_m_tzHour pls_integer, i_m_tzMinute pls_integer, j_m_Hour pls_integer, j_m_Minute pls_integer, j_m_Second pls_integer, j_m_100thSec pls_integer, j_m_tzHour pls_integer, j_m_tzMinute pls_integer) return pls_integer;
    FUNCTION f_l_e(m_Hour pls_integer, m_Minute pls_integer, m_Second pls_integer, m_100thSec pls_integer, m_tzHour pls_integer, m_tzMinute pls_integer, i_m_Hour pls_integer, i_m_Minute pls_integer, i_m_Second pls_integer, i_m_100thSec pls_integer, i_m_tzHour pls_integer, i_m_tzMinute pls_integer, j_m_Hour pls_integer, j_m_Minute pls_integer, j_m_Second pls_integer, j_m_100thSec pls_integer, j_m_tzHour pls_integer, j_m_tzMinute pls_integer) return pls_integer;
    FUNCTION f_b(m_Hour pls_integer, m_Minute pls_integer, m_Second pls_integer, m_100thSec pls_integer, m_tzHour pls_integer, m_tzMinute pls_integer, i_m_Hour pls_integer, i_m_Minute pls_integer, i_m_Second pls_integer, i_m_100thSec pls_integer, i_m_tzHour pls_integer, i_m_tzMinute pls_integer, j_m_Hour pls_integer, j_m_Minute pls_integer, j_m_Second pls_integer, j_m_100thSec pls_integer, j_m_tzHour pls_integer, j_m_tzMinute pls_integer) return pls_integer;
    FUNCTION f_b_e(m_Hour pls_integer, m_Minute pls_integer, m_Second pls_integer, m_100thSec pls_integer, m_tzHour pls_integer, m_tzMinute pls_integer, i_m_Hour pls_integer, i_m_Minute pls_integer, i_m_Second pls_integer, i_m_100thSec pls_integer, i_m_tzHour pls_integer, i_m_tzMinute pls_integer, j_m_Hour pls_integer, j_m_Minute pls_integer, j_m_Second pls_integer, j_m_100thSec pls_integer, j_m_tzHour pls_integer, j_m_tzMinute pls_integer) return pls_integer;
    FUNCTION f_overlaps(m_Hour pls_integer, m_Minute pls_integer, m_Second pls_integer, m_100thSec pls_integer, m_tzHour pls_integer, m_tzMinute pls_integer, t1_m_Hour pls_integer, t1_m_Minute pls_integer, t1_m_Second pls_integer, t1_m_100thSec pls_integer, t1_m_tzHour pls_integer, t1_m_tzMinute pls_integer, t2_m_Hour pls_integer, t2_m_Minute pls_integer, t2_m_Second pls_integer, t2_m_100thSec pls_integer, t2_m_tzHour pls_integer, t2_m_tzMinute pls_integer, t3_m_Hour pls_integer, t3_m_Minute pls_integer, t3_m_Second pls_integer, t3_m_100thSec pls_integer, t3_m_tzHour pls_integer, t3_m_tzMinute pls_integer, t4_m_Hour pls_integer, t4_m_Minute pls_integer, t4_m_Second pls_integer, t4_m_100thSec pls_integer, t4_m_tzHour pls_integer, t4_m_tzMinute pls_integer) return pls_integer;
    FUNCTION f_timestamp_overlaps(m_Hour pls_integer, m_Minute pls_integer, m_Second pls_integer, m_100thSec pls_integer, m_tzHour pls_integer, m_tzMinute pls_integer, ts1_m_Hour pls_integer, ts1_m_Minute pls_integer, ts1_m_Second pls_integer, ts1_m_100thSec pls_integer, ts1_m_tzHour pls_integer, ts1_m_tzMinute pls_integer, ts2_m_Hour pls_integer, ts2_m_Minute pls_integer, ts2_m_Second pls_integer, ts2_m_100thSec pls_integer, ts2_m_tzHour pls_integer, ts2_m_tzMinute pls_integer, t1_m_Hour pls_integer, t1_m_Minute pls_integer, t1_m_Second pls_integer, t1_m_100thSec pls_integer, t1_m_tzHour pls_integer, t1_m_tzMinute pls_integer, t2_m_Hour pls_integer, t2_m_Minute pls_integer, t2_m_Second pls_integer, t2_m_100thSec pls_integer, t2_m_tzHour pls_integer, t2_m_tzMinute pls_integer) return pls_integer;
    FUNCTION f_time_overlaps(m_Hour pls_integer, m_Minute pls_integer, m_Second pls_integer, m_100thSec pls_integer, m_tzHour pls_integer, m_tzMinute pls_integer, t1_m_Hour pls_integer, t1_m_Minute pls_integer, t1_m_Second pls_integer, t1_m_100thSec pls_integer, t1_m_tzHour pls_integer, t1_m_tzMinute pls_integer, t2_m_Hour pls_integer, t2_m_Minute pls_integer, t2_m_Second pls_integer, t2_m_100thSec pls_integer, t2_m_tzHour pls_integer, t2_m_tzMinute pls_integer, ts1_m_Hour pls_integer, ts1_m_Minute pls_integer, ts1_m_Second pls_integer, ts1_m_100thSec pls_integer, ts1_m_tzHour pls_integer, ts1_m_tzMinute pls_integer, ts2_m_Hour pls_integer, ts2_m_Minute pls_integer, ts2_m_Second pls_integer, ts2_m_100thSec pls_integer, ts2_m_tzHour pls_integer, ts2_m_tzMinute pls_integer) return pls_integer;

END;
/

-- End of DDL script for D_TIME_PACKAGE

-- Start of DDL script for D_DATE_PACKAGE
-- Generated 5-Nov-00  3:43:16 pm
-- from -PELETLL:1

-- Drop the old instance of D_DATE_PACKAGE

DROP PACKAGE BODY d_date_package
/

-- Package body D_DATE_PACKAGE

CREATE OR REPLACE
PACKAGE BODY D_Date_Package AS

    FUNCTION year(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Date_C_year"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION month(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Date_C_month"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION day(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Date_C_day"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION day_of_year(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Date_C_day_of_year"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION day_of_week(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Date_C_day_of_week"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION month_of_year(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Date_C_month_of_year"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_current(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer, Y OUT pls_integer, M OUT pls_integer, D OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Date_C_current"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_next(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer, week_day pls_integer, Y OUT pls_integer, M OUT pls_integer, D OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Date_C_next"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_previous(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer, week_day pls_integer, Y OUT pls_integer, M OUT pls_integer, D OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Date_C_previous"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION is_between(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer, b_Year pls_integer, b_Month pls_integer, b_Day pls_integer, e_Year pls_integer, e_Month pls_integer, e_Day pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Date_C_is_between"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION is_leap_year(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Date_C_is_leap_year"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION is_leap_year(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer, y pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Date_C_is_leap_year2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION days_in_year(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Date_C_days_in_year"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION days_in_year(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer, y pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Date_C_days_in_year2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION days_in_month(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Date_C_days_in_month"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION days_in_month(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer, y pls_integer, m pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Date_C_days_in_month2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION is_valid_date(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer, y pls_integer, m pls_integer, d pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Date_C_is_valid_date"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION is_valid(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Date_C_is_valid"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION day_of_the_year(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer, y pls_integer, m pls_integer, d pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Date_C_day_of_the_year"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION julian_day(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer, y pls_integer, m pls_integer, d pls_integer) return double precision
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Date_C_julian_day"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE julian_to_gregorian(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer, JD double precision, Y OUT pls_integer, M OUT pls_integer, D OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Date_C_julian_to_gregorian"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION getAbsDate(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer) return double precision
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Date_C_getAbsDate"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE setAbsDate(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer, num_of_days double precision, Y OUT pls_integer, M OUT pls_integer, D OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Date_C_setAbsDate"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE Easter(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer, year pls_integer, Y OUT pls_integer, M OUT pls_integer, D OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Date_C_Easter"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_ass_date(m_Year IN OUT pls_integer, m_Month  IN OUT pls_integer, m_Day IN OUT pls_integer, d_Year pls_integer, d_Month pls_integer, d_Day pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Date_C_ass_date"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_ass_timestamp(m_Year IN OUT pls_integer, m_Month IN OUT pls_integer, m_Day IN OUT pls_integer, t_Year pls_integer, t_Month pls_integer, t_Day pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Date_C_ass_timestamp"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_add_interval(m_Year IN OUT pls_integer, m_Month IN OUT pls_integer, m_Day IN OUT pls_integer, i_Value double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Date_C_add_interval"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_add_days(m_Year IN OUT pls_integer, m_Month IN OUT pls_integer, m_Day IN OUT pls_integer, i pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Date_C_add_days"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_incr(m_Year IN OUT pls_integer, m_Month IN OUT pls_integer, m_Day IN OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Date_C_incr"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_sub_interval(m_Year IN OUT pls_integer, m_Month IN OUT pls_integer, m_Day IN OUT pls_integer, i_Value double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Date_C_sub_interval"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_sub_days(m_Year IN OUT pls_integer, m_Month IN OUT pls_integer, m_Day IN OUT pls_integer, i pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Date_C_sub_days"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_decr(m_Year IN OUT pls_integer, m_Month IN OUT pls_integer, m_Day IN OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Date_C_decr"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_add(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer, d_Year pls_integer, d_Month pls_integer, d_Day pls_integer, i_Value double precision, Y OUT pls_integer, M OUT pls_integer, D OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Date_C_add"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_sub(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer, d1_Year pls_integer, d1_Month pls_integer, d1_Day pls_integer, d2_Year pls_integer, d2_Month pls_integer, d2_Day pls_integer) return double precision
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Date_C_sub"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_sub(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer, d_Year pls_integer, d_Month pls_integer, d_Day pls_integer, i_Value double precision, Y OUT pls_integer, M OUT pls_integer, D OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Date_C_sub2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_eq(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer, i_Year pls_integer, i_Month pls_integer, i_Day pls_integer, j_Year pls_integer, j_Month pls_integer, j_Day pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Date_C_eq"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_n_eq(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer, i_Year pls_integer, i_Month pls_integer, i_Day pls_integer, j_Year pls_integer, j_Month pls_integer, j_Day pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Date_C_n_eq"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_l(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer, i_Year pls_integer, i_Month pls_integer, i_Day pls_integer, j_Year pls_integer, j_Month pls_integer, j_Day pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Date_C_l"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_l_e(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer, i_Year pls_integer, i_Month pls_integer, i_Day pls_integer, j_Year pls_integer, j_Month pls_integer, j_Day pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Date_C_l_e"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_b(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer, i_Year pls_integer, i_Month pls_integer, i_Day pls_integer, j_Year pls_integer, j_Month pls_integer, j_Day pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Date_C_b"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_b_e(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer, i_Year pls_integer, i_Month pls_integer, i_Day pls_integer, j_Year pls_integer, j_Month pls_integer, j_Day pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Date_C_b_e"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_overlaps(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer, d1_Year pls_integer, d1_Month pls_integer, d1_Day pls_integer, d2_Year pls_integer, d2_Month pls_integer, d2_Day pls_integer,  d3_Year pls_integer, d3_Month pls_integer, d3_Day pls_integer, d4_Year pls_integer, d4_Month pls_integer, d4_Day pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Date_C_overlaps"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_timestamp_overlaps(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer, t1_Year pls_integer, t1_Month pls_integer, t1_Day pls_integer, t2_Year pls_integer, t2_Month pls_integer, t2_Day pls_integer, d1_Year pls_integer, d1_Month pls_integer, d1_Day pls_integer, d2_Year pls_integer, d2_Month pls_integer, d2_Day pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Date_C_timestamp_overlaps"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_date_overlaps(m_Year pls_integer, m_Month pls_integer, m_Day pls_integer, d1_Year pls_integer, d1_Month pls_integer, d1_Day pls_integer, d2_Year pls_integer, d2_Month pls_integer, d2_Day pls_integer, t1_Year pls_integer, t1_Month pls_integer, t1_Day pls_integer, t2_Year pls_integer, t2_Month pls_integer, t2_Day pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Date_C_date_overlaps"
        LIBRARY TLL_lib
        WITH CONTEXT;


END;
/

-- End of DDL script for D_DATE_PACKAGE

-- Start of DDL script for D_INTERVAL_PACKAGE
-- Generated 5-Nov-00  3:43:17 pm
-- from -PELETLL:1

-- Drop the old instance of D_INTERVAL_PACKAGE

DROP PACKAGE BODY d_interval_package
/

-- Package body D_INTERVAL_PACKAGE

CREATE OR REPLACE
PACKAGE BODY D_Interval_Package AS
    FUNCTION day(m_Value double precision) return double precision
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Interval_C_day"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION hour(m_Value double precision) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Interval_C_hour"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION minute(m_Value double precision) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Interval_C_minute"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION second(m_Value double precision) return double precision
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Interval_C_second"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION is_zero(m_Value double precision) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Interval_C_is_zero"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION to_string(m_Value double precision) return varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Interval_C_to_string"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_ass(m_Value double precision, i_Value double precision) return double precision
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Interval_C_ass"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_add_to_self(m_Value double precision, i_Value double precision) return double precision
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Interval_C_add_to_self"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_sub_to_self(m_Value double precision, i_Value double precision) return double precision
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Interval_C_sub_to_self"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_mul_to_self(m_Value double precision, i pls_integer) return double precision
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Interval_C_mul_to_self"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_div_to_self(m_Value double precision, i pls_integer) return double precision
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Interval_C_div_to_self"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_min(m_Value double precision) return double precision
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Interval_C_min"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_add(i_Value double precision, j_Value double precision) return double precision
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Interval_C_add"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_sub(i_Value double precision, j_Value double precision) return double precision
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Interval_C_sub"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_mul(i_Value double precision, j pls_integer) return double precision
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Interval_C_mul"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_div(i_Value double precision, j pls_integer) return double precision
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Interval_C_div"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_eq(i_Value double precision, j_Value double precision) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Interval_C_eq"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_n_eq(i_Value double precision, j_Value double precision) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Interval_C_n_eq"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_l(i_Value double precision, j_Value double precision) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Interval_C_l"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_l_e(i_Value double precision, j_Value double precision) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Interval_C_l_e"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_b(i_Value double precision, j_Value double precision) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Interval_C_b"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_b_e(i_Value double precision, j_Value double precision) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Interval_C_b_e"
        LIBRARY TLL_lib
        WITH CONTEXT;

END;
/

-- End of DDL script for D_INTERVAL_PACKAGE

-- Start of DDL script for D_PERIOD_D_PACKAGE
-- Generated 5-Nov-00  3:43:17 pm
-- from -PELETLL:1

-- Drop the old instance of D_PERIOD_D_PACKAGE

DROP PACKAGE BODY d_period_d_package
/

-- Package body D_PERIOD_D_PACKAGE

CREATE OR REPLACE
PACKAGE BODY D_Period_D_Package AS

    PROCEDURE change_status(b_m_y IN OUT pls_integer, b_m_m IN OUT pls_integer, b_m_d IN OUT pls_integer, e_m_y IN OUT pls_integer, e_m_m IN OUT pls_integer, e_m_d IN OUT pls_integer, special_value pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_D_C_change_status"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_begin(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_D_C_f_begin"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_end(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_D_C_f_end"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE set_begin(b_m_y IN OUT pls_integer, b_m_m IN OUT pls_integer, b_m_d IN OUT pls_integer, e_m_y IN OUT pls_integer, e_m_m IN OUT pls_integer, e_m_d IN OUT pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_D_C_set_begin"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE set_end(b_m_y IN OUT pls_integer, b_m_m IN OUT pls_integer, b_m_d IN OUT pls_integer, e_m_y IN OUT pls_integer, e_m_m IN OUT pls_integer, e_m_d IN OUT pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_D_C_set_end"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION get_granularity(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_D_C_get_granularity"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE duration(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, i_Value OUT double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_D_C_duration"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION to_string(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_D_C_to_string"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION to_temporal_element(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_D_C_to_temporal_elem"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_ass_period(b_m_y IN OUT pls_integer, b_m_m IN OUT pls_integer, b_m_d IN OUT pls_integer, e_m_y IN OUT pls_integer, e_m_m IN OUT pls_integer, e_m_d IN OUT pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_D_C_f_ass_period"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_add_interval(b_m_y IN OUT pls_integer, b_m_m IN OUT pls_integer, b_m_d IN OUT pls_integer, e_m_y IN OUT pls_integer, e_m_m IN OUT pls_integer, e_m_d IN OUT pls_integer, i_m_Value double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_D_C_f_add_interval"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_sub_interval(b_m_y IN OUT pls_integer, b_m_m IN OUT pls_integer, b_m_d IN OUT pls_integer, e_m_y IN OUT pls_integer, e_m_m IN OUT pls_integer, e_m_d IN OUT pls_integer, i_m_Value double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_D_C_f_sub_interval"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_add(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, i_m_Value double precision, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_D_C_f_add"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_sub(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, i_m_Value double precision, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_D_C_f_sub"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_add(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, p1_b_m_y pls_integer, p1b_m_m pls_integer, p1_b_m_d pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_D_C_f_add1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_sub(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, p1_b_m_y pls_integer, p1b_m_m pls_integer, p1_b_m_d pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_D_C_f_sub1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_add(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, p1_b_m_y pls_integer, p1b_m_m pls_integer, p1_b_m_d pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, te_string Varchar2) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_D_C_f_add2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_sub(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, p1_b_m_y pls_integer, p1b_m_m pls_integer, p1_b_m_d pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, te_string Varchar2) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_D_C_f_sub2"
        LIBRARY TLL_lib
        WITH CONTEXT;


    PROCEDURE intersects(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_D_C_intersects"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE intersects(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_D_C_intersects1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION intersects(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, p1_b_m_y pls_integer, p1b_m_m pls_integer, p1_b_m_d pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, te_string Varchar2) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_D_C_intersects2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_eq(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_D_C_f_eq"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_n_eq(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_D_C_f_n_eq"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_l(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_D_C_f_l"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_l_e(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_D_C_f_l_e"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_b(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_D_C_f_b"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_b_e(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_D_C_f_b_e"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_overlaps(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_D_C_overlaps"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_precedes(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_D_C_precedes"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_meets(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_D_C_meets"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_equal(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_D_C_equal"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_contains(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_D_C_contains"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_overlaps(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_D_C_overlaps1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_precedes(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_D_C_precedes1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_meets(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_D_C_meets1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_equal(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_D_C_equal1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_contains(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_D_C_contains1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_overlaps(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, p1_b_m_y pls_integer, p1b_m_m pls_integer, p1_b_m_d pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, te_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_D_C_overlaps2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_precedes(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, p1_b_m_y pls_integer, p1b_m_m pls_integer, p1_b_m_d pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, te_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_D_C_precedes2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_meets(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, p1_b_m_y pls_integer, p1b_m_m pls_integer, p1_b_m_d pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, te_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_D_C_meets2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_equal(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, p1_b_m_y pls_integer, p1b_m_m pls_integer, p1_b_m_d pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, te_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_D_C_equal2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_contains(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, p1_b_m_y pls_integer, p1b_m_m pls_integer, p1_b_m_d pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, te_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_D_C_contains2"
        LIBRARY TLL_lib
        WITH CONTEXT;


END;
/

-- End of DDL script for D_PERIOD_D_PACKAGE

-- Start of DDL script for D_PERIOD_H_PACKAGE
-- Generated 5-Nov-00  3:43:17 pm
-- from -PELETLL:1

-- Drop the old instance of D_PERIOD_H_PACKAGE

DROP PACKAGE BODY d_period_h_package
/

-- Package body D_PERIOD_H_PACKAGE

CREATE OR REPLACE
PACKAGE BODY D_Period_H_Package AS

    PROCEDURE change_status(b_m_y IN OUT pls_integer, b_m_m IN OUT pls_integer, b_m_d IN OUT pls_integer, b_m_h IN OUT pls_integer, e_m_y IN OUT pls_integer, e_m_m IN OUT pls_integer, e_m_d IN OUT pls_integer, e_m_h IN OUT pls_integer, special_value pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_H_C_change_status"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_begin(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, b_h OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_H_C_f_begin"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_end(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer, e_h OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_H_C_f_end"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE set_begin(b_m_y IN OUT pls_integer, b_m_m IN OUT pls_integer, b_m_d IN OUT pls_integer, b_m_h IN OUT pls_integer, e_m_y IN OUT pls_integer, e_m_m IN OUT pls_integer, e_m_d IN OUT pls_integer, e_m_h IN OUT pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_H_C_set_begin"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE set_end(b_m_y IN OUT pls_integer, b_m_m IN OUT pls_integer, b_m_d IN OUT pls_integer, b_m_h IN OUT pls_integer, e_m_y IN OUT pls_integer, e_m_m IN OUT pls_integer, e_m_d IN OUT pls_integer, e_m_h IN OUT pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_H_C_set_end"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION get_granularity(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_H_C_get_granularity"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE duration(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, i_Value OUT double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_H_C_duration"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION to_string(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_H_C_to_string"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION to_temporal_element(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_H_C_to_temporal_elem"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_ass_period(b_m_y IN OUT pls_integer, b_m_m IN OUT pls_integer, b_m_d IN OUT pls_integer, b_m_h IN OUT pls_integer, e_m_y IN OUT pls_integer, e_m_m IN OUT pls_integer, e_m_d IN OUT pls_integer, e_m_h IN OUT pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_H_C_f_ass_period"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_add_interval(b_m_y IN OUT pls_integer, b_m_m IN OUT pls_integer, b_m_d IN OUT pls_integer, b_m_h IN OUT pls_integer, e_m_y IN OUT pls_integer, e_m_m IN OUT pls_integer, e_m_d IN OUT pls_integer, e_m_h IN OUT pls_integer, i_m_Value double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_H_C_f_add_interval"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_sub_interval(b_m_y IN OUT pls_integer, b_m_m IN OUT pls_integer, b_m_d IN OUT pls_integer, b_m_h IN OUT pls_integer, e_m_y IN OUT pls_integer, e_m_m IN OUT pls_integer, e_m_d IN OUT pls_integer, e_m_h IN OUT pls_integer, i_m_Value double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_H_C_f_sub_interval"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_add(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, i_m_Value double precision, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, b_h OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer, e_h OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_H_C_f_add"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_sub(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, i_m_Value double precision, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, b_h OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer, e_h OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_H_C_f_sub"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_add(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_H_C_f_add1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_sub(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_H_C_f_sub1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_add(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, te_string Varchar2) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_H_C_f_add2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_sub(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, te_string Varchar2) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_H_C_f_sub2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE intersects(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, b_h OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer, e_h OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_H_C_intersects"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE intersects(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, b_h OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer, e_h OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_H_C_intersects1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION intersects(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, te_string Varchar2) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_H_C_intersects2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_eq(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_H_C_f_eq"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_n_eq(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_H_C_f_n_eq"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_l(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_H_C_f_l"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_l_e(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_H_C_f_l_e"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_b(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_H_C_f_b"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_b_e(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_H_C_f_b_e"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_overlaps(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_H_C_overlaps"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_precedes(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_H_C_precedes"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_meets(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_H_C_meets"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_equal(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_H_C_equal"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_contains(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_H_C_contains"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_overlaps(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_H_C_overlaps1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_precedes(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_H_C_precedes1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_meets(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_H_C_meets1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_equal(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_H_C_equal1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_contains(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_H_C_contains1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_overlaps(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, te_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_H_C_overlaps2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_precedes(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, te_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_H_C_precedes2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_meets(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, te_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_H_C_meets2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_equal(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, te_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_H_C_equal2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_contains(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, te_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_H_C_contains2"
        LIBRARY TLL_lib
        WITH CONTEXT;

END;
/

-- End of DDL script for D_PERIOD_H_PACKAGE

-- Start of DDL script for D_PERIOD_MIN_PACKAGE
-- Generated 5-Nov-00  3:43:18 pm
-- from -PELETLL:1

-- Drop the old instance of D_PERIOD_MIN_PACKAGE

DROP PACKAGE BODY d_period_min_package
/

-- Package body D_PERIOD_MIN_PACKAGE

CREATE OR REPLACE
PACKAGE BODY D_Period_Min_Package AS

    PROCEDURE change_status(b_m_y IN OUT pls_integer, b_m_m IN OUT pls_integer, b_m_d IN OUT pls_integer, b_m_h IN OUT pls_integer, b_m_min IN OUT pls_integer, e_m_y IN OUT pls_integer, e_m_m IN OUT pls_integer, e_m_d IN OUT pls_integer, e_m_h IN OUT pls_integer, e_m_min IN OUT pls_integer, special_value pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Min_C_change_status"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_begin(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, b_h OUT pls_integer, b_min OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Min_C_f_begin"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_end(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer, e_h OUT pls_integer, e_min OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Min_C_f_end"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE set_begin(b_m_y IN OUT pls_integer, b_m_m IN OUT pls_integer, b_m_d IN OUT pls_integer, b_m_h IN OUT pls_integer, b_m_min IN OUT pls_integer, e_m_y IN OUT pls_integer, e_m_m IN OUT pls_integer, e_m_d IN OUT pls_integer, e_m_h IN OUT pls_integer, e_m_min IN OUT pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Min_C_set_begin"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE set_end(b_m_y IN OUT pls_integer, b_m_m IN OUT pls_integer, b_m_d IN OUT pls_integer, b_m_h IN OUT pls_integer, b_m_min IN OUT pls_integer, e_m_y IN OUT pls_integer, e_m_m IN OUT pls_integer, e_m_d IN OUT pls_integer, e_m_h IN OUT pls_integer, e_m_min IN OUT pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Min_C_set_end"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION get_granularity(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Min_C_get_granularity"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE duration(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, i_Value OUT double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Min_C_duration"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION to_string(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Min_C_to_string"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION to_temporal_element(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Min_C_to_temp_elem"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_ass_period(b_m_y IN OUT pls_integer, b_m_m IN OUT pls_integer, b_m_d IN OUT pls_integer, b_m_h IN OUT pls_integer, b_m_min IN OUT pls_integer, e_m_y IN OUT pls_integer, e_m_m IN OUT pls_integer, e_m_d IN OUT pls_integer, e_m_h IN OUT pls_integer, e_m_min IN OUT pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Min_C_f_ass_period"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_add_interval(b_m_y IN OUT pls_integer, b_m_m IN OUT pls_integer, b_m_d IN OUT pls_integer, b_m_h IN OUT pls_integer, b_m_min IN OUT pls_integer, e_m_y IN OUT pls_integer, e_m_m IN OUT pls_integer, e_m_d IN OUT pls_integer, e_m_h IN OUT pls_integer, e_m_min IN OUT pls_integer, i_m_Value double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Min_C_f_add_interval"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_sub_interval(b_m_y IN OUT pls_integer, b_m_m IN OUT pls_integer, b_m_d IN OUT pls_integer, b_m_h IN OUT pls_integer, b_m_min IN OUT pls_integer, e_m_y IN OUT pls_integer, e_m_m IN OUT pls_integer, e_m_d IN OUT pls_integer, e_m_h IN OUT pls_integer, e_m_min IN OUT pls_integer, i_m_Value double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Min_C_f_sub_interval"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_add(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer, i_m_Value double precision, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, b_h OUT pls_integer, b_min OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer, e_h OUT pls_integer, e_min OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Min_C_f_add"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_sub(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer, i_m_Value double precision, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, b_h OUT pls_integer, b_min OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer, e_h OUT pls_integer, e_min OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Min_C_f_sub"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_add(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_b_m_min pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer, p2_e_m_min pls_integer) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Min_C_f_add1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_sub(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_b_m_min pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer, p2_e_m_min pls_integer) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Min_C_f_sub1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_add(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, te_string Varchar2) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Min_C_f_add2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_sub(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, te_string Varchar2) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Min_C_f_sub2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE intersects(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, b_h OUT pls_integer, b_min OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer, e_h OUT pls_integer, e_min OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Min_C_intersects"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE intersects(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_b_m_min pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer, p2_e_m_min pls_integer, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, b_h OUT pls_integer, b_min OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer, e_h OUT pls_integer, e_min OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Min_C_intersects1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION intersects(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, te_string Varchar2) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Min_C_intersects2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_eq(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_b_m_min pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer, p2_e_m_min pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Min_C_f_eq"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_n_eq(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_b_m_min pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer, p2_e_m_min pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Min_C_f_n_eq"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_l(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_b_m_min pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer, p2_e_m_min pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Min_C_f_l"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_l_e(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_b_m_min pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer, p2_e_m_min pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Min_C_f_l_e"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_b(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_b_m_min pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer, p2_e_m_min pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Min_C_f_b"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_b_e(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_b_m_min pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer, p2_e_m_min pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Min_C_f_b_e"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_overlaps(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Min_C_overlaps"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_precedes(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Min_C_precedes"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_meets(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Min_C_meets"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_equal(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Min_C_equal"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_contains(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Min_C_contains"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_overlaps(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_b_m_min pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer, p2_e_m_min pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Min_C_overlaps1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_precedes(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_b_m_min pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer, p2_e_m_min pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Min_C_precedes1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_meets(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_b_m_min pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer, p2_e_m_min pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Min_C_meets1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_equal(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_b_m_min pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer, p2_e_m_min pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Min_C_equal1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_contains(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_b_m_min pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer, p2_e_m_min pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Min_C_contains1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_overlaps(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, te_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Min_C_overlaps2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_precedes(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, te_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Min_C_precedes2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_meets(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, te_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Min_C_meets2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_equal(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, te_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Min_C_equal2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_contains(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, te_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Min_C_contains2"
        LIBRARY TLL_lib
        WITH CONTEXT;


END;
/

-- End of DDL script for D_PERIOD_MIN_PACKAGE

-- Start of DDL script for D_PERIOD_M_PACKAGE
-- Generated 5-Nov-00  3:43:18 pm
-- from -PELETLL:1

-- Drop the old instance of D_PERIOD_M_PACKAGE

DROP PACKAGE BODY d_period_m_package
/

-- Package body D_PERIOD_M_PACKAGE

CREATE OR REPLACE
PACKAGE BODY D_Period_M_Package AS

    PROCEDURE change_status(b_m_y IN OUT pls_integer, b_m_m IN OUT pls_integer, e_m_y IN OUT pls_integer, e_m_m IN OUT pls_integer, special_value pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_M_C_change_status"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_begin(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer, b_y OUT pls_integer, b_m OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_M_C_f_begin"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_end(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer, e_y OUT pls_integer, e_m OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_M_C_f_end"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE set_begin(b_m_y IN OUT pls_integer, b_m_m IN OUT pls_integer, e_m_y IN OUT pls_integer, e_m_m IN OUT pls_integer, tp_m_y pls_integer, tp_m_m pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_M_C_set_begin"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE set_end(b_m_y IN OUT pls_integer, b_m_m IN OUT pls_integer, e_m_y IN OUT pls_integer, e_m_m IN OUT pls_integer, tp_m_y pls_integer, tp_m_m pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_M_C_set_end"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION get_granularity(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_M_C_get_granularity"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE duration(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer, i_Value OUT double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_M_C_duration"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION to_string(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_M_C_to_string"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION to_temporal_element(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_M_C_to_temporal_elem"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_ass_period(b_m_y IN OUT pls_integer, b_m_m IN OUT pls_integer, e_m_y IN OUT pls_integer, e_m_m IN OUT pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_M_C_f_ass_period"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_add_interval(b_m_y IN OUT pls_integer, b_m_m IN OUT pls_integer, e_m_y IN OUT pls_integer, e_m_m IN OUT pls_integer, i_m_Value double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_M_C_f_add_interval"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_sub_interval(b_m_y IN OUT pls_integer, b_m_m IN OUT pls_integer, e_m_y IN OUT pls_integer, e_m_m IN OUT pls_integer, i_m_Value double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_M_C_f_sub_interval"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_add(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, i_m_Value double precision, b_y OUT pls_integer, b_m OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_M_C_f_add"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_sub(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, i_m_Value double precision, b_y OUT pls_integer, b_m OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_M_C_f_sub"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_add(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_M_C_f_add1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_sub(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_M_C_f_sub1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_add(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, te_string Varchar2) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_M_C_f_add2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_sub(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, te_string Varchar2) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_M_C_f_sub2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE intersects(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, b_y OUT pls_integer, b_m OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_M_C_intersects"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE intersects(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer, b_y OUT pls_integer, b_m OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_M_C_intersects1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION intersects(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, te_string Varchar2) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_M_C_intersects2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_eq(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_M_C_f_eq"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_n_eq(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_M_C_f_n_eq"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_l(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_M_C_f_l"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_l_e(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_M_C_f_l_e"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_b(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_M_C_f_b"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_b_e(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_M_C_f_b_e"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_overlaps(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, tp_m_y pls_integer, tp_m_m pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_M_C_overlaps"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_precedes(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, tp_m_y pls_integer, tp_m_m pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_M_C_precedes"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_meets(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, tp_m_y pls_integer, tp_m_m pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_M_C_meets"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_equal(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, tp_m_y pls_integer, tp_m_m pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_M_C_equal"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_contains(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, tp_m_y pls_integer, tp_m_m pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_M_C_contains"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_overlaps(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_M_C_overlaps1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_precedes(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_M_C_precedes1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_meets(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_M_C_meets1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_equal(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_M_C_equal1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_contains(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_e_m_y pls_integer, p2_e_m_m pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_M_C_contains1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_overlaps(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, te_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_M_C_overlaps2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_precedes(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, te_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_M_C_precedes2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_meets(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, te_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_M_C_meets2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_equal(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, te_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_M_C_equal2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_contains(b_m_y pls_integer, b_m_m pls_integer, e_m_y pls_integer, e_m_m pls_integer, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_e_m_y pls_integer, p1_e_m_m pls_integer, te_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_M_C_contains2"
        LIBRARY TLL_lib
        WITH CONTEXT;

END;
/

-- End of DDL script for D_PERIOD_M_PACKAGE

-- Start of DDL script for D_PERIOD_SEC_PACKAGE
-- Generated 5-Nov-00  3:43:18 pm
-- from -PELETLL:1

-- Drop the old instance of D_PERIOD_SEC_PACKAGE

DROP PACKAGE BODY d_period_sec_package
/

-- Package body D_PERIOD_SEC_PACKAGE

CREATE OR REPLACE
PACKAGE BODY D_Period_Sec_Package AS

    PROCEDURE change_status(b_m_y IN OUT pls_integer, b_m_m IN OUT pls_integer, b_m_d IN OUT pls_integer, b_m_h IN OUT pls_integer, b_m_min IN OUT pls_integer, b_m_sec IN OUT double precision, e_m_y IN OUT pls_integer, e_m_m IN OUT pls_integer, e_m_d IN OUT pls_integer, e_m_h IN OUT pls_integer, e_m_min IN OUT pls_integer, e_m_sec IN OUT double precision, special_value pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Sec_C_change_status"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_begin(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, b_h OUT pls_integer, b_min OUT pls_integer, b_sec OUT double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Sec_C_f_begin"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_end(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer, e_h OUT pls_integer, e_min OUT pls_integer, e_sec OUT double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Sec_C_f_end"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE set_begin(b_m_y IN OUT pls_integer, b_m_m IN OUT pls_integer, b_m_d IN OUT pls_integer, b_m_h IN OUT pls_integer, b_m_min IN OUT pls_integer, b_m_sec IN OUT double precision, e_m_y IN OUT pls_integer, e_m_m IN OUT pls_integer, e_m_d IN OUT pls_integer, e_m_h IN OUT pls_integer, e_m_min IN OUT pls_integer, e_m_sec IN OUT double precision, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Sec_C_set_begin"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE set_end(b_m_y IN OUT pls_integer, b_m_m IN OUT pls_integer, b_m_d IN OUT pls_integer, b_m_h IN OUT pls_integer, b_m_min IN OUT pls_integer, b_m_sec IN OUT double precision, e_m_y IN OUT pls_integer, e_m_m IN OUT pls_integer, e_m_d IN OUT pls_integer, e_m_h IN OUT pls_integer, e_m_min IN OUT pls_integer, e_m_sec IN OUT double precision, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Sec_C_set_end"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION get_granularity(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Sec_C_get_granularity"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE duration(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision, i_Value OUT double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Sec_C_duration"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION to_string(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Sec_C_to_string"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION to_temporal_element(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Sec_C_to_temp_elem"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_ass_period(b_m_y IN OUT pls_integer, b_m_m IN OUT pls_integer, b_m_d IN OUT pls_integer, b_m_h IN OUT pls_integer, b_m_min IN OUT pls_integer, b_m_sec IN OUT double precision, e_m_y IN OUT pls_integer, e_m_m IN OUT pls_integer, e_m_d IN OUT pls_integer, e_m_h IN OUT pls_integer, e_m_min IN OUT pls_integer, e_m_sec IN OUT double precision, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_b_m_sec double precision, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer, p_e_m_sec double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Sec_C_f_ass_period"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_add_interval(b_m_y IN OUT pls_integer, b_m_m IN OUT pls_integer, b_m_d IN OUT pls_integer, b_m_h IN OUT pls_integer, b_m_min IN OUT pls_integer, b_m_sec IN OUT double precision, e_m_y IN OUT pls_integer, e_m_m IN OUT pls_integer, e_m_d IN OUT pls_integer, e_m_h IN OUT pls_integer, e_m_min IN OUT pls_integer, e_m_sec IN OUT double precision, i_m_Value double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Sec_C_f_add_interval"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_sub_interval(b_m_y IN OUT pls_integer, b_m_m IN OUT pls_integer, b_m_d IN OUT pls_integer, b_m_h IN OUT pls_integer, b_m_min IN OUT pls_integer, b_m_sec IN OUT double precision, e_m_y IN OUT pls_integer, e_m_m IN OUT pls_integer, e_m_d IN OUT pls_integer, e_m_h IN OUT pls_integer, e_m_min IN OUT pls_integer, e_m_sec IN OUT double precision, i_m_Value double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Sec_C_f_sub_interval"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_add(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_b_m_sec double precision, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer, p_e_m_sec double precision, i_m_Value double precision, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, b_h OUT pls_integer, b_min OUT pls_integer, b_sec OUT double precision, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer, e_h OUT pls_integer, e_min OUT pls_integer, e_sec OUT double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Sec_C_f_add"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_sub(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_b_m_sec double precision, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer, p_e_m_sec double precision, i_m_Value double precision, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, b_h OUT pls_integer, b_min OUT pls_integer, b_sec OUT double precision, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer, e_h OUT pls_integer, e_min OUT pls_integer, e_sec OUT double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Sec_C_f_sub"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_add(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_b_m_sec double precision, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p1_e_m_sec double precision, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_b_m_min pls_integer, p2_b_m_sec double precision, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer, p2_e_m_min pls_integer, p2_e_m_sec double precision) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Sec_C_f_add1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_sub(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_b_m_sec double precision, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p1_e_m_sec double precision, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_b_m_min pls_integer, p2_b_m_sec double precision, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer, p2_e_m_min pls_integer, p2_e_m_sec double precision) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Sec_C_f_sub1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_add(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_b_m_sec double precision, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p1_e_m_sec double precision, te_string Varchar2) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Sec_C_f_add2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_sub(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_b_m_sec double precision, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p1_e_m_sec double precision, te_string Varchar2) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Sec_C_f_sub2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE intersects(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_b_m_sec double precision, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer, p_e_m_sec double precision, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, b_h OUT pls_integer, b_min OUT pls_integer, b_sec OUT double precision, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer, e_h OUT pls_integer, e_min OUT pls_integer, e_sec OUT double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Sec_C_intersects"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE intersects(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_b_m_sec double precision, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p1_e_m_sec double precision, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_b_m_min pls_integer, p2_b_m_sec double precision, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer, p2_e_m_min pls_integer, p2_e_m_sec double precision, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, b_h OUT pls_integer, b_min OUT pls_integer, b_sec OUT double precision, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer, e_h OUT pls_integer, e_min OUT pls_integer, e_sec OUT double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Sec_C_intersects1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION intersects(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_b_m_sec double precision, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p1_e_m_sec double precision, te_string Varchar2) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Sec_C_intersects2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_eq(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_b_m_sec double precision, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p1_e_m_sec double precision, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_b_m_min pls_integer, p2_b_m_sec double precision, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer, p2_e_m_min pls_integer, p2_e_m_sec double precision) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Sec_C_f_eq"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_n_eq(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_b_m_sec double precision, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p1_e_m_sec double precision, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_b_m_min pls_integer, p2_b_m_sec double precision, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer, p2_e_m_min pls_integer, p2_e_m_sec double precision) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Sec_C_f_n_eq"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_l(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_b_m_sec double precision, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p1_e_m_sec double precision, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_b_m_min pls_integer, p2_b_m_sec double precision, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer, p2_e_m_min pls_integer, p2_e_m_sec double precision) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Sec_C_f_l"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_l_e(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_b_m_sec double precision, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p1_e_m_sec double precision, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_b_m_min pls_integer, p2_b_m_sec double precision, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer, p2_e_m_min pls_integer, p2_e_m_sec double precision) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Sec_C_f_l_e"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_b(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_b_m_sec double precision, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p1_e_m_sec double precision, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_b_m_min pls_integer, p2_b_m_sec double precision, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer, p2_e_m_min pls_integer, p2_e_m_sec double precision) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Sec_C_f_b"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_b_e(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_b_m_sec double precision, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p1_e_m_sec double precision, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_b_m_min pls_integer, p2_b_m_sec double precision, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer, p2_e_m_min pls_integer, p2_e_m_sec double precision) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Sec_C_f_b_e"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_overlaps(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_b_m_sec double precision, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer, p_e_m_sec double precision, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Sec_C_overlaps"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_precedes(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_b_m_sec double precision, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer, p_e_m_sec double precision, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Sec_C_precedes"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_meets(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_b_m_sec double precision, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer, p_e_m_sec double precision, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Sec_C_meets"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_equal(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_b_m_sec double precision, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer, p_e_m_sec double precision, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Sec_C_equal"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_contains(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_b_m_sec double precision, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer, p_e_m_sec double precision, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Sec_C_contains"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_overlaps(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_b_m_sec double precision, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p1_e_m_sec double precision, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_b_m_min pls_integer, p2_b_m_sec double precision, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer, p2_e_m_min pls_integer, p2_e_m_sec double precision) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Sec_C_overlaps1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_precedes(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_b_m_sec double precision, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p1_e_m_sec double precision, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_b_m_min pls_integer, p2_b_m_sec double precision, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer, p2_e_m_min pls_integer, p2_e_m_sec double precision) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Sec_C_precedes1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_meets(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_b_m_sec double precision, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p1_e_m_sec double precision, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_b_m_min pls_integer, p2_b_m_sec double precision, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer, p2_e_m_min pls_integer, p2_e_m_sec double precision) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Sec_C_meets1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_equal(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_b_m_sec double precision, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p1_e_m_sec double precision, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_b_m_min pls_integer, p2_b_m_sec double precision, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer, p2_e_m_min pls_integer, p2_e_m_sec double precision) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Sec_C_equal1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_contains(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_b_m_sec double precision, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p1_e_m_sec double precision, p2_b_m_y pls_integer, p2_b_m_m pls_integer, p2_b_m_d pls_integer, p2_b_m_h pls_integer, p2_b_m_min pls_integer, p2_b_m_sec double precision, p2_e_m_y pls_integer, p2_e_m_m pls_integer, p2_e_m_d pls_integer, p2_e_m_h pls_integer, p2_e_m_min pls_integer, p2_e_m_sec double precision) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Sec_C_contains1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_overlaps(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_b_m_sec double precision, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p1_e_m_sec double precision, te_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Sec_C_overlaps2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_precedes(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_b_m_sec double precision, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p1_e_m_sec double precision, te_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Sec_C_precedes2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_meets(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_b_m_sec double precision, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p1_e_m_sec double precision, te_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Sec_C_meets2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_equal(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_b_m_sec double precision, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p1_e_m_sec double precision, te_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Sec_C_equal2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_contains(b_m_y pls_integer, b_m_m pls_integer, b_m_d pls_integer, b_m_h pls_integer, b_m_min pls_integer, b_m_sec double precision, e_m_y pls_integer, e_m_m pls_integer, e_m_d pls_integer, e_m_h pls_integer, e_m_min pls_integer, e_m_sec double precision, p1_b_m_y pls_integer, p1_b_m_m pls_integer, p1_b_m_d pls_integer, p1_b_m_h pls_integer, p1_b_m_min pls_integer, p1_b_m_sec double precision, p1_e_m_y pls_integer, p1_e_m_m pls_integer, p1_e_m_d pls_integer, p1_e_m_h pls_integer, p1_e_m_min pls_integer, p1_e_m_sec double precision, te_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Sec_C_contains2"
        LIBRARY TLL_lib
        WITH CONTEXT;


END;
/

-- End of DDL script for D_PERIOD_SEC_PACKAGE

-- Start of DDL script for D_PERIOD_Y_PACKAGE
-- Generated 5-Nov-00  3:43:19 pm
-- from -PELETLL:1

-- Drop the old instance of D_PERIOD_Y_PACKAGE

DROP PACKAGE BODY d_period_y_package
/

-- Package body D_PERIOD_Y_PACKAGE

CREATE OR REPLACE
PACKAGE BODY D_Period_Y_Package AS

    PROCEDURE change_status(b_m_y IN OUT pls_integer, e_m_y IN OUT pls_integer, special_value pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Y_C_change_status"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_begin(b_m_y pls_integer, e_m_y pls_integer, b_y OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Y_C_f_begin"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_end(b_m_y pls_integer, e_m_y pls_integer, e_y OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Y_C_f_end"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE set_begin(b_m_y IN OUT pls_integer, e_m_y IN OUT pls_integer, tp_m_y pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Y_C_set_begin"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE set_end(b_m_y IN OUT pls_integer, e_m_y IN OUT pls_integer, tp_m_y pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Y_C_set_end"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION get_granularity(b_m_y pls_integer, e_m_y pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Y_C_get_granularity"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE duration(b_m_y pls_integer, e_m_y pls_integer, i_Value OUT double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Y_C_duration"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION to_string(b_m_y pls_integer, e_m_y pls_integer) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Y_C_to_string"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION to_temporal_element(b_m_y pls_integer, e_m_y pls_integer) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Y_C_to_temporal_elem"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_ass_period(b_m_y IN OUT pls_integer, e_m_y IN OUT pls_integer, p_b_m_y pls_integer, p_e_m_y pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Y_C_f_ass_period"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_add_interval(b_m_y IN OUT pls_integer, e_m_y IN OUT pls_integer, i_m_Value double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Y_C_f_add_interval"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_sub_interval(b_m_y IN OUT pls_integer, e_m_y IN OUT pls_integer, i_m_Value double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Y_C_f_sub_interval"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_add(b_m_y pls_integer, e_m_y pls_integer, p_b_m_y pls_integer, p_e_m_y pls_integer, i_m_Value double precision, b_y OUT pls_integer, e_y OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Y_C_f_add"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_sub(b_m_y pls_integer, e_m_y pls_integer, p_b_m_y pls_integer, p_e_m_y pls_integer, i_m_Value double precision, b_y OUT pls_integer, e_y OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Y_C_f_sub"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_add(b_m_y pls_integer, e_m_y pls_integer, p1_b_m_y pls_integer, p1_e_m_y pls_integer, p2_b_m_y pls_integer, p2_e_m_y pls_integer) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Y_C_f_add1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_sub(b_m_y pls_integer, e_m_y pls_integer, p1_b_m_y pls_integer, p1_e_m_y pls_integer, p2_b_m_y pls_integer, p2_e_m_y pls_integer) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Y_C_f_sub1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_add(b_m_y pls_integer, e_m_y pls_integer, p1_b_m_y pls_integer, p1_e_m_y pls_integer, te_string Varchar2) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Y_C_f_add2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_sub(b_m_y pls_integer, e_m_y pls_integer, p1_b_m_y pls_integer, p1_e_m_y pls_integer, te_string Varchar2) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Y_C_f_sub2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE intersects(b_m_y pls_integer, e_m_y pls_integer, p_b_m_y pls_integer, p_e_m_y pls_integer, tp_m_y pls_integer, b_y OUT pls_integer, e_y OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Y_C_intersects"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE intersects(b_m_y pls_integer, e_m_y pls_integer, p1_b_m_y pls_integer, p1_e_m_y pls_integer, p2_b_m_y pls_integer, p2_e_m_y pls_integer, b_y OUT pls_integer, e_y OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Y_C_intersects1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION intersects(b_m_y pls_integer, e_m_y pls_integer, p1_b_m_y pls_integer, p1_e_m_y pls_integer, te_string Varchar2) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Y_C_intersects2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_eq(b_m_y pls_integer, e_m_y pls_integer, p1_b_m_y pls_integer, p1_e_m_y pls_integer, p2_b_m_y pls_integer, p2_e_m_y pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Y_C_f_eq"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_n_eq(b_m_y pls_integer, e_m_y pls_integer, p1_b_m_y pls_integer, p1_e_m_y pls_integer, p2_b_m_y pls_integer, p2_e_m_y pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Y_C_f_n_eq"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_l(b_m_y pls_integer, e_m_y pls_integer, p1_b_m_y pls_integer, p1_e_m_y pls_integer, p2_b_m_y pls_integer, p2_e_m_y pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Y_C_f_l"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_l_e(b_m_y pls_integer, e_m_y pls_integer, p1_b_m_y pls_integer, p1_e_m_y pls_integer, p2_b_m_y pls_integer, p2_e_m_y pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Y_C_f_l_e"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_b(b_m_y pls_integer, e_m_y pls_integer, p1_b_m_y pls_integer, p1_e_m_y pls_integer, p2_b_m_y pls_integer, p2_e_m_y pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Y_C_f_b"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_b_e(b_m_y pls_integer, e_m_y pls_integer, p1_b_m_y pls_integer, p1_e_m_y pls_integer, p2_b_m_y pls_integer, p2_e_m_y pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Y_C_f_b_e"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_overlaps(b_m_y pls_integer, e_m_y pls_integer, p_b_m_y pls_integer, p_e_m_y pls_integer, tp_m_y pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Y_C_overlaps"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_precedes(b_m_y pls_integer, e_m_y pls_integer, p_b_m_y pls_integer, p_e_m_y pls_integer, tp_m_y pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Y_C_precedes"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_meets(b_m_y pls_integer, e_m_y pls_integer, p_b_m_y pls_integer, p_e_m_y pls_integer, tp_m_y pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Y_C_meets"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_equal(b_m_y pls_integer, e_m_y pls_integer, p_b_m_y pls_integer, p_e_m_y pls_integer, tp_m_y pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Y_C_equal"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_contains(b_m_y pls_integer, e_m_y pls_integer, p_b_m_y pls_integer, p_e_m_y pls_integer, tp_m_y pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Y_C_contains"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_overlaps(b_m_y pls_integer, e_m_y pls_integer, p1_b_m_y pls_integer, p1_e_m_y pls_integer, p2_b_m_y pls_integer, p2_e_m_y pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Y_C_overlaps1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_precedes(b_m_y pls_integer, e_m_y pls_integer, p1_b_m_y pls_integer, p1_e_m_y pls_integer, p2_b_m_y pls_integer, p2_e_m_y pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Y_C_precedes1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_meets(b_m_y pls_integer, e_m_y pls_integer, p1_b_m_y pls_integer, p1_e_m_y pls_integer, p2_b_m_y pls_integer, p2_e_m_y pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Y_C_meets1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_equal(b_m_y pls_integer, e_m_y pls_integer, p1_b_m_y pls_integer, p1_e_m_y pls_integer, p2_b_m_y pls_integer, p2_e_m_y pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Y_C_equal1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_contains(b_m_y pls_integer, e_m_y pls_integer, p1_b_m_y pls_integer, p1_e_m_y pls_integer, p2_b_m_y pls_integer, p2_e_m_y pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Y_C_contains1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_overlaps(b_m_y pls_integer, e_m_y pls_integer, p1_b_m_y pls_integer, p1_e_m_y pls_integer, te_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Y_C_overlaps2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_precedes(b_m_y pls_integer, e_m_y pls_integer, p1_b_m_y pls_integer, p1_e_m_y pls_integer, te_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Y_C_precedes2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_meets(b_m_y pls_integer, e_m_y pls_integer, p1_b_m_y pls_integer, p1_e_m_y pls_integer, te_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Y_C_meets2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_equal(b_m_y pls_integer, e_m_y pls_integer, p1_b_m_y pls_integer, p1_e_m_y pls_integer, te_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Y_C_equal2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_contains(b_m_y pls_integer, e_m_y pls_integer, p1_b_m_y pls_integer, p1_e_m_y pls_integer, te_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Period_Y_C_contains2"
        LIBRARY TLL_lib
        WITH CONTEXT;


END;
/

-- End of DDL script for D_PERIOD_Y_PACKAGE

-- Start of DDL script for D_TE_D_PACKAGE
-- Generated 5-Nov-00  3:43:19 pm
-- from -PELETLL:1

-- Drop the old instance of D_TE_D_PACKAGE

DROP PACKAGE BODY d_te_d_package
/

-- Package body D_TE_D_PACKAGE

CREATE OR REPLACE
PACKAGE BODY D_TE_D_Package AS

    FUNCTION to_string(te_string Varchar2) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_D_C_to_string"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_begin(te_string Varchar2, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_D_C_f_begin"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_end(te_string Varchar2, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_D_C_f_end"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION get_granularity(te_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_D_C_get_granularity"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE duration(te_string Varchar2, i_Value OUT double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_D_C_duration"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION cardinality(te_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_D_C_cardinality"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE go(te_string Varchar2, num pls_integer, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_D_C_go"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_ass_temp_element(te_string Varchar2, te1_string Varchar2) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_D_C_f_ass_temp_element"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_add_temp_element(te_string Varchar2, te1_string Varchar2) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_D_C_f_add_temp_element"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_add_period(te_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_D_C_f_add_period"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_sub_temp_element(te_string Varchar2, te1_string Varchar2) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_D_C_f_sub_temp_element"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_sub_period(te_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_D_C_f_sub_period"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_add(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_D_C_f_add"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_add(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_D_C_f_add1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_sub(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_D_C_f_sub"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_sub(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_D_C_f_sub1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION intersects(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_D_C_intersects"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION intersects(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_D_C_intersects1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION intersects(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_D_C_intersects2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_eq(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_D_C_f_eq"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_n_eq(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_D_C_f_n_eq"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_overlaps(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_D_C_overlaps"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_precedes(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_D_C_precedes"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_meets(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_D_C_meets"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_equal(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_D_C_equal"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_contains(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_D_C_contains"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_overlaps(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_D_C_overlaps1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_precedes(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_D_C_precedes1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_meets(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_D_C_meets1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_equal(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_D_C_equal1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_contains(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_D_C_contains1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_overlaps(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_D_C_overlaps2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_precedes(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_D_C_precedes2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_meets(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_D_C_meets2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_equal(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_D_C_equal2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_contains(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_D_C_contains2"
        LIBRARY TLL_lib
        WITH CONTEXT;

END;
/

-- End of DDL script for D_TE_D_PACKAGE

-- Start of DDL script for D_TE_H_PACKAGE
-- Generated 5-Nov-00  3:43:19 pm
-- from -PELETLL:1

-- Drop the old instance of D_TE_H_PACKAGE

DROP PACKAGE BODY d_te_h_package
/

-- Package body D_TE_H_PACKAGE

CREATE OR REPLACE
PACKAGE BODY D_TE_H_Package AS

    FUNCTION to_string(te_string Varchar2) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_H_C_to_string"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_begin(te_string Varchar2, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, b_h OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer, e_h OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_H_C_f_begin"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_end(te_string Varchar2, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, b_h OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer, e_h OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_H_C_f_end"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION get_granularity(te_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_H_C_get_granularity"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE duration(te_string Varchar2, i_Value OUT double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_H_C_duration"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION cardinality(te_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_H_C_cardinality"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE go(te_string Varchar2, num pls_integer, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, b_h OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer, e_h OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_H_C_go"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_ass_temp_element(te_string Varchar2, te1_string Varchar2) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_H_C_f_ass_temp_element"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_add_temp_element(te_string Varchar2, te1_string Varchar2) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_H_C_f_add_temp_element"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_add_period(te_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_H_C_f_add_period"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_sub_temp_element(te_string Varchar2, te1_string Varchar2) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_H_C_f_sub_temp_element"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_sub_period(te_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_H_C_f_sub_period"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_add(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_H_C_f_add"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_add(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_H_C_f_add1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_sub(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_H_C_f_sub"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_sub(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_H_C_f_sub1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION intersects(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_H_C_intersects"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION intersects(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_H_C_intersects1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION intersects(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_H_C_intersects2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_eq(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_H_C_f_eq"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_n_eq(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_H_C_f_n_eq"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_overlaps(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_H_C_overlaps"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_precedes(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_H_C_precedes"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_meets(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_H_C_meets"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_equal(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_H_C_equal"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_contains(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_H_C_contains"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_overlaps(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_H_C_overlaps1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_precedes(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_H_C_precedes1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_meets(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_H_C_meets1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_equal(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_H_C_equal1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_contains(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_H_C_contains1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_overlaps(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_H_C_overlaps2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_precedes(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_H_C_precedes2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_meets(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_H_C_meets2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_equal(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_H_C_equal2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_contains(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_H_C_contains2"
        LIBRARY TLL_lib
        WITH CONTEXT;

END;
/

-- End of DDL script for D_TE_H_PACKAGE

-- Start of DDL script for D_TE_MIN_PACKAGE
-- Generated 5-Nov-00  3:43:20 pm
-- from -PELETLL:1

-- Drop the old instance of D_TE_MIN_PACKAGE

DROP PACKAGE BODY d_te_min_package
/

-- Package body D_TE_MIN_PACKAGE

CREATE OR REPLACE
PACKAGE BODY D_TE_Min_Package AS

    FUNCTION to_string(te_string Varchar2) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Min_C_to_string"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_begin(te_string Varchar2, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, b_h OUT pls_integer, b_min OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer, e_h OUT pls_integer, e_min OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Min_C_f_begin"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_end(te_string Varchar2, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, b_h OUT pls_integer, b_min OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer, e_h OUT pls_integer, e_min OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Min_C_f_end"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION get_granularity(te_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Min_C_get_granularity"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE duration(te_string Varchar2, i_Value OUT double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Min_C_duration"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION cardinality(te_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Min_C_cardinality"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE go(te_string Varchar2, num pls_integer, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, b_h OUT pls_integer, b_min OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer, e_h OUT pls_integer, e_min OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Min_C_go"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_ass_temp_element(te_string Varchar2, te1_string Varchar2) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Min_C_f_ass_temp_element"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_add_temp_element(te_string Varchar2, te1_string Varchar2) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Min_C_f_add_temp_element"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_add_period(te_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Min_C_f_add_period"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_sub_temp_element(te_string Varchar2, te1_string Varchar2) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Min_C_f_sub_temp_element"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_sub_period(te_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Min_C_f_sub_period"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_add(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Min_C_f_add"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_add(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Min_C_f_add1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_sub(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Min_C_f_sub"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_sub(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Min_C_f_sub1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION intersects(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Min_C_intersects"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION intersects(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Min_C_intersects1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION intersects(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Min_C_intersects2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_eq(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Min_C_f_eq"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_n_eq(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Min_C_f_n_eq"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_overlaps(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Min_C_overlaps"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_precedes(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Min_C_precedes"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_meets(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Min_C_meets"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_equal(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Min_C_equal"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_contains(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Min_C_contains"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_overlaps(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Min_C_overlaps1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_precedes(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Min_C_precedes1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_meets(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Min_C_meets1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_equal(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Min_C_equal1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_contains(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Min_C_contains1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_overlaps(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Min_C_overlaps2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_precedes(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Min_C_precedes2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_meets(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Min_C_meets2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_equal(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Min_C_equal2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_contains(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Min_C_contains2"
        LIBRARY TLL_lib
        WITH CONTEXT;

END;
/

-- End of DDL script for D_TE_MIN_PACKAGE

-- Start of DDL script for D_TE_M_PACKAGE
-- Generated 5-Nov-00  3:43:20 pm
-- from -PELETLL:1

-- Drop the old instance of D_TE_M_PACKAGE

DROP PACKAGE BODY d_te_m_package
/

-- Package body D_TE_M_PACKAGE

CREATE OR REPLACE
PACKAGE BODY D_TE_M_Package AS

    FUNCTION to_string(te_string Varchar2) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_M_C_to_string"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_begin(te_string Varchar2, b_y OUT pls_integer, b_m OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_M_C_f_begin"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_end(te_string Varchar2, b_y OUT pls_integer, b_m OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_M_C_f_end"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION get_granularity(te_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_M_C_get_granularity"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE duration(te_string Varchar2, i_Value OUT double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_M_C_duration"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION cardinality(te_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_M_C_cardinality"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE go(te_string Varchar2, num pls_integer, b_y OUT pls_integer, b_m OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_M_C_go"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_ass_temp_element(te_string Varchar2, te1_string Varchar2) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_M_C_f_ass_temp_element"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_add_temp_element(te_string Varchar2, te1_string Varchar2) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_M_C_f_add_temp_element"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_add_period(te_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_M_C_f_add_period"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_sub_temp_element(te_string Varchar2, te1_string Varchar2) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_M_C_f_sub_temp_element"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_sub_period(te_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_M_C_f_sub_period"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_add(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_M_C_f_add"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_add(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_M_C_f_add1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_sub(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_M_C_f_sub"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_sub(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_M_C_f_sub1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION intersects(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer, tp_m_m pls_integer) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_M_C_intersects"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION intersects(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_M_C_intersects1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION intersects(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_M_C_intersects2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_eq(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_M_C_f_eq"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_n_eq(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_M_C_f_n_eq"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_overlaps(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer, tp_m_m pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_M_C_overlaps"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_precedes(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer, tp_m_m pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_M_C_precedes"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_meets(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer, tp_m_m pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_M_C_meets"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_equal(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer, tp_m_m pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_M_C_equal"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_contains(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer, tp_m_m pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_M_C_contains"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_overlaps(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_M_C_overlaps1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_precedes(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_M_C_precedes1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_meets(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_M_C_meets1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_equal(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_M_C_equal1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_contains(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_M_C_contains1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_overlaps(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_M_C_overlaps2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_precedes(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_M_C_precedes2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_meets(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_M_C_meets2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_equal(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_M_C_equal2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_contains(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_M_C_contains2"
        LIBRARY TLL_lib
        WITH CONTEXT;

END;
/

-- End of DDL script for D_TE_M_PACKAGE

-- Start of DDL script for D_TE_SEC_PACKAGE
-- Generated 5-Nov-00  3:43:20 pm
-- from -PELETLL:1

-- Drop the old instance of D_TE_SEC_PACKAGE

DROP PACKAGE BODY d_te_sec_package
/

-- Package body D_TE_SEC_PACKAGE

CREATE OR REPLACE
PACKAGE BODY D_TE_Sec_Package AS

    FUNCTION to_string(te_string Varchar2) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Sec_C_to_string"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_begin(te_string Varchar2, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, b_h OUT pls_integer, b_min OUT pls_integer, b_sec OUT double precision, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer, e_h OUT pls_integer, e_min OUT pls_integer, e_sec OUT double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Sec_C_f_begin"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_end(te_string Varchar2, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, b_h OUT pls_integer, b_min OUT pls_integer, b_sec OUT double precision, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer, e_h OUT pls_integer, e_min OUT pls_integer, e_sec OUT double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Sec_C_f_end"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION get_granularity(te_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Sec_C_get_granularity"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE duration(te_string Varchar2, i_Value OUT double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Sec_C_duration"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION cardinality(te_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Sec_C_cardinality"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE go(te_string Varchar2, num pls_integer, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, b_h OUT pls_integer, b_min OUT pls_integer, b_sec OUT double precision, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer, e_h OUT pls_integer, e_min OUT pls_integer, e_sec OUT double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Sec_C_go"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_ass_temp_element(te_string Varchar2, te1_string Varchar2) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Sec_C_f_ass_temp_element"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_add_temp_element(te_string Varchar2, te1_string Varchar2) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Sec_C_f_add_temp_element"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_add_period(te_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_b_m_sec double precision, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer, p_e_m_sec double precision) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Sec_C_f_add_period"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_sub_temp_element(te_string Varchar2, te1_string Varchar2) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Sec_C_f_sub_temp_element"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_sub_period(te_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_b_m_sec double precision, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer, p_e_m_sec double precision) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Sec_C_f_sub_period"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_add(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_b_m_sec double precision, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer, p_e_m_sec double precision) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Sec_C_f_add"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_add(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Sec_C_f_add1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_sub(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_b_m_sec double precision, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer, p_e_m_sec double precision) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Sec_C_f_sub"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_sub(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Sec_C_f_sub1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION intersects(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Sec_C_intersects"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION intersects(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_b_m_sec double precision, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer, p_e_m_sec double precision) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Sec_C_intersects1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION intersects(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Sec_C_intersects2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_eq(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Sec_C_f_eq"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_n_eq(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Sec_C_f_n_eq"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_overlaps(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Sec_C_overlaps"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_precedes(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Sec_C_precedes"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_meets(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Sec_C_meets"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_equal(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Sec_C_equal"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_contains(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Sec_C_contains"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_overlaps(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_b_m_sec double precision, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer, p_e_m_sec double precision) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Sec_C_overlaps1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_precedes(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_b_m_sec double precision, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer, p_e_m_sec double precision) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Sec_C_precedes1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_meets(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_b_m_sec double precision, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer, p_e_m_sec double precision) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Sec_C_meets1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_equal(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_b_m_sec double precision, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer, p_e_m_sec double precision) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Sec_C_equal1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_contains(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_b_m_sec double precision, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer, p_e_m_sec double precision) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Sec_C_contains1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_overlaps(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Sec_C_overlaps2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_precedes(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Sec_C_precedes2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_meets(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Sec_C_meets2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_equal(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Sec_C_equal2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_contains(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Sec_C_contains2"
        LIBRARY TLL_lib
        WITH CONTEXT;

END;
/

-- End of DDL script for D_TE_SEC_PACKAGE

-- Start of DDL script for D_TE_Y_PACKAGE
-- Generated 5-Nov-00  3:43:21 pm
-- from -PELETLL:1

-- Drop the old instance of D_TE_Y_PACKAGE

DROP PACKAGE BODY d_te_y_package
/

-- Package body D_TE_Y_PACKAGE

CREATE OR REPLACE
PACKAGE BODY D_TE_Y_Package AS

    FUNCTION to_string(te_string Varchar2) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Y_C_to_string"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_begin(te_string Varchar2, b_y OUT pls_integer, e_y OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Y_C_f_begin"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_end(te_string Varchar2, b_y OUT pls_integer, e_y OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Y_C_f_end"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION get_granularity(te_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Y_C_get_granularity"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE duration(te_string Varchar2, i_Value OUT double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Y_C_duration"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION cardinality(te_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Y_C_cardinality"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE go(te_string Varchar2, num pls_integer, b_y OUT pls_integer, e_y OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Y_C_go"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_ass_temp_element(te_string Varchar2, te1_string Varchar2) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Y_C_f_ass_temp_element"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_add_temp_element(te_string Varchar2, te1_string Varchar2) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Y_C_f_add_temp_element"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_add_period(te_string Varchar2, p_b_m_y pls_integer, p_e_m_y pls_integer) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Y_C_f_add_period"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_sub_temp_element(te_string Varchar2, te1_string Varchar2) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Y_C_f_sub_temp_element"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_sub_period(te_string Varchar2, p_b_m_y pls_integer, p_e_m_y pls_integer) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Y_C_f_sub_period"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_add(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_e_m_y pls_integer) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Y_C_f_add"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_add(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Y_C_f_add1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_sub(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_e_m_y pls_integer) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Y_C_f_sub"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_sub(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Y_C_f_sub1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION intersects(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Y_C_intersects"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION intersects(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_e_m_y pls_integer) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Y_C_intersects1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION intersects(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Y_C_intersects2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_eq(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Y_C_f_eq"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_n_eq(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Y_C_f_n_eq"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_overlaps(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Y_C_overlaps"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_precedes(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Y_C_precedes"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_meets(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Y_C_meets"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_equal(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Y_C_equal"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_contains(te_string Varchar2, te1_string Varchar2, tp_m_y pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Y_C_contains"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_overlaps(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_e_m_y pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Y_C_overlaps1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_precedes(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_e_m_y pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Y_C_precedes1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_meets(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_e_m_y pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Y_C_meets1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_equal(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_e_m_y pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Y_C_equal1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_contains(te_string Varchar2, te1_string Varchar2, p_b_m_y pls_integer, p_e_m_y pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Y_C_contains1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_overlaps(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Y_C_overlaps2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_precedes(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Y_C_precedes2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_meets(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Y_C_meets2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_equal(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Y_C_equal2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_contains(te_string Varchar2, te1_string Varchar2, te2_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TE_Y_C_contains2"
        LIBRARY TLL_lib
        WITH CONTEXT;

END;
/

-- End of DDL script for D_TE_Y_PACKAGE

-- Start of DDL script for D_TIMEPOINT_D_PACKAGE
-- Generated 5-Nov-00  3:43:21 pm
-- from -PELETLL:1

-- Drop the old instance of D_TIMEPOINT_D_PACKAGE

DROP PACKAGE BODY d_timepoint_d_package
/

-- Package body D_TIMEPOINT_D_PACKAGE

CREATE OR REPLACE
PACKAGE BODY D_Timepoint_D_Package AS

    PROCEDURE change_status(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, special_value pls_integer, year pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_D_C_change_status"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION year(m_y pls_integer, m_m pls_integer, m_d pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_D_C_year"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION month(m_y pls_integer, m_m pls_integer, m_d pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_D_C_month"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION day(m_y pls_integer, m_m pls_integer, m_d pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_D_C_day"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION get_granularity(m_y pls_integer, m_m pls_integer, m_d pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_D_C_get_granularity"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION get_Abs_Date(m_y pls_integer, m_m pls_integer, m_d pls_integer) return double precision
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_D_C_get_Abs_Date"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE set_year(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, year pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_D_C_set_year"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE set_month(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, month pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_D_C_set_month"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE set_day(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, day pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_D_C_set_day"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE set_Abs_Date(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, d double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_D_C_set_Abs_Date"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE to_period(m_y pls_integer, m_m pls_integer, m_d pls_integer, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_D_C_to_period"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION to_temporal_element(m_y pls_integer, m_m pls_integer, m_d pls_integer) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_D_C_to_temporal_elem"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION to_string(m_y pls_integer, m_m pls_integer, m_d pls_integer) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_D_C_to_string"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION is_Leap_Year(m_y pls_integer, m_m pls_integer, m_d pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_D_C_is_Leap_Year"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION is_Leap_Year(m_y pls_integer, m_m pls_integer, m_d pls_integer, year pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_D_C_is_Leap_Year2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION days_in_month(m_y pls_integer, m_m pls_integer, m_d pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_D_C_days_in_month"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_ass_timestamp(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_D_C_f_ass_timestamp"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_ass_timepoint(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_D_C_f_ass_timepoint"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_add_interval(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, i_m_Value double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_D_C_f_add_interval"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_sub_interval(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, i_m_Value double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_D_C_f_sub_interval"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_incr(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_D_C_f_incr"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_decr(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_D_C_f_decr"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_add(m_y pls_integer, m_m pls_integer, m_d pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, i_m_Value double precision, y OUT pls_integer, m OUT pls_integer, d OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_D_C_f_add"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_sub(m_y pls_integer, m_m pls_integer, m_d pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, i_m_Value double precision, y OUT pls_integer, m OUT pls_integer, d OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_D_C_f_sub"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE intersects(m_y pls_integer, m_m pls_integer, m_d pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_D_C_intersects"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE intersects(m_y pls_integer, m_m pls_integer, m_d pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_D_C_intersects1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION intersects(m_y pls_integer, m_m pls_integer, m_d pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, te_string Varchar2) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_D_C_intersects2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_eq(m_y pls_integer, m_m pls_integer, m_d pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_D_C_f_eq"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_n_eq(m_y pls_integer, m_m pls_integer, m_d pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_D_C_f_n_eq"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_l(m_y pls_integer, m_m pls_integer, m_d pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_D_C_f_l"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_l_e(m_y pls_integer, m_m pls_integer, m_d pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_D_C_f_l_e"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_b(m_y pls_integer, m_m pls_integer, m_d pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_D_C_f_b"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_b_e(m_y pls_integer, m_m pls_integer, m_d pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_D_C_f_b_e"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_diff(m_y pls_integer, m_m pls_integer, m_d pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, i_Value OUT double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_D_C_f_diff"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_eq(m_y pls_integer, m_m pls_integer, m_d pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_D_C_f_eq1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_n_eq(m_y pls_integer, m_m pls_integer, m_d pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_D_C_f_n_eq1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_l(m_y pls_integer, m_m pls_integer, m_d pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_D_C_f_l1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_l_e(m_y pls_integer, m_m pls_integer, m_d pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_D_C_f_l_e1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_b(m_y pls_integer, m_m pls_integer, m_d pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_D_C_f_b1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_b_e(m_y pls_integer, m_m pls_integer, m_d pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_D_C_f_b_e1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_overlaps(m_y pls_integer, m_m pls_integer, m_d pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_D_C_overlaps"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_precedes(m_y pls_integer, m_m pls_integer, m_d pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_D_C_precedes"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_meets(m_y pls_integer, m_m pls_integer, m_d pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_D_C_meets"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_equal(m_y pls_integer, m_m pls_integer, m_d pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_D_C_equal"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_contains(m_y pls_integer, m_m pls_integer, m_d pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_D_C_contains"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_overlaps(m_y pls_integer, m_m pls_integer, m_d pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_D_C_overlaps1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_precedes(m_y pls_integer, m_m pls_integer, m_d pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_D_C_precedes1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_meets(m_y pls_integer, m_m pls_integer, m_d pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_D_C_meets1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_equal(m_y pls_integer, m_m pls_integer, m_d pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_D_C_equal1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_contains(m_y pls_integer, m_m pls_integer, m_d pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_D_C_contains1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_overlaps(m_y pls_integer, m_m pls_integer, m_d pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, te_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_D_C_overlaps2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_precedes(m_y pls_integer, m_m pls_integer, m_d pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, te_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_D_C_precedes2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_meets(m_y pls_integer, m_m pls_integer, m_d pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, te_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_D_C_meets2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_equal(m_y pls_integer, m_m pls_integer, m_d pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, te_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_D_C_equal2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_contains(m_y pls_integer, m_m pls_integer, m_d pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, te_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_D_C_contains2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_overlaps(m_y pls_integer, m_m pls_integer, m_d pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp3_m_y pls_integer, tp3_m_m pls_integer, tp3_m_d pls_integer, tp4_m_y pls_integer, tp4_m_m pls_integer, tp4_m_d pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_D_C_overlaps3"
        LIBRARY TLL_lib
        WITH CONTEXT;

END;
/

-- End of DDL script for D_TIMEPOINT_D_PACKAGE

-- Start of DDL script for D_TIMEPOINT_H_PACKAGE
-- Generated 5-Nov-00  3:43:21 pm
-- from -PELETLL:1

-- Drop the old instance of D_TIMEPOINT_H_PACKAGE

DROP PACKAGE BODY d_timepoint_h_package
/

-- Package body D_TIMEPOINT_H_PACKAGE

CREATE OR REPLACE
PACKAGE BODY D_Timepoint_H_Package AS

    PROCEDURE change_status(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, special_value pls_integer, special_hours pls_integer, year pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_H_C_change_status"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE change_status(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, special_hours pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_H_C_change_status2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION year(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_H_C_year"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION month(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_H_C_month"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION day(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_H_C_day"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION hour(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_H_C_hour"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION get_granularity(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_H_C_get_granularity"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION get_Abs_Date(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer) return double precision
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_H_C_get_Abs_Date"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE set_year(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, year pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_H_C_set_year"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE set_month(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, month pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_H_C_set_month"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE set_day(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, day pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_H_C_set_day"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE set_hour(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, hour pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_H_C_set_hour"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE set_Abs_Date(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, d double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_H_C_set_Abs_Date"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE to_period(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, b_h OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer, e_h OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_H_C_to_period"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION to_temporal_element(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_H_C_to_temporal_elem"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION to_string(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_H_C_to_string"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION is_Leap_Year(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_H_C_is_Leap_Year"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION is_Leap_Year(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, year pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_H_C_is_Leap_Year2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION days_in_month(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_H_C_days_in_month"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_ass_timestamp(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_H_C_f_ass_timestamp"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_ass_timepoint(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_H_C_f_ass_timepoint"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_add_interval(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, i_m_Value double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_H_C_f_add_interval"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_sub_interval(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, i_m_Value double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_H_C_f_sub_interval"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_incr(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_H_C_f_incr"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_decr(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_H_C_f_decr"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_add(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, i_m_Value double precision, y OUT pls_integer, m OUT pls_integer, d OUT pls_integer, h OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_H_C_f_add"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_sub(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, i_m_Value double precision, y OUT pls_integer, m OUT pls_integer, d OUT pls_integer, h OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_H_C_f_sub"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE intersects(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, b_h OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer, e_h OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_H_C_intersects"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE intersects(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, b_h OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer, e_h OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_H_C_intersects1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION intersects(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, te_string Varchar2) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_H_C_intersects2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_eq(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_H_C_f_eq"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_n_eq(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_H_C_f_n_eq"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_l(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_H_C_f_l"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_l_e(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_H_C_f_l_e"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_b(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_H_C_f_b"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_b_e(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_H_C_f_b_e"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_diff(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer, i_Value OUT double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_H_C_f_diff"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_eq(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_H_C_f_eq1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_n_eq(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_H_C_f_n_eq1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_l(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_H_C_f_l1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_l_e(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_H_C_f_l_e1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_b(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_H_C_f_b1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_b_e(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_H_C_f_b_e1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_overlaps(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_H_C_overlaps"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_precedes(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_H_C_precedes"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_meets(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_H_C_meets"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_equal(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_H_C_equal"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_contains(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_H_C_contains"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_overlaps(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_H_C_overlaps1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_precedes(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_H_C_precedes1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_meets(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_H_C_meets1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_equal(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_H_C_equal1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_contains(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_H_C_contains1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_overlaps(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, te_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_H_C_overlaps2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_precedes(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, te_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_H_C_precedes2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_meets(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, te_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_H_C_meets2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_equal(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, te_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_H_C_equal2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_contains(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, te_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_H_C_contains2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_overlaps(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer, tp3_m_y pls_integer, tp3_m_m pls_integer, tp3_m_d pls_integer, tp3_m_h pls_integer, tp4_m_y pls_integer, tp4_m_m pls_integer, tp4_m_d pls_integer, tp4_m_h pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_H_C_overlaps3"
        LIBRARY TLL_lib
        WITH CONTEXT;

END;
/

-- End of DDL script for D_TIMEPOINT_H_PACKAGE

-- Start of DDL script for D_TIMEPOINT_MIN_PACKAGE
-- Generated 5-Nov-00  3:43:22 pm
-- from -PELETLL:1

-- Drop the old instance of D_TIMEPOINT_MIN_PACKAGE

DROP PACKAGE BODY d_timepoint_min_package
/

-- Package body D_TIMEPOINT_MIN_PACKAGE

CREATE OR REPLACE
PACKAGE BODY D_Timepoint_Min_Package AS

    PROCEDURE change_status(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, m_min IN OUT pls_integer, special_value pls_integer, special_hours pls_integer, year pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Min_C_change_status"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION year(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Min_C_year"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION month(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Min_C_month"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION day(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Min_C_day"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION hour(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Min_C_hour"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION minute(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Min_C_minute"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION get_granularity(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Min_C_get_granularity"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION get_Abs_Date(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer) return double precision
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Min_C_get_Abs_Date"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE set_year(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, m_min IN OUT pls_integer, year pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Min_C_set_year"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE set_month(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, m_min IN OUT pls_integer, month pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Min_C_set_month"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE set_day(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, m_min IN OUT pls_integer, day pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Min_C_set_day"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE set_hour(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, m_min IN OUT pls_integer, hour pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Min_C_set_hour"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE set_minute(m_y  IN OUT pls_integer, m_m  IN OUT pls_integer, m_d  IN OUT pls_integer, m_h  IN OUT pls_integer, m_min  IN OUT pls_integer, minute pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Min_C_set_minute"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE set_Abs_Date(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, m_min IN OUT pls_integer, d double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Min_C_set_Abs_Date"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE to_period(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, b_h OUT pls_integer, b_min OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer, e_h OUT pls_integer, e_min OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Min_C_to_period"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION to_temporal_element(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Min_C_to_temporal_elem"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION to_string(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Min_C_to_string"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION is_Leap_Year(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Min_C_is_Leap_Year"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION is_Leap_Year(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, year pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Min_C_is_Leap_Year2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION days_in_month(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Min_C_days_in_month"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_ass_timestamp(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, m_min IN OUT pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Min_C_f_ass_timestamp"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_ass_timepoint(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, m_min IN OUT pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Min_C_f_ass_timepoint"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_add_interval(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, m_min IN OUT pls_integer, i_m_Value double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Min_C_f_add_interval"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_sub_interval(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, m_min IN OUT pls_integer, i_m_Value double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Min_C_f_sub_interval"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_incr(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, m_min IN OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Min_C_f_incr"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_decr(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, m_min IN OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Min_C_f_decr"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_add(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, i_m_Value double precision, y OUT pls_integer, m OUT pls_integer, d OUT pls_integer, h OUT pls_integer, minute OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Min_C_f_add"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_sub(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, i_m_Value double precision, y OUT pls_integer, m OUT pls_integer, d OUT pls_integer, h OUT pls_integer, minute OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Min_C_f_sub"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE intersects(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp1_m_min pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer, tp2_m_min pls_integer, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, b_h OUT pls_integer, b_min OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer, e_h OUT pls_integer, e_min OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Min_C_intersects"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE intersects(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, b_h OUT pls_integer, b_min OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer, e_h OUT pls_integer, e_min OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Min_C_intersects1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION intersects(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, te_string Varchar2) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Min_C_intersects2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_eq(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp1_m_min pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer, tp2_m_min pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Min_C_f_eq"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_n_eq(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp1_m_min pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer, tp2_m_min pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Min_C_f_n_eq"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_l(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp1_m_min pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer, tp2_m_min pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Min_C_f_l"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_l_e(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp1_m_min pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer, tp2_m_min pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Min_C_f_l_e"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_b(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp1_m_min pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer, tp2_m_min pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Min_C_f_b"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_b_e(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp1_m_min pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer, tp2_m_min pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Min_C_f_b_e"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_diff(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp1_m_min pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer, tp2_m_min pls_integer, i_Value OUT double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Min_C_f_diff"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_eq(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Min_C_f_eq1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_n_eq(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Min_C_f_n_eq1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_l(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Min_C_f_l1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_l_e(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Min_C_f_l_e1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_b(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Min_C_f_b1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_b_e(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Min_C_f_b_e1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_overlaps(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp1_m_min pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer, tp2_m_min pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Min_C_overlaps"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_precedes(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp1_m_min pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer, tp2_m_min pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Min_C_precedes"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_meets(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp1_m_min pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer, tp2_m_min pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Min_C_meets"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_equal(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp1_m_min pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer, tp2_m_min pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Min_C_equal"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_contains(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp1_m_min pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer, tp2_m_min pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Min_C_contains"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_overlaps(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Min_C_overlaps1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_precedes(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Min_C_precedes1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_meets(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Min_C_meets1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_equal(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Min_C_equal1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_contains(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Min_C_contains1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_overlaps(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, te_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Min_C_overlaps2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_precedes(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, te_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Min_C_precedes2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_meets(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, te_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Min_C_meets2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_equal(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, te_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Min_C_equal2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_contains(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, te_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Min_C_contains2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_overlaps(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp1_m_min pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer, tp2_m_min pls_integer, tp3_m_y pls_integer, tp3_m_m pls_integer, tp3_m_d pls_integer, tp3_m_h pls_integer, tp3_m_min pls_integer, tp4_m_y pls_integer, tp4_m_m pls_integer, tp4_m_d pls_integer, tp4_m_h pls_integer, tp4_m_min pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Min_C_overlaps3"
        LIBRARY TLL_lib
        WITH CONTEXT;

END;
/

-- End of DDL script for D_TIMEPOINT_MIN_PACKAGE

-- Start of DDL script for D_TIMEPOINT_M_PACKAGE
-- Generated 5-Nov-00  3:43:22 pm
-- from -PELETLL:1

-- Drop the old instance of D_TIMEPOINT_M_PACKAGE

DROP PACKAGE BODY d_timepoint_m_package
/

-- Package body D_TIMEPOINT_M_PACKAGE

CREATE OR REPLACE
PACKAGE BODY D_Timepoint_M_Package AS

    PROCEDURE change_status(m_y IN OUT pls_integer, m_m IN OUT pls_integer, special_value pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_M_C_change_status"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION year(m_y pls_integer, m_m pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_M_C_year"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION month(m_y pls_integer, m_m pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_M_C_month"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION get_granularity(m_y pls_integer, m_m pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_M_C_get_granularity"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION get_Abs_Date(m_y pls_integer, m_m pls_integer) return double precision
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_M_C_get_Abs_Date"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE set_year(m_y IN OUT pls_integer, m_m IN OUT pls_integer, year pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_M_C_set_year"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE set_month(m_y IN OUT pls_integer, m_m IN OUT pls_integer, month pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_M_C_set_month"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE set_Abs_Date(m_y IN OUT pls_integer, m_m IN OUT pls_integer, d double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_M_C_set_Abs_Date"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE to_period(m_y pls_integer, m_m pls_integer, b_y OUT pls_integer, b_m OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_M_C_to_period"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION to_temporal_element(m_y pls_integer, m_m pls_integer) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_M_C_to_temporal_elem"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION to_string(m_y pls_integer, m_m pls_integer) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_M_C_to_string"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION is_Leap_Year(m_y pls_integer, m_m pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_M_C_is_Leap_Year"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION is_Leap_Year(m_y pls_integer, m_m pls_integer, year pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_M_C_is_Leap_Year2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION days_in_month(m_y pls_integer, m_m pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_M_C_days_in_month"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_ass_timestamp(m_y IN OUT pls_integer, m_m IN OUT pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_M_C_f_ass_timestamp"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_ass_timepoint(m_y IN OUT pls_integer, m_m IN OUT pls_integer, tp_m_y pls_integer, tp_m_m pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_M_C_f_ass_timepoint"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_add_interval(m_y IN OUT pls_integer, m_m IN OUT pls_integer, i_m_Value double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_M_C_f_add_interval"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_sub_interval(m_y IN OUT pls_integer, m_m IN OUT pls_integer, i_m_Value double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_M_C_f_sub_interval"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_incr(m_y IN OUT pls_integer, m_m IN OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_M_C_f_incr"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_decr(m_y IN OUT pls_integer, m_m IN OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_M_C_f_decr"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_add(m_y pls_integer, m_m pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, i_m_Value double precision, y OUT pls_integer, m OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_M_C_f_add"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_sub(m_y pls_integer, m_m pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, i_m_Value double precision, y OUT pls_integer, m OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_M_C_f_sub"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE intersects(m_y pls_integer, m_m pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, b_y OUT pls_integer, b_m OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_M_C_intersects"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE intersects(m_y pls_integer, m_m pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer, b_y OUT pls_integer, b_m OUT pls_integer, e_y OUT pls_integer, e_m OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_M_C_intersects1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION intersects(m_y pls_integer, m_m pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, te_string Varchar2) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_M_C_intersects2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_eq(m_y pls_integer, m_m pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_M_C_f_eq"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_n_eq(m_y pls_integer, m_m pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_M_C_f_n_eq"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_l(m_y pls_integer, m_m pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_M_C_f_l"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_l_e(m_y pls_integer, m_m pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_M_C_f_l_e"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_b(m_y pls_integer, m_m pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_M_C_f_b"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_b_e(m_y pls_integer, m_m pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_M_C_f_b_e"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_diff(m_y pls_integer, m_m pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, i_Value OUT double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_M_C_f_diff"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_eq(m_y pls_integer, m_m pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_M_C_f_eq1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_n_eq(m_y pls_integer, m_m pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_M_C_f_n_eq1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_l(m_y pls_integer, m_m pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_M_C_f_l1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_l_e(m_y pls_integer, m_m pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_M_C_f_l_e1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_b(m_y pls_integer, m_m pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_M_C_f_b1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_b_e(m_y pls_integer, m_m pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_M_C_f_b_e1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_overlaps(m_y pls_integer, m_m pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_M_C_overlaps"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_precedes(m_y pls_integer, m_m pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_M_C_precedes"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_meets(m_y pls_integer, m_m pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_M_C_meets"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_equal(m_y pls_integer, m_m pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_M_C_equal"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_contains(m_y pls_integer, m_m pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_M_C_contains"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_overlaps(m_y pls_integer, m_m pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_M_C_overlaps1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_precedes(m_y pls_integer, m_m pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_M_C_precedes1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_meets(m_y pls_integer, m_m pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_M_C_meets1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_equal(m_y pls_integer, m_m pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_M_C_equal1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_contains(m_y pls_integer, m_m pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, p_b_m_y pls_integer, p_b_m_m pls_integer, p_e_m_y pls_integer, p_e_m_m pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_M_C_contains1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_overlaps(m_y pls_integer, m_m pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, te_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_M_C_overlaps2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_precedes(m_y pls_integer, m_m pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, te_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_M_C_precedes2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_meets(m_y pls_integer, m_m pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, te_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_M_C_meets2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_equal(m_y pls_integer, m_m pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, te_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_M_C_equal2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_contains(m_y pls_integer, m_m pls_integer, tp_m_y pls_integer, tp_m_m pls_integer, te_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_M_C_contains2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_overlaps(m_y pls_integer, m_m pls_integer, tp1_m_y pls_integer, tp1_m_m pls_integer, tp2_m_y pls_integer, tp2_m_m pls_integer, tp3_m_y pls_integer, tp3_m_m pls_integer, tp4_m_y pls_integer, tp4_m_m pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_M_C_overlaps3"
        LIBRARY TLL_lib
        WITH CONTEXT;

END;
/

-- End of DDL script for D_TIMEPOINT_M_PACKAGE

-- Start of DDL script for D_TIMEPOINT_SEC_PACKAGE
-- Generated 5-Nov-00  3:43:22 pm
-- from -PELETLL:1

-- Drop the old instance of D_TIMEPOINT_SEC_PACKAGE

DROP PACKAGE BODY d_timepoint_sec_package
/

-- Package body D_TIMEPOINT_SEC_PACKAGE

CREATE OR REPLACE
PACKAGE BODY D_Timepoint_Sec_Package AS

    PROCEDURE change_status(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, m_min IN OUT pls_integer, m_sec IN OUT double precision, special_value pls_integer, special_hours pls_integer, year pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Sec_C_change_status"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION year(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Sec_C_year"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION month(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Sec_C_month"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION day(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Sec_C_day"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION hour(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Sec_C_hour"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION minute(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Sec_C_minute"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION second(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision) return double precision
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Sec_C_second"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION get_granularity(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Sec_C_get_granularity"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION get_Abs_Date(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision) return double precision
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Sec_C_get_Abs_Date"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE set_year(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, m_min IN OUT pls_integer, m_sec IN OUT double precision, year pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Sec_C_set_year"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE set_month(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, m_min IN OUT pls_integer, m_sec IN OUT double precision, month pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Sec_C_set_month"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE set_day(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, m_min IN OUT pls_integer, m_sec IN OUT double precision, day pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Sec_C_set_day"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE set_hour(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, m_min IN OUT pls_integer, m_sec IN OUT double precision, hour pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Sec_C_set_hour"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE set_minute(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, m_min IN OUT pls_integer, m_sec IN OUT double precision, minute pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Sec_C_set_minute"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE set_second(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, m_min IN OUT pls_integer, m_sec IN OUT double precision, second double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Sec_C_set_second"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE set_Abs_Date(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, m_min IN OUT pls_integer, m_sec IN OUT double precision, d double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Sec_C_set_Abs_Date"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE to_period(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, b_h OUT pls_integer, b_min OUT pls_integer, b_sec OUT double precision, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer, e_h OUT pls_integer, e_min OUT pls_integer, e_sec OUT double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Sec_C_to_period"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION to_temporal_element(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Sec_C_to_temporal_elem"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION to_string(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Sec_C_to_string"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION is_Leap_Year(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Sec_C_is_Leap_Year"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION is_Leap_Year(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, year pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Sec_C_is_Leap_Year2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION days_in_month(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Sec_C_days_in_month"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_ass_timestamp(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, m_min IN OUT pls_integer, m_sec IN OUT double precision, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Sec_C_f_ass_timestamp"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_ass_timepoint(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, m_min IN OUT pls_integer, m_sec IN OUT double precision, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Sec_C_f_ass_timepoint"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_add_interval(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, m_min IN OUT pls_integer, m_sec IN OUT double precision, i_m_Value double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Sec_C_f_add_interval"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_sub_interval(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, m_min IN OUT pls_integer, m_sec IN OUT double precision, i_m_Value double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Sec_C_f_sub_interval"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_incr(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, m_min IN OUT pls_integer, m_sec IN OUT double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Sec_C_f_incr"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_decr(m_y IN OUT pls_integer, m_m IN OUT pls_integer, m_d IN OUT pls_integer, m_h IN OUT pls_integer, m_min IN OUT pls_integer, m_sec IN OUT double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Sec_C_f_decr"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_add(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision, i_m_Value double precision, y OUT pls_integer, m OUT pls_integer, d OUT pls_integer, h OUT pls_integer, minute OUT pls_integer, second OUT double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Sec_C_f_add"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_sub(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision, i_m_Value double precision, y OUT pls_integer, m OUT pls_integer, d OUT pls_integer, h OUT pls_integer, minute OUT pls_integer, second OUT double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Sec_C_f_sub"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE intersects(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp1_m_min pls_integer, tp1_m_sec double precision, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer, tp2_m_min pls_integer, tp2_m_sec double precision, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, b_h OUT pls_integer, b_min OUT pls_integer, b_sec OUT double precision, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer, e_h OUT pls_integer, e_min OUT pls_integer, e_sec OUT double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Sec_C_intersects"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE intersects(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_b_m_sec double precision, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer, p_e_m_sec double precision, b_y OUT pls_integer, b_m OUT pls_integer, b_d OUT pls_integer, b_h OUT pls_integer, b_min OUT pls_integer, b_sec OUT double precision, e_y OUT pls_integer, e_m OUT pls_integer, e_d OUT pls_integer, e_h OUT pls_integer, e_min OUT pls_integer, e_sec OUT double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Sec_C_intersects1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION intersects(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision, te_string Varchar2) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Sec_C_intersects2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_eq(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp1_m_min pls_integer, tp1_m_sec double precision, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer, tp2_m_min pls_integer, tp2_m_sec double precision) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Sec_C_f_eq"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_n_eq(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp1_m_min pls_integer, tp1_m_sec double precision, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer, tp2_m_min pls_integer, tp2_m_sec double precision) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Sec_C_f_n_eq"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_l(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp1_m_min pls_integer, tp1_m_sec double precision, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer, tp2_m_min pls_integer, tp2_m_sec double precision) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Sec_C_f_l"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_l_e(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp1_m_min pls_integer, tp1_m_sec double precision, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer, tp2_m_min pls_integer, tp2_m_sec double precision) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Sec_C_f_l_e"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_b(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp1_m_min pls_integer, tp1_m_sec double precision, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer, tp2_m_min pls_integer, tp2_m_sec double precision) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Sec_C_f_b"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_b_e(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp1_m_min pls_integer, tp1_m_sec double precision, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer, tp2_m_min pls_integer, tp2_m_sec double precision) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Sec_C_f_b_e"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_diff(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp1_m_min pls_integer, tp1_m_sec double precision, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer, tp2_m_min pls_integer, tp2_m_sec double precision, i_Value OUT double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Sec_C_f_diff"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_eq(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Sec_C_f_eq1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_n_eq(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Sec_C_f_n_eq1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_l(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Sec_C_f_l1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_l_e(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Sec_C_f_l_e1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_b(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Sec_C_f_b1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_b_e(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Sec_C_f_b_e1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_overlaps(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp1_m_min pls_integer, tp1_m_sec double precision, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer, tp2_m_min pls_integer, tp2_m_sec double precision) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Sec_C_overlaps"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_precedes(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp1_m_min pls_integer, tp1_m_sec double precision, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer, tp2_m_min pls_integer, tp2_m_sec double precision) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Sec_C_precedes"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_meets(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp1_m_min pls_integer, tp1_m_sec double precision, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer, tp2_m_min pls_integer, tp2_m_sec double precision) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Sec_C_meets"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_equal(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp1_m_min pls_integer, tp1_m_sec double precision, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer, tp2_m_min pls_integer, tp2_m_sec double precision) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Sec_C_equal"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_contains(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp1_m_min pls_integer, tp1_m_sec double precision, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer, tp2_m_min pls_integer, tp2_m_sec double precision) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Sec_C_contains"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_overlaps(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_b_m_sec double precision, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer, p_e_m_sec double precision) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Sec_C_overlaps1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_precedes(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_b_m_sec double precision, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer, p_e_m_sec double precision) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Sec_C_precedes1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_meets(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_b_m_sec double precision, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer, p_e_m_sec double precision) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Sec_C_meets1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_equal(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_b_m_sec double precision, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer, p_e_m_sec double precision) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Sec_C_equal1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_contains(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision, p_b_m_y pls_integer, p_b_m_m pls_integer, p_b_m_d pls_integer, p_b_m_h pls_integer, p_b_m_min pls_integer, p_b_m_sec double precision, p_e_m_y pls_integer, p_e_m_m pls_integer, p_e_m_d pls_integer, p_e_m_h pls_integer, p_e_m_min pls_integer, p_e_m_sec double precision) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Sec_C_contains1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_overlaps(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision, te_string varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Sec_C_overlaps2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_precedes(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision, te_string varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Sec_C_precedes2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_meets(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision, te_string varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Sec_C_meets2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_equal(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision, te_string varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Sec_C_equal2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_contains(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, tp_m_y pls_integer, tp_m_m pls_integer, tp_m_d pls_integer, tp_m_h pls_integer, tp_m_min pls_integer, tp_m_sec double precision, te_string varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Sec_C_contains2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_overlaps(m_y pls_integer, m_m pls_integer, m_d pls_integer, m_h pls_integer, m_min pls_integer, m_sec double precision, tp1_m_y pls_integer, tp1_m_m pls_integer, tp1_m_d pls_integer, tp1_m_h pls_integer, tp1_m_min pls_integer, tp1_m_sec double precision, tp2_m_y pls_integer, tp2_m_m pls_integer, tp2_m_d pls_integer, tp2_m_h pls_integer, tp2_m_min pls_integer, tp2_m_sec double precision, tp3_m_y pls_integer, tp3_m_m pls_integer, tp3_m_d pls_integer, tp3_m_h pls_integer, tp3_m_min pls_integer, tp3_m_sec double precision, tp4_m_y pls_integer, tp4_m_m pls_integer, tp4_m_d pls_integer, tp4_m_h pls_integer, tp4_m_min pls_integer, tp4_m_sec double precision) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Sec_C_overlaps3"
        LIBRARY TLL_lib
        WITH CONTEXT;

END;
/

-- End of DDL script for D_TIMEPOINT_SEC_PACKAGE

-- Start of DDL script for D_TIMEPOINT_Y_PACKAGE
-- Generated 5-Nov-00  3:43:23 pm
-- from -PELETLL:1

-- Drop the old instance of D_TIMEPOINT_Y_PACKAGE

DROP PACKAGE BODY d_timepoint_y_package
/

-- Package body D_TIMEPOINT_Y_PACKAGE

CREATE OR REPLACE
PACKAGE BODY D_Timepoint_Y_Package AS

    PROCEDURE change_status(m_y IN OUT pls_integer, special_value pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Y_C_change_status"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION year(m_y pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Y_C_year"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION get_granularity(m_y pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Y_C_get_granularity"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION get_Abs_Date(m_y pls_integer) return double precision
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Y_C_get_Abs_Date"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE set_year(m_y IN OUT pls_integer, year pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Y_C_set_year"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE set_Abs_Date(m_y IN OUT pls_integer, d double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Y_C_set_Abs_Date"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE to_period(m_y pls_integer, b_y OUT pls_integer, e_y OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Y_C_to_period"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION to_temporal_element(m_y pls_integer) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Y_C_to_temporal_elem"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION to_string(m_y pls_integer) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Y_C_to_string"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION is_Leap_Year(m_y pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Y_C_is_Leap_Year"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION is_Leap_Year(m_y pls_integer, year pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Y_C_is_Leap_Year2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_ass_timestamp(m_y IN OUT pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Y_C_f_ass_timestamp"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_ass_timepoint(m_y IN OUT pls_integer, tp_m_y pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Y_C_f_ass_timepoint"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_add_interval(m_y IN OUT pls_integer, i_m_Value double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Y_C_f_add_interval"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_sub_interval(m_y IN OUT pls_integer, i_m_Value double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Y_C_f_sub_interval"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_incr(m_y IN OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Y_C_f_incr"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_decr(m_y IN OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Y_C_f_decr"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_add(m_y pls_integer, tp_m_y pls_integer, i_m_Value double precision, y OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Y_C_f_add"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_sub(m_y pls_integer, tp_m_y pls_integer, i_m_Value double precision, y OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Y_C_f_sub"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE intersects(m_y pls_integer, tp1_m_y pls_integer, tp2_m_y pls_integer, b_y OUT pls_integer, e_y OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Y_C_intersects"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE intersects(m_y pls_integer, tp_m_y pls_integer, p_b_m_y pls_integer, p_e_m_y pls_integer, b_y OUT pls_integer, e_y OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Y_C_intersects1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION intersects(m_y pls_integer, tp_m_y pls_integer, te_string Varchar2) return Varchar2
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Y_C_intersects2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_eq(m_y pls_integer, tp1_m_y pls_integer, tp2_m_y pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Y_C_f_eq"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_n_eq(m_y pls_integer, tp1_m_y pls_integer, tp2_m_y pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Y_C_f_n_eq"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_l(m_y pls_integer, tp1_m_y pls_integer, tp2_m_y pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Y_C_f_l"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_l_e(m_y pls_integer, tp1_m_y pls_integer, tp2_m_y pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Y_C_f_l_e"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_b(m_y pls_integer, tp1_m_y pls_integer, tp2_m_y pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Y_C_f_b"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_b_e(m_y pls_integer, tp1_m_y pls_integer, tp2_m_y pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Y_C_f_b_e"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_diff(m_y pls_integer, tp1_m_y pls_integer, tp2_m_y pls_integer, i_Value OUT double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Y_C_f_diff"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_eq(m_y pls_integer, tp_m_y pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Y_C_f_eq1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_n_eq(m_y pls_integer, tp_m_y pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Y_C_f_n_eq1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_l(m_y pls_integer, tp_m_y pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Y_C_f_l1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_l_e(m_y pls_integer, tp_m_y pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Y_C_f_l_e1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_b(m_y pls_integer, tp_m_y pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Y_C_f_b1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_b_e(m_y pls_integer, tp_m_y pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Y_C_f_b_e1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_overlaps(m_y pls_integer, tp1_m_y pls_integer, tp2_m_y pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Y_C_overlaps"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_precedes(m_y pls_integer, tp1_m_y pls_integer, tp2_m_y pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Y_C_precedes"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_meets(m_y pls_integer, tp1_m_y pls_integer, tp2_m_y pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Y_C_meets"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_equal(m_y pls_integer, tp1_m_y pls_integer, tp2_m_y pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Y_C_equal"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_contains(m_y pls_integer, tp1_m_y pls_integer, tp2_m_y pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Y_C_contains"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_overlaps(m_y pls_integer, tp_m_y pls_integer, p_b_m_y pls_integer, p_e_m_y pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Y_C_overlaps1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_precedes(m_y pls_integer, tp_m_y pls_integer, p_b_m_y pls_integer, p_e_m_y pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Y_C_precedes1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_meets(m_y pls_integer, tp_m_y pls_integer, p_b_m_y pls_integer, p_e_m_y pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Y_C_meets1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_equal(m_y pls_integer, tp_m_y pls_integer, p_b_m_y pls_integer, p_e_m_y pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Y_C_equal1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_contains(m_y pls_integer, tp_m_y pls_integer, p_b_m_y pls_integer, p_e_m_y pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Y_C_contains1"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_overlaps(m_y pls_integer, tp_m_y pls_integer, te_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Y_C_overlaps2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_precedes(m_y pls_integer, tp_m_y pls_integer, te_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Y_C_precedes2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_meets(m_y pls_integer, tp_m_y pls_integer, te_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Y_C_meets2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_equal(m_y pls_integer, tp_m_y pls_integer, te_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Y_C_equal2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_contains(m_y pls_integer, tp_m_y pls_integer, te_string Varchar2) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Y_C_contains2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_overlaps(m_y pls_integer, tp1_m_y pls_integer, tp2_m_y pls_integer, tp3_m_y pls_integer, tp4_m_y pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_TimeP_Y_C_overlaps3"
        LIBRARY TLL_lib
        WITH CONTEXT;

END;
/

-- End of DDL script for D_TIMEPOINT_Y_PACKAGE

-- Start of DDL script for D_TIMESTAMP_PACKAGE
-- Generated 5-Nov-00  3:43:23 pm
-- from -PELETLL:1

-- Drop the old instance of D_TIMESTAMP_PACKAGE

DROP PACKAGE BODY d_timestamp_package
/

-- Package body D_TIMESTAMP_PACKAGE

CREATE OR REPLACE
PACKAGE BODY D_Timestamp_Package AS

    PROCEDURE f_date(m_Date_year pls_integer, m_Date_month pls_integer, m_Date_day pls_integer, m_Time_hour pls_integer, m_Time_minute pls_integer, m_Time_second pls_integer, m_Time_hundr_thSec pls_integer, m_Time_tz_hour pls_integer, m_Time_tz_minute pls_integer, Y OUT pls_integer, M OUT pls_integer, D OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Timestamp_C_f_date"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_time(m_Date_year pls_integer, m_Date_month pls_integer, m_Date_day pls_integer, m_Time_hour pls_integer, m_Time_minute pls_integer, m_Time_second pls_integer, m_Time_hundr_thSec pls_integer, m_Time_tz_hour pls_integer, m_Time_tz_minute pls_integer, H OUT pls_integer, M OUT pls_integer, S OUT pls_integer, hundr_thS OUT pls_integer, tz_H OUT pls_integer, tz_M OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Timestamp_C_f_time"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION year(m_Date_year pls_integer, m_Date_month pls_integer, m_Date_day pls_integer, m_Time_hour pls_integer, m_Time_minute pls_integer, m_Time_second pls_integer, m_Time_hundr_thSec pls_integer, m_Time_tz_hour pls_integer, m_Time_tz_minute pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Timestamp_C_year"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION month(m_Date_year pls_integer, m_Date_month pls_integer, m_Date_day pls_integer, m_Time_hour pls_integer, m_Time_minute pls_integer, m_Time_second pls_integer, m_Time_hundr_thSec pls_integer, m_Time_tz_hour pls_integer, m_Time_tz_minute pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Timestamp_C_month"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION day(m_Date_year pls_integer, m_Date_month pls_integer, m_Date_day pls_integer, m_Time_hour pls_integer, m_Time_minute pls_integer, m_Time_second pls_integer, m_Time_hundr_thSec pls_integer, m_Time_tz_hour pls_integer, m_Time_tz_minute pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Timestamp_C_day"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION hour(m_Date_year pls_integer, m_Date_month pls_integer, m_Date_day pls_integer, m_Time_hour pls_integer, m_Time_minute pls_integer, m_Time_second pls_integer, m_Time_hundr_thSec pls_integer, m_Time_tz_hour pls_integer, m_Time_tz_minute pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Timestamp_C_hour"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION minute(m_Date_year pls_integer, m_Date_month pls_integer, m_Date_day pls_integer, m_Time_hour pls_integer, m_Time_minute pls_integer, m_Time_second pls_integer, m_Time_hundr_thSec pls_integer, m_Time_tz_hour pls_integer, m_Time_tz_minute pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Timestamp_C_minute"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION second(m_Date_year pls_integer, m_Date_month pls_integer, m_Date_day pls_integer, m_Time_hour pls_integer, m_Time_minute pls_integer, m_Time_second pls_integer, m_Time_hundr_thSec pls_integer, m_Time_tz_hour pls_integer, m_Time_tz_minute pls_integer) return float
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Timestamp_C_second"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION tz_hour(m_Date_year pls_integer, m_Date_month pls_integer, m_Date_day pls_integer, m_Time_hour pls_integer, m_Time_minute pls_integer, m_Time_second pls_integer, m_Time_hundr_thSec pls_integer, m_Time_tz_hour pls_integer, m_Time_tz_minute pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Timestamp_C_tz_hour"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION tz_minute(m_Date_year pls_integer, m_Date_month pls_integer, m_Date_day pls_integer, m_Time_hour pls_integer, m_Time_minute pls_integer, m_Time_second pls_integer, m_Time_hundr_thSec pls_integer, m_Time_tz_hour pls_integer, m_Time_tz_minute pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Timestamp_C_tz_minute"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_current(m_Date_year pls_integer, m_Date_month pls_integer, m_Date_day pls_integer, m_Time_hour pls_integer, m_Time_minute pls_integer, m_Time_second pls_integer, m_Time_hundr_thSec pls_integer, m_Time_tz_hour pls_integer, m_Time_tz_minute pls_integer, Year OUT pls_integer, Month OUT pls_integer, Day OUT pls_integer, H OUT pls_integer, M OUT pls_integer, S OUT pls_integer, hundr_thS OUT pls_integer, tz_H OUT pls_integer, tz_M OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Timestamp_C_f_current"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_ass_timestamp(m_Date_m_Year IN OUT pls_integer, m_Date_m_Month IN OUT pls_integer, m_Date_m_Day IN OUT pls_integer, m_Time_m_Hour IN OUT pls_integer, m_Time_m_Minute IN OUT pls_integer, m_Time_m_Second IN OUT pls_integer, m_Time_m_100thSec IN OUT pls_integer, m_Time_m_tzHour IN OUT pls_integer, m_Time_m_tzMinute IN OUT pls_integer, ts_m_Date_m_Year pls_integer, ts_m_Date_m_Month pls_integer, ts_m_Date_m_Day pls_integer, ts_m_Time_m_Hour pls_integer, ts_m_Time_m_Minute pls_integer, ts_m_Time_m_Second pls_integer, ts_m_Time_m_100thSec pls_integer, ts_m_Time_m_tzHour pls_integer, ts_m_Time_m_tzMinute pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Timestamp_C_f_ass_timestamp"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_ass_date(m_Date_m_Year IN OUT pls_integer, m_Date_m_Month IN OUT pls_integer, m_Date_m_Day IN OUT pls_integer, m_Time_m_Hour pls_integer, m_Time_m_Minute pls_integer, m_Time_m_Second pls_integer, m_Time_m_100thSec pls_integer, m_Time_m_tzHour pls_integer, m_Time_m_tzMinute pls_integer, d_m_Year pls_integer, d_m_Month pls_integer, d_m_Day pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Timestamp_C_f_ass_date"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_add_interval(m_Date_m_Year IN OUT pls_integer, m_Date_m_Month IN OUT pls_integer, m_Date_m_Day IN OUT pls_integer, m_Time_m_Hour IN OUT pls_integer, m_Time_m_Minute IN OUT pls_integer, m_Time_m_Second IN OUT pls_integer, m_Time_m_100thSec IN OUT pls_integer, m_Time_m_tzHour IN OUT pls_integer, m_Time_m_tzMinute IN OUT pls_integer, i_m_Value double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Timestamp_C_f_add_interval"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_sub_interval(m_Date_m_Year IN OUT pls_integer, m_Date_m_Month IN OUT pls_integer, m_Date_m_Day IN OUT pls_integer, m_Time_m_Hour IN OUT pls_integer, m_Time_m_Minute IN OUT pls_integer, m_Time_m_Second IN OUT pls_integer, m_Time_m_100thSec IN OUT pls_integer, m_Time_m_tzHour IN OUT pls_integer, m_Time_m_tzMinute IN OUT pls_integer, i_m_Value double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Timestamp_C_f_sub_interval"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_add(m_Date_year pls_integer, m_Date_month pls_integer, m_Date_day pls_integer, m_Time_hour pls_integer, m_Time_minute pls_integer, m_Time_second pls_integer, m_Time_hundr_thSec pls_integer, m_Time_tz_hour pls_integer, m_Time_tz_minute pls_integer, ts_year pls_integer, ts_month pls_integer, ts_day pls_integer, ts_hour pls_integer, ts_minute pls_integer, ts_second pls_integer, ts_hundr_thSec pls_integer, ts_tz_hour pls_integer, ts_tz_minute pls_integer, i_m_Value double precision, Year OUT pls_integer, Month OUT pls_integer, Day OUT pls_integer, H OUT pls_integer, M OUT pls_integer, S OUT pls_integer, hundr_thS OUT pls_integer, tz_H OUT pls_integer, tz_M OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Timestamp_C_f_add"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_sub(m_Date_year pls_integer, m_Date_month pls_integer, m_Date_day pls_integer, m_Time_hour pls_integer, m_Time_minute pls_integer, m_Time_second pls_integer, m_Time_hundr_thSec pls_integer, m_Time_tz_hour pls_integer, m_Time_tz_minute pls_integer, ts_year pls_integer, ts_month pls_integer, ts_day pls_integer, ts_hour pls_integer, ts_minute pls_integer, ts_second pls_integer, ts_hundr_thSec pls_integer, ts_tz_hour pls_integer, ts_tz_minute pls_integer, i_m_Value double precision, Year OUT pls_integer, Month OUT pls_integer, Day OUT pls_integer, H OUT pls_integer, M OUT pls_integer, S OUT pls_integer, hundr_thS OUT pls_integer, tz_H OUT pls_integer, tz_M OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Timestamp_C_f_sub"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_eq(m_Date_year pls_integer, m_Date_month pls_integer, m_Date_day pls_integer, m_Time_hour pls_integer, m_Time_minute pls_integer, m_Time_second pls_integer, m_Time_hundr_thSec pls_integer, m_Time_tz_hour pls_integer, m_Time_tz_minute pls_integer, ts1_m_Date_year pls_integer, ts1_m_Date_month pls_integer, ts1_m_Date_day pls_integer, ts1_m_Time_hour pls_integer, ts1_m_Time_minute pls_integer, ts1_m_Time_second pls_integer, ts1_m_Time_hundr_thSec pls_integer, ts1_m_Time_tz_hour pls_integer, ts1_m_Time_tz_minute pls_integer, ts2_m_Date_year pls_integer, ts2_m_Date_month pls_integer, ts2_m_Date_day pls_integer, ts2_m_Time_hour pls_integer, ts2_m_Time_minute pls_integer, ts2_m_Time_second pls_integer, ts2_m_Time_hundr_thSec pls_integer, ts2_m_Time_tz_hour pls_integer, ts2_m_Time_tz_minute pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Timestamp_C_f_eq"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_n_eq(m_Date_year pls_integer, m_Date_month pls_integer, m_Date_day pls_integer, m_Time_hour pls_integer, m_Time_minute pls_integer, m_Time_second pls_integer, m_Time_hundr_thSec pls_integer, m_Time_tz_hour pls_integer, m_Time_tz_minute pls_integer, ts1_m_Date_year pls_integer, ts1_m_Date_month pls_integer, ts1_m_Date_day pls_integer, ts1_m_Time_hour pls_integer, ts1_m_Time_minute pls_integer, ts1_m_Time_second pls_integer, ts1_m_Time_hundr_thSec pls_integer, ts1_m_Time_tz_hour pls_integer, ts1_m_Time_tz_minute pls_integer, ts2_m_Date_year pls_integer, ts2_m_Date_month pls_integer, ts2_m_Date_day pls_integer, ts2_m_Time_hour pls_integer, ts2_m_Time_minute pls_integer, ts2_m_Time_second pls_integer, ts2_m_Time_hundr_thSec pls_integer, ts2_m_Time_tz_hour pls_integer, ts2_m_Time_tz_minute pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Timestamp_C_f_n_eq"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_l(m_Date_year pls_integer, m_Date_month pls_integer, m_Date_day pls_integer, m_Time_hour pls_integer, m_Time_minute pls_integer, m_Time_second pls_integer, m_Time_hundr_thSec pls_integer, m_Time_tz_hour pls_integer, m_Time_tz_minute pls_integer, ts1_m_Date_year pls_integer, ts1_m_Date_month pls_integer, ts1_m_Date_day pls_integer, ts1_m_Time_hour pls_integer, ts1_m_Time_minute pls_integer, ts1_m_Time_second pls_integer, ts1_m_Time_hundr_thSec pls_integer, ts1_m_Time_tz_hour pls_integer, ts1_m_Time_tz_minute pls_integer, ts2_m_Date_year pls_integer, ts2_m_Date_month pls_integer, ts2_m_Date_day pls_integer, ts2_m_Time_hour pls_integer, ts2_m_Time_minute pls_integer, ts2_m_Time_second pls_integer, ts2_m_Time_hundr_thSec pls_integer, ts2_m_Time_tz_hour pls_integer, ts2_m_Time_tz_minute pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Timestamp_C_f_l"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_l_e(m_Date_year pls_integer, m_Date_month pls_integer, m_Date_day pls_integer, m_Time_hour pls_integer, m_Time_minute pls_integer, m_Time_second pls_integer, m_Time_hundr_thSec pls_integer, m_Time_tz_hour pls_integer, m_Time_tz_minute pls_integer, ts1_m_Date_year pls_integer, ts1_m_Date_month pls_integer, ts1_m_Date_day pls_integer, ts1_m_Time_hour pls_integer, ts1_m_Time_minute pls_integer, ts1_m_Time_second pls_integer, ts1_m_Time_hundr_thSec pls_integer, ts1_m_Time_tz_hour pls_integer, ts1_m_Time_tz_minute pls_integer, ts2_m_Date_year pls_integer, ts2_m_Date_month pls_integer, ts2_m_Date_day pls_integer, ts2_m_Time_hour pls_integer, ts2_m_Time_minute pls_integer, ts2_m_Time_second pls_integer, ts2_m_Time_hundr_thSec pls_integer, ts2_m_Time_tz_hour pls_integer, ts2_m_Time_tz_minute pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Timestamp_C_f_l_e"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_b(m_Date_year pls_integer, m_Date_month pls_integer, m_Date_day pls_integer, m_Time_hour pls_integer, m_Time_minute pls_integer, m_Time_second pls_integer, m_Time_hundr_thSec pls_integer, m_Time_tz_hour pls_integer, m_Time_tz_minute pls_integer, ts1_m_Date_year pls_integer, ts1_m_Date_month pls_integer, ts1_m_Date_day pls_integer, ts1_m_Time_hour pls_integer, ts1_m_Time_minute pls_integer, ts1_m_Time_second pls_integer, ts1_m_Time_hundr_thSec pls_integer, ts1_m_Time_tz_hour pls_integer, ts1_m_Time_tz_minute pls_integer, ts2_m_Date_year pls_integer, ts2_m_Date_month pls_integer, ts2_m_Date_day pls_integer, ts2_m_Time_hour pls_integer, ts2_m_Time_minute pls_integer, ts2_m_Time_second pls_integer, ts2_m_Time_hundr_thSec pls_integer, ts2_m_Time_tz_hour pls_integer, ts2_m_Time_tz_minute pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Timestamp_C_f_b"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_b_e(m_Date_year pls_integer, m_Date_month pls_integer, m_Date_day pls_integer, m_Time_hour pls_integer, m_Time_minute pls_integer, m_Time_second pls_integer, m_Time_hundr_thSec pls_integer, m_Time_tz_hour pls_integer, m_Time_tz_minute pls_integer, ts1_m_Date_year pls_integer, ts1_m_Date_month pls_integer, ts1_m_Date_day pls_integer, ts1_m_Time_hour pls_integer, ts1_m_Time_minute pls_integer, ts1_m_Time_second pls_integer, ts1_m_Time_hundr_thSec pls_integer, ts1_m_Time_tz_hour pls_integer, ts1_m_Time_tz_minute pls_integer, ts2_m_Date_year pls_integer, ts2_m_Date_month pls_integer, ts2_m_Date_day pls_integer, ts2_m_Time_hour pls_integer, ts2_m_Time_minute pls_integer, ts2_m_Time_second pls_integer, ts2_m_Time_hundr_thSec pls_integer, ts2_m_Time_tz_hour pls_integer, ts2_m_Time_tz_minute pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Timestamp_C_f_b_e"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_overlaps(m_Date_year pls_integer, m_Date_month pls_integer, m_Date_day pls_integer, m_Time_hour pls_integer, m_Time_minute pls_integer, m_Time_second pls_integer, m_Time_hundr_thSec pls_integer, m_Time_tz_hour pls_integer, m_Time_tz_minute pls_integer, ts1_m_Date_year pls_integer, ts1_m_Date_month pls_integer, ts1_m_Date_day pls_integer, ts1_m_Time_hour pls_integer, ts1_m_Time_minute pls_integer, ts1_m_Time_second pls_integer, ts1_m_Time_hundr_thSec pls_integer, ts1_m_Time_tz_hour pls_integer, ts1_m_Time_tz_minute pls_integer, ts2_m_Date_year pls_integer, ts2_m_Date_month pls_integer, ts2_m_Date_day pls_integer, ts2_m_Time_hour pls_integer, ts2_m_Time_minute pls_integer, ts2_m_Time_second pls_integer, ts2_m_Time_hundr_thSec pls_integer, ts2_m_Time_tz_hour pls_integer, ts2_m_Time_tz_minute pls_integer, ts3_m_Date_year pls_integer, ts3_m_Date_month pls_integer, ts3_m_Date_day pls_integer, ts3_m_Time_hour pls_integer, ts3_m_Time_minute pls_integer, ts3_m_Time_second pls_integer, ts3_m_Time_hundr_thSec pls_integer, ts3_m_Time_tz_hour pls_integer, ts3_m_Time_tz_minute pls_integer, ts4_m_Date_year pls_integer, ts4_m_Date_month pls_integer, ts4_m_Date_day pls_integer, ts4_m_Time_hour pls_integer, ts4_m_Time_minute pls_integer, ts4_m_Time_second pls_integer, ts4_m_Time_hundr_thSec pls_integer, ts4_m_Time_tz_hour pls_integer, ts4_m_Time_tz_minute pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Timestamp_C_overlaps"
        LIBRARY TLL_lib
        WITH CONTEXT;

END;
/

-- End of DDL script for D_TIMESTAMP_PACKAGE

-- Start of DDL script for D_TIME_PACKAGE
-- Generated 5-Nov-00  3:43:24 pm
-- from -PELETLL:1

-- Drop the old instance of D_TIME_PACKAGE

DROP PACKAGE BODY d_time_package
/

-- Package body D_TIME_PACKAGE

CREATE OR REPLACE
PACKAGE BODY D_Time_Package AS

    FUNCTION hour(m_Hour pls_integer, m_Minute pls_integer, m_Second pls_integer, m_100thSec pls_integer, m_tzHour pls_integer, m_tzMinute pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Time_C_hour"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION minute(m_Hour pls_integer, m_Minute pls_integer, m_Second pls_integer, m_100thSec pls_integer, m_tzHour pls_integer, m_tzMinute pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Time_C_minute"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION second(m_Hour pls_integer, m_Minute pls_integer, m_Second pls_integer, m_100thSec pls_integer, m_tzHour pls_integer, m_tzMinute pls_integer) return float
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Time_C_second"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION tz_hour(m_Hour pls_integer, m_Minute pls_integer, m_Second pls_integer, m_100thSec pls_integer, m_tzHour pls_integer, m_tzMinute pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Time_C_tz_hour"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION tz_minute(m_Hour pls_integer, m_Minute pls_integer, m_Second pls_integer, m_100thSec pls_integer, m_tzHour pls_integer, m_tzMinute pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Time_C_tz_minute"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_current(m_Hour pls_integer, m_Minute pls_integer, m_Second pls_integer, m_100thSec pls_integer, m_tzHour pls_integer, m_tzMinute pls_integer, H OUT pls_integer, M OUT pls_integer, S OUT pls_integer, hundr_thS OUT pls_integer, tz_H OUT pls_integer, tz_M OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Time_C_f_current"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION is_valid_time(m_Hour pls_integer, m_Minute pls_integer, m_Second pls_integer, m_100thSec pls_integer, m_tzHour pls_integer, m_tzMinute pls_integer, h pls_integer, m pls_integer, s double precision) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Time_C_is_valid_time"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION is_valid(m_Hour pls_integer, m_Minute pls_integer, m_Second pls_integer, m_100thSec pls_integer, m_tzHour pls_integer, m_tzMinute pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Time_C_is_valid"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_ass_time(m_Hour IN OUT pls_integer, m_Minute IN OUT pls_integer, m_Second IN OUT pls_integer, m_100thSec IN OUT pls_integer, m_tzHour IN OUT pls_integer, m_tzMinute IN OUT pls_integer, t_m_Hour pls_integer, t_m_Minute pls_integer, t_m_Second pls_integer, t_m_100thSec pls_integer, t_m_tzHour pls_integer, t_m_tzMinute pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Time_C_f_ass_time"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_ass_timestamp(m_Hour IN OUT pls_integer, m_Minute IN OUT pls_integer, m_Second IN OUT pls_integer, m_100thSec IN OUT pls_integer, m_tzHour IN OUT pls_integer, m_tzMinute IN OUT pls_integer, ts_m_Hour pls_integer, ts_m_Minute pls_integer, ts_m_Second pls_integer, ts_m_100thSec pls_integer, ts_m_tzHour pls_integer, ts_m_tzMinute pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Time_C_f_ass_timestamp"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_add_interval(m_Hour IN OUT pls_integer, m_Minute IN OUT pls_integer, m_Second IN OUT pls_integer, m_100thSec IN OUT pls_integer, m_tzHour IN OUT pls_integer, m_tzMinute IN OUT pls_integer, i_m_Value double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Time_C_f_add_interval"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_sub_interval(m_Hour IN OUT pls_integer, m_Minute IN OUT pls_integer, m_Second IN OUT pls_integer, m_100thSec IN OUT pls_integer, m_tzHour IN OUT pls_integer, m_tzMinute IN OUT pls_integer,  i_m_Value double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Time_C_f_sub_interval"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_add(m_Hour pls_integer, m_Minute pls_integer, m_Second pls_integer, m_100thSec pls_integer, m_tzHour pls_integer, m_tzMinute pls_integer, t_m_Hour pls_integer, t_m_Minute pls_integer, t_m_Second pls_integer, t_m_100thSec pls_integer, t_m_tzHour pls_integer, t_m_tzMinute pls_integer, i_m_Value double precision, H OUT pls_integer, M OUT pls_integer, S OUT pls_integer, hundr_thS OUT pls_integer, tz_H OUT pls_integer, tz_M OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Time_C_f_add"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_sub_time_from_time(m_Hour pls_integer, m_Minute pls_integer, m_Second pls_integer, m_100thSec pls_integer, m_tzHour pls_integer, m_tzMinute pls_integer, t1_m_Hour pls_integer, t1_m_Minute pls_integer, t1_m_Second pls_integer, t1_m_100thSec pls_integer, t1_m_tzHour pls_integer, t1_m_tzMinute pls_integer, t2_m_Hour pls_integer, t2_m_Minute pls_integer, t2_m_Second pls_integer, t2_m_100thSec pls_integer, t2_m_tzHour pls_integer, t2_m_tzMinute pls_integer, i_Value OUT double precision)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Time_C_f_sub"
        LIBRARY TLL_lib
        WITH CONTEXT;

    PROCEDURE f_sub_interval_from_time(m_Hour pls_integer, m_Minute pls_integer, m_Second pls_integer, m_100thSec pls_integer, m_tzHour pls_integer, m_tzMinute pls_integer, t_m_Hour pls_integer, t_m_Minute pls_integer, t_m_Second pls_integer, t_m_100thSec pls_integer, t_m_tzHour pls_integer, t_m_tzMinute pls_integer, i_m_Value double precision, H OUT pls_integer, M OUT pls_integer, S OUT pls_integer, hundr_thS OUT pls_integer, tz_H OUT pls_integer, tz_M OUT pls_integer)
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Time_C_f_sub2"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_eq(m_Hour pls_integer, m_Minute pls_integer, m_Second pls_integer, m_100thSec pls_integer, m_tzHour pls_integer, m_tzMinute pls_integer, i_m_Hour pls_integer, i_m_Minute pls_integer, i_m_Second pls_integer, i_m_100thSec pls_integer, i_m_tzHour pls_integer, i_m_tzMinute pls_integer, j_m_Hour pls_integer, j_m_Minute pls_integer, j_m_Second pls_integer, j_m_100thSec pls_integer, j_m_tzHour pls_integer, j_m_tzMinute pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Time_C_f_eq"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_n_eq(m_Hour pls_integer, m_Minute pls_integer, m_Second pls_integer, m_100thSec pls_integer, m_tzHour pls_integer, m_tzMinute pls_integer, i_m_Hour pls_integer, i_m_Minute pls_integer, i_m_Second pls_integer, i_m_100thSec pls_integer, i_m_tzHour pls_integer, i_m_tzMinute pls_integer, j_m_Hour pls_integer, j_m_Minute pls_integer, j_m_Second pls_integer, j_m_100thSec pls_integer, j_m_tzHour pls_integer, j_m_tzMinute pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Time_C_f_n_eq"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_l(m_Hour pls_integer, m_Minute pls_integer, m_Second pls_integer, m_100thSec pls_integer, m_tzHour pls_integer, m_tzMinute pls_integer, i_m_Hour pls_integer, i_m_Minute pls_integer, i_m_Second pls_integer, i_m_100thSec pls_integer, i_m_tzHour pls_integer, i_m_tzMinute pls_integer, j_m_Hour pls_integer, j_m_Minute pls_integer, j_m_Second pls_integer, j_m_100thSec pls_integer, j_m_tzHour pls_integer, j_m_tzMinute pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Time_C_f_l"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_l_e(m_Hour pls_integer, m_Minute pls_integer, m_Second pls_integer, m_100thSec pls_integer, m_tzHour pls_integer, m_tzMinute pls_integer, i_m_Hour pls_integer, i_m_Minute pls_integer, i_m_Second pls_integer, i_m_100thSec pls_integer, i_m_tzHour pls_integer, i_m_tzMinute pls_integer, j_m_Hour pls_integer, j_m_Minute pls_integer, j_m_Second pls_integer, j_m_100thSec pls_integer, j_m_tzHour pls_integer, j_m_tzMinute pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Time_C_f_l_e"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_b(m_Hour pls_integer, m_Minute pls_integer, m_Second pls_integer, m_100thSec pls_integer, m_tzHour pls_integer, m_tzMinute pls_integer, i_m_Hour pls_integer, i_m_Minute pls_integer, i_m_Second pls_integer, i_m_100thSec pls_integer, i_m_tzHour pls_integer, i_m_tzMinute pls_integer, j_m_Hour pls_integer, j_m_Minute pls_integer, j_m_Second pls_integer, j_m_100thSec pls_integer, j_m_tzHour pls_integer, j_m_tzMinute pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Time_C_f_b"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_b_e(m_Hour pls_integer, m_Minute pls_integer, m_Second pls_integer, m_100thSec pls_integer, m_tzHour pls_integer, m_tzMinute pls_integer, i_m_Hour pls_integer, i_m_Minute pls_integer, i_m_Second pls_integer, i_m_100thSec pls_integer, i_m_tzHour pls_integer, i_m_tzMinute pls_integer, j_m_Hour pls_integer, j_m_Minute pls_integer, j_m_Second pls_integer, j_m_100thSec pls_integer, j_m_tzHour pls_integer, j_m_tzMinute pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Time_C_f_b_e"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_overlaps(m_Hour pls_integer, m_Minute pls_integer, m_Second pls_integer, m_100thSec pls_integer, m_tzHour pls_integer, m_tzMinute pls_integer, t1_m_Hour pls_integer, t1_m_Minute pls_integer, t1_m_Second pls_integer, t1_m_100thSec pls_integer, t1_m_tzHour pls_integer, t1_m_tzMinute pls_integer, t2_m_Hour pls_integer, t2_m_Minute pls_integer, t2_m_Second pls_integer, t2_m_100thSec pls_integer, t2_m_tzHour pls_integer, t2_m_tzMinute pls_integer, t3_m_Hour pls_integer, t3_m_Minute pls_integer, t3_m_Second pls_integer, t3_m_100thSec pls_integer, t3_m_tzHour pls_integer, t3_m_tzMinute pls_integer, t4_m_Hour pls_integer, t4_m_Minute pls_integer, t4_m_Second pls_integer, t4_m_100thSec pls_integer, t4_m_tzHour pls_integer, t4_m_tzMinute pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Time_C_overlaps"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_timestamp_overlaps(m_Hour pls_integer, m_Minute pls_integer, m_Second pls_integer, m_100thSec pls_integer, m_tzHour pls_integer, m_tzMinute pls_integer, ts1_m_Hour pls_integer, ts1_m_Minute pls_integer, ts1_m_Second pls_integer, ts1_m_100thSec pls_integer, ts1_m_tzHour pls_integer, ts1_m_tzMinute pls_integer, ts2_m_Hour pls_integer, ts2_m_Minute pls_integer, ts2_m_Second pls_integer, ts2_m_100thSec pls_integer, ts2_m_tzHour pls_integer, ts2_m_tzMinute pls_integer, t1_m_Hour pls_integer, t1_m_Minute pls_integer, t1_m_Second pls_integer, t1_m_100thSec pls_integer, t1_m_tzHour pls_integer, t1_m_tzMinute pls_integer, t2_m_Hour pls_integer, t2_m_Minute pls_integer, t2_m_Second pls_integer, t2_m_100thSec pls_integer, t2_m_tzHour pls_integer, t2_m_tzMinute pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Time_C_timestamp_overlaps"
        LIBRARY TLL_lib
        WITH CONTEXT;

    FUNCTION f_time_overlaps(m_Hour pls_integer, m_Minute pls_integer, m_Second pls_integer, m_100thSec pls_integer, m_tzHour pls_integer, m_tzMinute pls_integer, t1_m_Hour pls_integer, t1_m_Minute pls_integer, t1_m_Second pls_integer, t1_m_100thSec pls_integer, t1_m_tzHour pls_integer, t1_m_tzMinute pls_integer, t2_m_Hour pls_integer, t2_m_Minute pls_integer, t2_m_Second pls_integer, t2_m_100thSec pls_integer, t2_m_tzHour pls_integer, t2_m_tzMinute pls_integer, ts1_m_Hour pls_integer, ts1_m_Minute pls_integer, ts1_m_Second pls_integer, ts1_m_100thSec pls_integer, ts1_m_tzHour pls_integer, ts1_m_tzMinute pls_integer, ts2_m_Hour pls_integer, ts2_m_Minute pls_integer, ts2_m_Second pls_integer, ts2_m_100thSec pls_integer, ts2_m_tzHour pls_integer, ts2_m_tzMinute pls_integer) return pls_integer
    IS  EXTERNAL
        LANGUAGE C
        NAME "D_Time_C_time_overlaps"
        LIBRARY TLL_lib
        WITH CONTEXT;

END;
/

-- End of DDL script for D_TIME_PACKAGE

--                                          O B J E C T      T Y P E S

-- DROP DUMMY OBJECT TABLES

drop table timestamps
/
drop table periods_y
/
drop table periods_m
/
drop table periods_d
/
drop table periods_h
/
drop table periods_min
/
drop table periods_sec
/
drop table temp_elements_y
/
drop table temp_elements_m
/
drop table temp_elements_d
/
drop table temp_elements_h
/
drop table temp_elements_min
/
drop table temp_elements_sec
/

-- DROP OBJECT TYPES

drop  function return_temporal_element_y
/
drop  function return_temporal_element_m
/
drop  function return_temporal_element_d
/
drop  function return_temporal_element_h
/
drop  function return_temporal_element_min
/
drop  function return_temporal_element_sec
/
drop  type D_Temp_Element_Y force
/
drop  type D_Temp_Element_M force
/
drop  type D_Temp_Element_D force
/
drop  type D_Temp_Element_H force
/
drop  type D_Temp_Element_Min force
/
drop  type D_Temp_Element_Sec force
/
drop  type Temp_Element_Y force
/
drop  type Temp_Element_M force
/
drop  type Temp_Element_D force
/
drop  type Temp_Element_H force
/
drop  type Temp_Element_Min force
/
drop  type Temp_Element_Sec force
/
drop  type D_Period_Y force
/
drop  type D_Period_M force
/
drop  type D_Period_D force
/
drop  type D_Period_H force
/
drop  type D_Period_Min force
/
drop  type D_Period_Sec force
/
drop  type D_Timepoint_Y force
/
drop  type D_Timepoint_M force
/
drop  type D_Timepoint_D force
/
drop  type D_Timepoint_H force
/
drop  type D_Timepoint_Min force
/
drop  type D_Timepoint_Sec force
/
drop  type D_Timestamp force
/
drop  type D_Time force
/
drop  type D_Date force
/
drop  type D_Interval force
/

-- CREATE DUMMY OBJECT TYPES

CREATE TYPE D_Temp_Element_Y;
/
CREATE TYPE D_Temp_Element_M;
/
CREATE TYPE D_Temp_Element_D;
/
CREATE TYPE D_Temp_Element_H;
/
CREATE TYPE D_Temp_Element_Min;
/
CREATE TYPE D_Temp_Element_Sec;
/
CREATE TYPE D_Period_Y;
/
CREATE TYPE D_Period_M;
/
CREATE TYPE D_Period_D;
/
CREATE TYPE D_Period_H;
/
CREATE TYPE D_Period_Min;
/
CREATE TYPE D_Period_Sec;
/
CREATE TYPE D_Timepoint_Y;
/
CREATE TYPE D_Timepoint_M;
/
CREATE TYPE D_Timepoint_D;
/
CREATE TYPE D_Timepoint_H;
/
CREATE TYPE D_Timepoint_Min;
/
CREATE TYPE D_Timepoint_Sec;
/
CREATE TYPE D_Timestamp;
/
CREATE TYPE D_Time;
/
CREATE TYPE D_Date;
/
CREATE TYPE D_Interval;
/

-- Type D_INTERVAL

CREATE OR REPLACE
type D_Interval as object
(
   m_Value double precision,

   MEMBER FUNCTION day return double precision,
   MEMBER FUNCTION hour return pls_integer,
   MEMBER FUNCTION minute return pls_integer,
   MEMBER FUNCTION second return double precision,
   MEMBER FUNCTION is_zero return pls_integer,
   MEMBER FUNCTION to_string return varchar2,

   MEMBER PROCEDURE f_ass(i D_Interval),
   MEMBER PROCEDURE f_add_to_self(i D_Interval),
   MEMBER PROCEDURE f_sub_to_self(i D_Interval),
   MEMBER PROCEDURE f_mul_to_self(i pls_integer),
   MEMBER PROCEDURE f_div_to_self(i pls_integer),
   MEMBER PROCEDURE f_min,

   MEMBER FUNCTION f_add(i D_Interval, j D_Interval) return D_Interval,
   MEMBER FUNCTION f_sub(i D_Interval, j D_Interval) return D_Interval,
   MEMBER FUNCTION f_mul(i D_Interval, j pls_integer) return D_Interval,
   MEMBER FUNCTION f_div(i D_Interval, j pls_integer) return D_Interval,
   MEMBER FUNCTION f_eq(i D_Interval, j D_Interval) return pls_integer,
   MEMBER FUNCTION f_n_eq(i D_Interval, j D_Interval) return pls_integer,
   MEMBER FUNCTION f_l(i D_Interval, j D_Interval) return pls_integer,
   MEMBER FUNCTION f_l_e(i D_Interval, j D_Interval) return pls_integer,
   MEMBER FUNCTION f_b(i D_Interval, j D_Interval) return pls_integer,
   MEMBER FUNCTION f_b_e(i D_Interval, j D_Interval) return pls_integer

);
/

-- Type D_DATE

CREATE OR REPLACE
type D_Date as object
(
   m_Year integer,
   m_Month integer,
   m_Day integer,

   MEMBER FUNCTION year return pls_integer,
   MEMBER FUNCTION month return pls_integer,
   MEMBER FUNCTION day return pls_integer,
   MEMBER FUNCTION day_of_year return pls_integer,
   MEMBER FUNCTION day_of_week return pls_integer,
   MEMBER FUNCTION month_of_year return pls_integer,
   MEMBER FUNCTION f_current return D_Date,
   MEMBER FUNCTION f_next(week_day pls_integer) return D_Date,
   MEMBER FUNCTION f_previous(week_day pls_integer) return D_Date,

   MEMBER FUNCTION is_between(b D_Date, e D_Date) return pls_integer,
   MEMBER FUNCTION is_leap_year return pls_integer,
   MEMBER FUNCTION is_leap_year(y pls_integer) return pls_integer,
   MEMBER FUNCTION days_in_year return pls_integer,
   MEMBER FUNCTION days_in_year(y pls_integer) return pls_integer,
   MEMBER FUNCTION days_in_month return pls_integer,
   MEMBER FUNCTION days_in_month(y pls_integer, m pls_integer) return pls_integer,
   MEMBER FUNCTION is_valid_date(y pls_integer, m pls_integer, d pls_integer) return pls_integer,
   MEMBER FUNCTION is_valid return pls_integer,
   MEMBER FUNCTION day_of_the_year(y pls_integer, m pls_integer, d pls_integer) return pls_integer,
   MEMBER FUNCTION julian_day(y pls_integer, m pls_integer, d pls_integer) return double precision,
   MEMBER FUNCTION julian_to_gregorian(JD double precision) return D_Date,
   MEMBER FUNCTION getAbsDate return double precision,
   MEMBER FUNCTION setAbsDate(num_of_days double precision) return D_Date,
   MEMBER FUNCTION Easter(year pls_integer) return D_Date,

   MEMBER PROCEDURE f_ass_date(d D_Date),
   MEMBER PROCEDURE f_ass_timestamp(tsp REF D_Timestamp),
   MEMBER PROCEDURE f_add_interval(i D_Interval),
   MEMBER PROCEDURE f_add_days(i pls_integer),
   MEMBER PROCEDURE f_incr,
   MEMBER PROCEDURE f_sub_interval(i D_Interval),
   MEMBER PROCEDURE f_sub_days(i pls_integer),
   MEMBER PROCEDURE f_decr,

   MEMBER FUNCTION f_add(d D_Date, i D_Interval) return D_Date,
   MEMBER FUNCTION f_sub(d1 D_Date, d2 D_Date) return D_Interval,
   MEMBER FUNCTION f_sub(d D_Date, i D_Interval) return D_Date,
   MEMBER FUNCTION f_eq(i D_Date, j D_Date) return pls_integer,
   MEMBER FUNCTION f_n_eq(i D_Date, j D_Date) return pls_integer,
   MEMBER FUNCTION f_l(i D_Date, j D_Date) return pls_integer,
   MEMBER FUNCTION f_l_e(i D_Date, j D_Date) return pls_integer,
   MEMBER FUNCTION f_b(i D_Date, j D_Date) return pls_integer,
   MEMBER FUNCTION f_b_e(i D_Date, j D_Date) return pls_integer,
   MEMBER FUNCTION f_overlaps(d1 D_Date, d2 D_Date, d3 D_Date, d4 D_Date) return pls_integer,
   MEMBER FUNCTION f_timestamp_overlaps(tsp1 REF D_Timestamp, tsp2 REF D_Timestamp, d1 D_Date, d2 D_Date) return pls_integer,
   MEMBER FUNCTION f_date_overlaps(d1 D_Date, d2 D_Date, tsp1 REF D_Timestamp, tsp2 REF D_Timestamp) return pls_integer

);
/

-- Type D_TIME

CREATE OR REPLACE
type D_Time as object
(
   m_Hour integer,
   m_Minute integer,
   m_Second integer,
   m_100thSec integer,
   m_tzHour integer,
   m_tzMinute integer,

   MEMBER FUNCTION hour  return pls_integer,
   MEMBER FUNCTION minute  return pls_integer,
   MEMBER FUNCTION second  return float,
   MEMBER FUNCTION hundr_thSec return pls_integer,
   MEMBER FUNCTION tz_hour  return pls_integer,
   MEMBER FUNCTION tz_minute  return pls_integer,

   MEMBER FUNCTION f_current return D_Time,
   MEMBER FUNCTION is_valid_time (h pls_integer, m pls_integer, s float) return pls_integer,
   MEMBER FUNCTION is_valid return pls_integer,

   MEMBER PROCEDURE f_ass_time(t D_Time),
   MEMBER PROCEDURE f_ass_timestamp(tsp REF D_Timestamp),
   MEMBER PROCEDURE f_add_interval(i D_Interval),
   MEMBER PROCEDURE f_sub_interval(i D_Interval),

   MEMBER FUNCTION f_add(t D_Time, i D_Interval) return D_Time,
   MEMBER FUNCTION f_sub(t1 D_Time, t2 D_Time) return D_Interval,
   MEMBER FUNCTION f_sub(t D_Time, i D_Interval) return D_Time,
   MEMBER FUNCTION f_eq(i D_Time, j D_Time) return pls_integer,
   MEMBER FUNCTION f_n_eq(i D_Time, j D_Time) return pls_integer,
   MEMBER FUNCTION f_l(i D_Time, j D_Time) return pls_integer,
   MEMBER FUNCTION f_l_e(i D_Time, j D_Time) return pls_integer,
   MEMBER FUNCTION f_b(i D_Time, j D_Time) return pls_integer,
   MEMBER FUNCTION f_b_e(i D_Time, j D_Time) return pls_integer,
   MEMBER FUNCTION f_overlaps(t1 D_Time, t2 D_Time, t3 D_Time, t4 D_Time) return pls_integer,
   MEMBER FUNCTION f_timestamp_overlaps(tsp1 REF D_Timestamp, tsp2 REF D_Timestamp, t1 D_Time, t2 D_Time) return pls_integer,
   MEMBER FUNCTION f_time_overlaps(t1 D_Time, t2 D_Time, tsp1 REF D_Timestamp, tsp2 REF D_Timestamp) return pls_integer

);
/

-- Type D_TIMESTAMP

CREATE OR REPLACE
type D_Timestamp as object
(
    m_Date D_Date,
    m_Time D_Time,

    --Return the Date property of the Timestamp object.
    MEMBER FUNCTION f_date return D_Date,
    --Return the Time property of the Timestamp object.
    MEMBER FUNCTION f_time return D_Time,
    --Returns the number corresponding to the year.
    MEMBER FUNCTION year return pls_integer,
    --Returns the number corresponding to the month.
    MEMBER FUNCTION month return pls_integer,
    --Returns the number corresponding to the day.
    MEMBER FUNCTION day return pls_integer,
    --Returns the number corresponding to the hour.
    MEMBER FUNCTION hour return pls_integer,
    --Returns the number corresponding to the minute.
    MEMBER FUNCTION minute return pls_integer,
    --Returns the number corresponding to the second.
    MEMBER FUNCTION second return float,
    --Returns the number corresponding to the 100thSec.
    MEMBER FUNCTION hundr_thSec return pls_integer,
    --Returns the number corresponding to the local timezone hour.
    MEMBER FUNCTION tz_hour return pls_integer,
    --Returns the number corresponding to the local timezone minute.
    MEMBER FUNCTION tz_minute return pls_integer,
    --Returns a Timestamp object representing the current system date and time.
    MEMBER FUNCTION f_current return D_Timestamp,
    --Assigns the value of another Timestamp to the Timestamp object.
    MEMBER PROCEDURE f_ass_timestamp (ts D_Timestamp ),
    --Assigns the value of a Date object to the date property of the Timestamp object.
    MEMBER PROCEDURE f_ass_date (d D_Date),
    --Increments the value of the Timestamp object by a specified Interval.
    MEMBER PROCEDURE f_add_interval (i D_Interval),
    --Decrements the value of the Timestamp object by a specified Interval.
    MEMBER PROCEDURE f_sub_interval (i D_Interval),
    --Adds an Interval to the Timestamp value.
    MEMBER FUNCTION f_add (ts D_Timestamp, i D_Interval) return D_Timestamp,
    --Subtracts an Interval from the Timestamp value.
    MEMBER FUNCTION f_sub (ts D_Timestamp, i D_Interval) return D_Timestamp,
    --Returns true if the Timestamps have the same value.
    MEMBER FUNCTION f_eq (ts1 D_Timestamp, ts2 D_Timestamp) return pls_integer,
    --Returns true if the Timestamps have different value.
    MEMBER FUNCTION f_n_eq (ts1 D_Timestamp, ts2 D_Timestamp) return pls_integer,
    --Returns true if the first Timestamp is less than the second.
    MEMBER FUNCTION f_l (ts1 D_Timestamp, ts2 D_Timestamp) return pls_integer,
    --Returns true if the first Timestamp is less or equal to the second.
    MEMBER FUNCTION f_l_e (ts1 D_Timestamp, ts2 D_Timestamp) return pls_integer,
    --Returns true if the first Timestamp is greater than the second.
    MEMBER FUNCTION f_b (ts1 D_Timestamp, ts2 D_Timestamp) return pls_integer,
    --Returns true if the first Timestamp is greater or equal to the second.
    MEMBER FUNCTION f_b_e (ts1 D_Timestamp, ts2 D_Timestamp) return pls_integer,
    --Returns true if the period formed by the first two parameters overlaps the period formed by the other two.
    MEMBER FUNCTION f_overlaps (ts1 D_Timestamp, ts2 D_Timestamp, ts3 D_Timestamp, ts4 D_Timestamp) return pls_integer

);
/

-- Type D_TIMEPOINT_Y

CREATE OR REPLACE
type D_Timepoint_Y as object
(
    m_y integer,

    --Changes the status of the Timepoint object
    MEMBER PROCEDURE change_status(special_value pls_integer),
    --Returns the year for the Timepoint object.
    MEMBER FUNCTION year return pls_integer,
    --Returns the Granularity of the Timepoint object.
    MEMBER FUNCTION get_granularity return pls_integer,
    --Returns a long number equal to the number of seconds since the begin of the calendar, representing the value of the Timepoint object.
    MEMBER FUNCTION get_Abs_Date return double precision,
    --Sets the year for the Timepoint object.
    MEMBER PROCEDURE set_year(year pls_integer),
    --Sets the value of the Timepoint object using a long number representing the number of seconds since the begin of the calendar.
    MEMBER PROCEDURE set_Abs_Date(d double precision),
    --Converts the Timepoint object to a Period object.
    MEMBER FUNCTION to_period return REF D_Period_Y,
    --Converts the Timepoint object to a Temporal Element object.
    MEMBER FUNCTION to_temporal_element return REF D_Temp_Element_Y,
    --Creates a string for the Timepoint object in ISO 8601 format.
    MEMBER FUNCTION to_string return Varchar2,
    --Returns true if the year of the Timepoint object is a Leap year.
    MEMBER FUNCTION is_Leap_Year return pls_integer,
    --Returns true if parameter year is a Leap year.
    MEMBER FUNCTION is_Leap_Year(year pls_integer) return pls_integer,
    --Assigns the value of a Timestamp object to the Timepoint object.
    MEMBER PROCEDURE f_ass_timestamp(ts D_Timestamp),
    --Assigns the value of another Timepoint to the Timepoint object.
    MEMBER PROCEDURE f_ass_timepoint(tp D_Timepoint_Y),
    --Adds an Interval to the Timepoint object.
    MEMBER PROCEDURE f_add_interval(i D_Interval),
    --Subtracts an Interval from the Timepoint object.
    MEMBER PROCEDURE f_sub_interval(i D_Interval),
    --Increments the Timepoint object by one granule (Prefix operator).
    MEMBER PROCEDURE f_incr,
    --Decrements the Timepoint object by one granule (Prefix operator).
    MEMBER PROCEDURE f_decr,
    --Returns a Timepoint object representing the sum of an Timepoint object plus a Interval object.
    MEMBER FUNCTION f_add(tp D_Timepoint_Y, i D_Interval)return D_Timepoint_Y,
    --Returns a Timepoint object representing the subtraction of an Interval object from a Timepoint object.
    MEMBER FUNCTION f_sub(tp D_Timepoint_Y, i D_Interval) return D_Timepoint_Y,
    --Returns a Period object representing the intersection between two Timepoints.
    MEMBER FUNCTION intersects(tp1 D_Timepoint_Y, tp2 D_Timepoint_Y) return REF D_Period_Y,
    --Returns a Period object representing the intersection between a Timepoint and a Period.
    MEMBER FUNCTION intersects(tp D_Timepoint_Y, p_y REF D_Period_Y) return REF D_Period_Y,
    --Returns a Temporal Element object representing the intersection between a Timepoint and a Temporal Element.
    MEMBER FUNCTION intersects(tp D_Timepoint_Y, te REF D_Temp_Element_Y) return REF D_Temp_Element_Y,
    --Returns true if the Timepoints have the same value.
    MEMBER FUNCTION f_eq(tp1 D_Timepoint_Y, tp2 D_Timepoint_Y) return pls_integer,
    --Returns true if the Timepoints have different value.
    MEMBER FUNCTION f_n_eq(tp1 D_Timepoint_Y, tp2 D_Timepoint_Y) return pls_integer,
    --Returns true if the first Timepoint is less than the second.
    MEMBER FUNCTION f_l(tp1 D_Timepoint_Y, tp2 D_Timepoint_Y) return pls_integer,
    --Returns true if the first Timepoint is less or equal to the second.
    MEMBER FUNCTION f_l_e(tp1 D_Timepoint_Y, tp2 D_Timepoint_Y) return pls_integer,
    --Returns true if the first Timepoint is greater than the second.
    MEMBER FUNCTION f_b(tp1 D_Timepoint_Y, tp2 D_Timepoint_Y) return pls_integer,
    --Returns true if the first Timepoint is greater or equal to the second.
    MEMBER FUNCTION f_b_e(tp1 D_Timepoint_Y, tp2 D_Timepoint_Y) return pls_integer,
    --Returns the Interval between two Timepoints.
    MEMBER FUNCTION f_diff(tp1 D_Timepoint_Y, tp2 D_Timepoint_Y) return D_Interval,
    --Returns true if the Timepoint is equal to the Timestamp.
    MEMBER FUNCTION f_eq(tp D_Timepoint_Y, ts D_Timestamp) return pls_integer,
    --Returns true if the Timepoint is different from the Timestamp.
    MEMBER FUNCTION f_n_eq(tp D_Timepoint_Y, ts D_Timestamp) return pls_integer,
    --Returns true if the Timepoint is less than the Timestamp.
    MEMBER FUNCTION f_l(tp D_Timepoint_Y, ts D_Timestamp) return pls_integer,
    --Returns true if the Timepoint is less or equal to the Timestamp.
    MEMBER FUNCTION f_l_e(tp D_Timepoint_Y, ts D_Timestamp) return pls_integer,
    --Returns true if the Timepoint is greater than the Timestamp.
    MEMBER FUNCTION f_b(tp D_Timepoint_Y, ts D_Timestamp) return pls_integer,
    --Returns true if the Timepoint is greater or equal to the Timestamp.
    MEMBER FUNCTION f_b_e(tp D_Timepoint_Y, ts D_Timestamp) return pls_integer,
    --Returns true if two Timepoints overlap.
    MEMBER FUNCTION f_overlaps(tp1 D_Timepoint_Y, tp2 D_Timepoint_Y) return pls_integer,
    --Returns true if the first Timepoint precedes the second Timepoint.
    MEMBER FUNCTION f_precedes(tp1 D_Timepoint_Y, tp2 D_Timepoint_Y) return pls_integer,
    --Returns true if the first Timepoint meets the second Timepoint.
    MEMBER FUNCTION f_meets(tp1 D_Timepoint_Y, tp2 D_Timepoint_Y) return pls_integer,
    --Returns true if the first Timepoint is equal to the second Timepoint.
    MEMBER FUNCTION f_equal(tp1 D_Timepoint_Y, tp2 D_Timepoint_Y) return pls_integer,
    --Returns true if the first Timepoint contains the second Timepoint.
    MEMBER FUNCTION f_contains(tp1 D_Timepoint_Y, tp2 D_Timepoint_Y) return pls_integer,
    --Returns true if the Timepoint overlaps the Period.
    MEMBER FUNCTION f_overlaps(tp D_Timepoint_Y, p_y REF D_Period_Y) return pls_integer,
    --Returns true if the Timepoint precedes the Period.
    MEMBER FUNCTION f_precedes(tp D_Timepoint_Y, p_y REF D_Period_Y) return pls_integer,
    --Returns true if the Timepoint meets the Period.
    MEMBER FUNCTION f_meets(tp D_Timepoint_Y, p_y REF D_Period_Y) return pls_integer,
    --Returns true if the Timepoint is equal to the Period.
    MEMBER FUNCTION f_equal(tp D_Timepoint_Y, p_y REF D_Period_Y) return pls_integer,
    --Returns true if the Timepoint contains the Period.
    MEMBER FUNCTION f_contains(tp D_Timepoint_Y, p_y REF D_Period_Y) return pls_integer,
    --Returns true if the Timepoint overlaps the Temporal Element.
    MEMBER FUNCTION f_overlaps(tp D_Timepoint_Y, te REF D_Temp_Element_Y) return pls_integer,
    --Returns true if the Timepoint precedes the Temporal Element.
    MEMBER FUNCTION f_precedes(tp D_Timepoint_Y, te REF D_Temp_Element_Y) return pls_integer,
    --Returns true if the Timepoint meets the Temporal Element.
    MEMBER FUNCTION f_meets(tp D_Timepoint_Y, te REF D_Temp_Element_Y) return pls_integer,
    --Returns true if the Timepoint is equal to the Temporal Element.
    MEMBER FUNCTION f_equal(tp D_Timepoint_Y, te REF D_Temp_Element_Y) return pls_integer,
    --Returns true if the Timepoint contains the Temporal Element.
    MEMBER FUNCTION f_contains(tp D_Timepoint_Y, te REF D_Temp_Element_Y) return pls_integer,
    --Returns true if the Period constructed using the first two Timepoints overlaps the Period constructed using the other two Timepoints.
    MEMBER FUNCTION f_overlaps(tp1 D_Timepoint_Y, tp2 D_Timepoint_Y, tp3 D_Timepoint_Y, tp4 D_Timepoint_Y) return pls_integer

);
/

-- Type D_TIMEPOINT_M

CREATE OR REPLACE
type D_Timepoint_M as object
(
    m_y integer,
    m_m integer,

    --Changes the status of the Timepoint object
    MEMBER PROCEDURE change_status(special_value pls_integer),
    --Returns the year for the Timepoint object.
    MEMBER FUNCTION year return pls_integer,
    --Returns the month for the Timepoint object .
    MEMBER FUNCTION month return pls_integer,
    --Returns the Granularity of the Timepoint object.
    MEMBER FUNCTION get_granularity return pls_integer,
    --Returns a long number equal to the number of seconds since the begin of the calendar, representing the value of the Timepoint object.
    MEMBER FUNCTION get_Abs_Date return double precision,
    --Sets the year for the Timepoint object.
    MEMBER PROCEDURE set_year(year pls_integer),
    --Sets the month for the Timepoint object.
    MEMBER PROCEDURE set_month(month pls_integer),
    --Sets the value of the Timepoint object using a long number representing the number of seconds since the begin of the calendar.
    MEMBER PROCEDURE set_Abs_Date(d double precision),
    --Converts the Timepoint object to a Period object.
    MEMBER FUNCTION to_period return REF D_Period_M,
    --Converts the Timepoint object to a Temporal Element object.
    MEMBER FUNCTION to_temporal_element return REF D_Temp_Element_M,
    --Creates a string for the Timepoint object in ISO 8601 format.
    MEMBER FUNCTION to_string return Varchar2,
    --Returns true if the year of the Timepoint object is a Leap year.
    MEMBER FUNCTION is_Leap_Year return pls_integer,
    --Returns true if parameter year is a Leap year.
    MEMBER FUNCTION is_Leap_Year(year pls_integer) return pls_integer,
    --Returns the number of days in the month of the Timepoint object.
    MEMBER FUNCTION days_in_month return pls_integer,
    --Assigns the value of a Timestamp object to the Timepoint object.
    MEMBER PROCEDURE f_ass_timestamp(ts D_Timestamp),
    --Assigns the value of another Timepoint to the Timepoint object.
    MEMBER PROCEDURE f_ass_timepoint(tp D_Timepoint_M),
    --Adds an Interval to the Timepoint object.
    MEMBER PROCEDURE f_add_interval(i D_Interval),
    --Subtracts an Interval from the Timepoint object.
    MEMBER PROCEDURE f_sub_interval(i D_Interval),
    --Increments the Timepoint object by one granule.
    MEMBER PROCEDURE f_incr,
    --Decrements the Timepoint object by one granule.
    MEMBER PROCEDURE f_decr,
    --Returns a Timepoint object representing the sum of an Timepoint object plus a Interval object.
    MEMBER FUNCTION f_add(tp D_Timepoint_M, i D_Interval)return D_Timepoint_M,
    --Returns a Timepoint object representing the subtraction of an Interval object from a Timepoint object.
    MEMBER FUNCTION f_sub(tp D_Timepoint_M, i D_Interval) return D_Timepoint_M,
    --Returns a Period object representing the intersection between two Timepoints.
    MEMBER FUNCTION intersects(tp1 D_Timepoint_M, tp2 D_Timepoint_M) return REF D_Period_M,
    --Returns a Period object representing the intersection between a Timepoint and a Period.
    MEMBER FUNCTION intersects(tp D_Timepoint_M, p_m REF D_Period_M) return REF D_Period_M,
    --Returns a Temporal Element object representing the intersection between a Timepoint and a Temporal Element.
    MEMBER FUNCTION intersects(tp D_Timepoint_M, te REF D_Temp_Element_M) return REF D_Temp_Element_M,
    --Returns true if the Timepoints have the same value.
    MEMBER FUNCTION f_eq(tp1 D_Timepoint_M, tp2 D_Timepoint_M) return pls_integer,
    --Returns true if the Timepoints have different value.
    MEMBER FUNCTION f_n_eq(tp1 D_Timepoint_M, tp2 D_Timepoint_M) return pls_integer,
    --Returns true if the first Timepoint is less than the second.
    MEMBER FUNCTION f_l(tp1 D_Timepoint_M, tp2 D_Timepoint_M) return pls_integer,
    --Returns true if the first Timepoint is less or equal to the second.
    MEMBER FUNCTION f_l_e(tp1 D_Timepoint_M, tp2 D_Timepoint_M) return pls_integer,
    --Returns true if the first Timepoint is greater than the second.
    MEMBER FUNCTION f_b(tp1 D_Timepoint_M, tp2 D_Timepoint_M) return pls_integer,
    --Returns true if the first Timepoint is greater or equal to the second.
    MEMBER FUNCTION f_b_e(tp1 D_Timepoint_M, tp2 D_Timepoint_M) return pls_integer,
    --Returns the Interval between two Timepoints.
    MEMBER FUNCTION f_diff(tp1 D_Timepoint_M, tp2 D_Timepoint_M) return D_Interval,
    --Returns true if the Timepoint is equal to the Timestamp.
    MEMBER FUNCTION f_eq(tp D_Timepoint_M, ts D_Timestamp) return pls_integer,
    --Returns true if the Timepoint is different from the Timestamp.
    MEMBER FUNCTION f_n_eq(tp D_Timepoint_M, ts D_Timestamp) return pls_integer,
    --Returns true if the Timepoint is less than the Timestamp.
    MEMBER FUNCTION f_l(tp D_Timepoint_M, ts D_Timestamp) return pls_integer,
    --Returns true if the Timepoint is less or equal to the Timestamp.
    MEMBER FUNCTION f_l_e(tp D_Timepoint_M, ts D_Timestamp) return pls_integer,
    --Returns true if the Timepoint is greater than the Timestamp.
    MEMBER FUNCTION f_b(tp D_Timepoint_M, ts D_Timestamp) return pls_integer,
    --Returns true if the Timepoint is greater or equal to the Timestamp.
    MEMBER FUNCTION f_b_e(tp D_Timepoint_M, ts D_Timestamp) return pls_integer,
    --Returns true if two Timepoints overlap.
    MEMBER FUNCTION f_overlaps(tp1 D_Timepoint_M, tp2 D_Timepoint_M) return pls_integer,
    --Returns true if the first Timepoint precedes the second Timepoint.
    MEMBER FUNCTION f_precedes(tp1 D_Timepoint_M, tp2 D_Timepoint_M) return pls_integer,
    --Returns true if the first Timepoint meets the second Timepoint.
    MEMBER FUNCTION f_meets(tp1 D_Timepoint_M, tp2 D_Timepoint_M) return pls_integer,
    --Returns true if the first Timepoint is equal to the second Timepoint.
    MEMBER FUNCTION f_equal(tp1 D_Timepoint_M, tp2 D_Timepoint_M) return pls_integer,
    --Returns true if the first Timepoint contains the second Timepoint.
    MEMBER FUNCTION f_contains(tp1 D_Timepoint_M, tp2 D_Timepoint_M) return pls_integer,
    --Returns true if the Timepoint overlaps the Period.
    MEMBER FUNCTION f_overlaps(tp D_Timepoint_M, p_m REF D_Period_M) return pls_integer,
    --Returns true if the Timepoint precedes the Period.
    MEMBER FUNCTION f_precedes(tp D_Timepoint_M, p_m REF D_Period_M) return pls_integer,
    --Returns true if the Timepoint meets the Period.
    MEMBER FUNCTION f_meets(tp D_Timepoint_M, p_m REF D_Period_M) return pls_integer,
    --Returns true if the Timepoint is equal to the Period.
    MEMBER FUNCTION f_equal(tp D_Timepoint_M, p_m REF D_Period_M) return pls_integer,
    --Returns true if the Timepoint contains the Period.
    MEMBER FUNCTION f_contains(tp D_Timepoint_M, p_m REF D_Period_M) return pls_integer,
    --Returns true if the Timepoint overlaps the Temporal Element.
    MEMBER FUNCTION f_overlaps(tp D_Timepoint_M, te REF D_Temp_Element_M) return pls_integer,
    --Returns true if the Timepoint precedes the Temporal Element.
    MEMBER FUNCTION f_precedes(tp D_Timepoint_M, te REF D_Temp_Element_M) return pls_integer,
    --Returns true if the Timepoint meets the Temporal Element.
    MEMBER FUNCTION f_meets(tp D_Timepoint_M, te REF D_Temp_Element_M) return pls_integer,
    --Returns true if the Timepoint is equal to the Temporal Element.
    MEMBER FUNCTION f_equal(tp D_Timepoint_M, te REF D_Temp_Element_M) return pls_integer,
    --Returns true if the Timepoint contains the Temporal Element.
    MEMBER FUNCTION f_contains(tp D_Timepoint_M, te REF D_Temp_Element_M) return pls_integer,
    --Returns true if the Period constructed using the first two Timepoints overlaps the Period constructed using the other two Timepoints.
    MEMBER FUNCTION f_overlaps(tp1 D_Timepoint_M, tp2 D_Timepoint_M, tp3 D_Timepoint_M, tp4 D_Timepoint_M) return pls_integer

);
/

-- Type D_TIMEPOINT_D

CREATE OR REPLACE
type D_Timepoint_D as object
(
    m_y integer,
    m_m integer,
    m_d integer,

    --Changes the status of the Timepoint object
    MEMBER PROCEDURE change_status(special_value pls_integer, year pls_integer),
    --Returns the year for the Timepoint object.
    MEMBER FUNCTION year return pls_integer,
    --Returns the month for the Timepoint object .
    MEMBER FUNCTION month return pls_integer,
    --Returns the day for the Timepoint object.
    MEMBER FUNCTION day return pls_integer,
    --Returns the Granularity of the Timepoint object.
    MEMBER FUNCTION get_granularity return pls_integer,
    --Returns a long number equal to the number of seconds since the begin of the calendar, representing the value of the Timepoint object.
    MEMBER FUNCTION get_Abs_Date return double precision,
    --Sets the year for the Timepoint object.
    MEMBER PROCEDURE set_year(year pls_integer),
    --Sets the month for the Timepoint object.
    MEMBER PROCEDURE set_month(month pls_integer),
    --Sets the day for the Timepoint object.
    MEMBER PROCEDURE set_day(day pls_integer),
    --Sets the value of the Timepoint object using a long number representing the number of seconds since the begin of the calendar.
    MEMBER PROCEDURE set_Abs_Date(d double precision),
    --Converts the Timepoint object to a Period object.
    MEMBER FUNCTION to_period return REF D_Period_D,
    --Converts the Timepoint object to a Temporal Element object.
    MEMBER FUNCTION to_temporal_element return REF D_Temp_Element_D,
    --Creates a string for the Timepoint object in ISO 8601 format.
    MEMBER FUNCTION to_string return Varchar2,
    --Returns true if the year of the Timepoint object is a Leap year.
    MEMBER FUNCTION is_Leap_Year return pls_integer,
    --Returns true if parameter year is a Leap year.
    MEMBER FUNCTION is_Leap_Year(year pls_integer) return pls_integer,
    --Returns the number of days in the month of the Timepoint object.
    MEMBER FUNCTION days_in_month return pls_integer,
    --Assigns the value of a Timestamp object to the Timepoint object.
    MEMBER PROCEDURE f_ass_timestamp(ts D_Timestamp),
    --Assigns the value of another Timepoint to the Timepoint object.
    MEMBER PROCEDURE f_ass_timepoint(tp D_Timepoint_D),
    --Adds an Interval to the Timepoint object.
    MEMBER PROCEDURE f_add_interval(i D_Interval),
    --Subtracts an Interval from the Timepoint object.
    MEMBER PROCEDURE f_sub_interval(i D_Interval),
    --Increments the Timepoint object by one granule.
    MEMBER PROCEDURE f_incr,
    --Decrements the Timepoint object by one granule.
    MEMBER PROCEDURE f_decr,
    --Returns a Timepoint object representing the sum of an Timepoint object plus a Interval object.
    MEMBER FUNCTION f_add(tp D_Timepoint_D, i D_Interval)return D_Timepoint_D,
    --Returns a Timepoint object representing the subtraction of an Interval object from a Timepoint object.
    MEMBER FUNCTION f_sub(tp D_Timepoint_D, i D_Interval) return D_Timepoint_D,
    --Returns a Period object representing the intersection between two Timepoints.
    MEMBER FUNCTION intersects(tp1 D_Timepoint_D, tp2 D_Timepoint_D) return REF D_Period_D,
    --Returns a Period object representing the intersection between a Timepoint and a Period.
    MEMBER FUNCTION intersects(tp D_Timepoint_D, p_d REF D_Period_D) return REF D_Period_D,
    --Returns a Temporal Element object representing the intersection between a Timepoint and a Temporal Element.
    MEMBER FUNCTION intersects(tp D_Timepoint_D, te REF D_Temp_Element_D) return REF D_Temp_Element_D,
    --Returns true if the Timepoints have the same value.
    MEMBER FUNCTION f_eq(tp1 D_Timepoint_D, tp2 D_Timepoint_D) return pls_integer,
    --Returns true if the Timepoints have different value.
    MEMBER FUNCTION f_n_eq(tp1 D_Timepoint_D, tp2 D_Timepoint_D) return pls_integer,
    --Returns true if the first Timepoint is less than the second.
    MEMBER FUNCTION f_l(tp1 D_Timepoint_D, tp2 D_Timepoint_D) return pls_integer,
    --Returns true if the first Timepoint is less or equal to the second.
    MEMBER FUNCTION f_l_e(tp1 D_Timepoint_D, tp2 D_Timepoint_D) return pls_integer,
    --Returns true if the first Timepoint is greater than the second.
    MEMBER FUNCTION f_b(tp1 D_Timepoint_D, tp2 D_Timepoint_D) return pls_integer,
    --Returns true if the first Timepoint is greater or equal to the second.
    MEMBER FUNCTION f_b_e(tp1 D_Timepoint_D, tp2 D_Timepoint_D) return pls_integer,
    --Returns the Interval between two Timepoints.
    MEMBER FUNCTION f_diff(tp1 D_Timepoint_D, tp2 D_Timepoint_D) return D_Interval,
    --Returns true if the Timepoint is equal to the Timestamp.
    MEMBER FUNCTION f_eq(tp D_Timepoint_D, ts D_Timestamp) return pls_integer,
    --Returns true if the Timepoint is different from the Timestamp.
    MEMBER FUNCTION f_n_eq(tp D_Timepoint_D, ts D_Timestamp) return pls_integer,
    --Returns true if the Timepoint is less than the Timestamp.
    MEMBER FUNCTION f_l(tp D_Timepoint_D, ts D_Timestamp) return pls_integer,
    --Returns true if the Timepoint is less or equal to the Timestamp.
    MEMBER FUNCTION f_l_e(tp D_Timepoint_D, ts D_Timestamp) return pls_integer,
    --Returns true if the Timepoint is greater than the Timestamp.
    MEMBER FUNCTION f_b(tp D_Timepoint_D, ts D_Timestamp) return pls_integer,
    --Returns true if the Timepoint is greater or equal to the Timestamp.
    MEMBER FUNCTION f_b_e(tp D_Timepoint_D, ts D_Timestamp) return pls_integer,
    --Returns true if two Timepoints overlap.
    MEMBER FUNCTION f_overlaps(tp1 D_Timepoint_D, tp2 D_Timepoint_D) return pls_integer,
    --Returns true if the first Timepoint precedes the second Timepoint.
    MEMBER FUNCTION f_precedes(tp1 D_Timepoint_D, tp2 D_Timepoint_D) return pls_integer,
    --Returns true if the first Timepoint meets the second Timepoint.
    MEMBER FUNCTION f_meets(tp1 D_Timepoint_D, tp2 D_Timepoint_D) return pls_integer,
    --Returns true if the first Timepoint is equal to the second Timepoint.
    MEMBER FUNCTION f_equal(tp1 D_Timepoint_D, tp2 D_Timepoint_D) return pls_integer,
    --Returns true if the first Timepoint contains the second Timepoint.
    MEMBER FUNCTION f_contains(tp1 D_Timepoint_D, tp2 D_Timepoint_D) return pls_integer,
    --Returns true if the Timepoint overlaps the Period.
    MEMBER FUNCTION f_overlaps(tp D_Timepoint_D, p_d REF D_Period_D) return pls_integer,
    --Returns true if the Timepoint precedes the Period.
    MEMBER FUNCTION f_precedes(tp D_Timepoint_D, p_d REF D_Period_D) return pls_integer,
    --Returns true if the Timepoint meets the Period.
    MEMBER FUNCTION f_meets(tp D_Timepoint_D, p_d REF D_Period_D) return pls_integer,
    --Returns true if the Timepoint is equal to the Period.
    MEMBER FUNCTION f_equal(tp D_Timepoint_D, p_d REF D_Period_D) return pls_integer,
    --Returns true if the Timepoint contains the Period.
    MEMBER FUNCTION f_contains(tp D_Timepoint_D, p_d REF D_Period_D) return pls_integer,
    --Returns true if the Timepoint overlaps the Temporal Element.
    MEMBER FUNCTION f_overlaps(tp D_Timepoint_D, te REF D_Temp_Element_D) return pls_integer,
    --Returns true if the Timepoint precedes the Temporal Element.
    MEMBER FUNCTION f_precedes(tp D_Timepoint_D, te REF D_Temp_Element_D) return pls_integer,
    --Returns true if the Timepoint meets the Temporal Element.
    MEMBER FUNCTION f_meets(tp D_Timepoint_D, te REF D_Temp_Element_D) return pls_integer,
    --Returns true if the Timepoint is equal to the Temporal Element.
    MEMBER FUNCTION f_equal(tp D_Timepoint_D, te REF D_Temp_Element_D) return pls_integer,
    --Returns true if the Timepoint contains the Temporal Element.
    MEMBER FUNCTION f_contains(tp D_Timepoint_D, te REF D_Temp_Element_D) return pls_integer,
    --Returns true if the Period constructed using the first two Timepoints overlaps the Period constructed using the other two Timepoints.
    MEMBER FUNCTION f_overlaps(tp1 D_Timepoint_D, tp2 D_Timepoint_D, tp3 D_Timepoint_D, tp4 D_Timepoint_D) return pls_integer

);
/

-- Type D_TIMEPOINT_H

CREATE OR REPLACE
type D_Timepoint_H as object
(
    m_y integer,
    m_m integer,
    m_d integer,
    m_h integer,

    --Changes the status of the Timepoint object
    MEMBER PROCEDURE change_status(special_value pls_integer, special_hours pls_integer, year pls_integer),
    --Changes the status of the Timepoint object
    MEMBER PROCEDURE change_status(special_hours pls_integer),
    --Returns the year for the Timepoint object.
    MEMBER FUNCTION year return pls_integer,
    --Returns the month for the Timepoint object .
    MEMBER FUNCTION month return pls_integer,
    --Returns the day for the Timepoint object.
    MEMBER FUNCTION day return pls_integer,
    --Returns the hour for the Timepoint object.
    MEMBER FUNCTION hour return pls_integer,
    --Returns the Granularity of the Timepoint object.
    MEMBER FUNCTION get_granularity return pls_integer,
    --Returns a long number equal to the number of seconds since the begin of the calendar, representing the value of the Timepoint object.
    MEMBER FUNCTION get_Abs_Date return double precision,
    --Sets the year for the Timepoint object.
    MEMBER PROCEDURE set_year(year pls_integer),
    --Sets the month for the Timepoint object.
    MEMBER PROCEDURE set_month(month pls_integer),
    --Sets the day for the Timepoint object.
    MEMBER PROCEDURE set_day(day pls_integer),
    --Sets the hour for the Timepoint object.
    MEMBER PROCEDURE set_hour(hour pls_integer),
    --Sets the value of the Timepoint object using a long number representing the number of seconds since the begin of the calendar.
    MEMBER PROCEDURE set_Abs_Date(d double precision),
    --Converts the Timepoint object to a Period object.
    MEMBER FUNCTION to_period return REF D_Period_H,
    --Converts the Timepoint object to a Temporal Element object.
    MEMBER FUNCTION to_temporal_element return REF D_Temp_Element_H,
    --Creates a string for the Timepoint object in ISO 8601 format.
    MEMBER FUNCTION to_string return Varchar2,
    --Returns true if the year of the Timepoint object is a Leap year.
    MEMBER FUNCTION is_Leap_Year return pls_integer,
    --Returns true if parameter year is a Leap year.
    MEMBER FUNCTION is_Leap_Year(year pls_integer) return pls_integer,
    --Returns the number of days in the month of the Timepoint object.
    MEMBER FUNCTION days_in_month return pls_integer,
    --Assigns the value of a Timestamp object to the Timepoint object.
    MEMBER PROCEDURE f_ass_timestamp(ts D_Timestamp),
    --Assigns the value of another Timepoint to the Timepoint object.
    MEMBER PROCEDURE f_ass_timepoint(tp D_Timepoint_H),
    --Adds an Interval to the Timepoint object.
    MEMBER PROCEDURE f_add_interval(i D_Interval),
    --Subtracts an Interval from the Timepoint object.
    MEMBER PROCEDURE f_sub_interval(i D_Interval),
    --Increments the Timepoint object by one granule.
    MEMBER PROCEDURE f_incr,
    --Decrements the Timepoint object by one granule.
    MEMBER PROCEDURE f_decr,
    --Returns a Timepoint object representing the sum of an Timepoint object plus a Interval object.
    MEMBER FUNCTION f_add(tp D_Timepoint_H, i D_Interval)return D_Timepoint_H,
    --Returns a Timepoint object representing the subtraction of an Interval object from a Timepoint object.
    MEMBER FUNCTION f_sub(tp D_Timepoint_H, i D_Interval) return D_Timepoint_H,
    --Returns a Period object representing the intersection between two Timepoints.
    MEMBER FUNCTION intersects(tp1 D_Timepoint_H, tp2 D_Timepoint_H) return REF D_Period_H,
    --Returns a Period object representing the intersection between a Timepoint and a Period.
    MEMBER FUNCTION intersects(tp D_Timepoint_H, p_h REF D_Period_H) return REF D_Period_H,
    --Returns a Temporal Element object representing the intersection between a Timepoint and a Temporal Element.
    MEMBER FUNCTION intersects(tp D_Timepoint_H, te REF D_Temp_Element_H) return REF D_Temp_Element_H,
    --Returns true if the Timepoints have the same value.
    MEMBER FUNCTION f_eq(tp1 D_Timepoint_H, tp2 D_Timepoint_H) return pls_integer,
    --Returns true if the Timepoints have different value.
    MEMBER FUNCTION f_n_eq(tp1 D_Timepoint_H, tp2 D_Timepoint_H) return pls_integer,
    --Returns true if the first Timepoint is less than the second.
    MEMBER FUNCTION f_l(tp1 D_Timepoint_H, tp2 D_Timepoint_H) return pls_integer,
    --Returns true if the first Timepoint is less or equal to the second.
    MEMBER FUNCTION f_l_e(tp1 D_Timepoint_H, tp2 D_Timepoint_H) return pls_integer,
    --Returns true if the first Timepoint is greater than the second.
    MEMBER FUNCTION f_b(tp1 D_Timepoint_H, tp2 D_Timepoint_H) return pls_integer,
    --Returns true if the first Timepoint is greater or equal to the second.
    MEMBER FUNCTION f_b_e(tp1 D_Timepoint_H, tp2 D_Timepoint_H) return pls_integer,
    --Returns the Interval between two Timepoints.
    MEMBER FUNCTION f_diff(tp1 D_Timepoint_H, tp2 D_Timepoint_H) return D_Interval,
    --Returns true if the Timepoint is equal to the Timestamp.
    MEMBER FUNCTION f_eq(tp D_Timepoint_H, ts D_Timestamp) return pls_integer,
    --Returns true if the Timepoint is different from the Timestamp.
    MEMBER FUNCTION f_n_eq(tp D_Timepoint_H, ts D_Timestamp) return pls_integer,
    --Returns true if the Timepoint is less than the Timestamp.
    MEMBER FUNCTION f_l(tp D_Timepoint_H, ts D_Timestamp) return pls_integer,
    --Returns true if the Timepoint is less or equal to the Timestamp.
    MEMBER FUNCTION f_l_e(tp D_Timepoint_H, ts D_Timestamp) return pls_integer,
    --Returns true if the Timepoint is greater than the Timestamp.
    MEMBER FUNCTION f_b(tp D_Timepoint_H, ts D_Timestamp) return pls_integer,
    --Returns true if the Timepoint is greater or equal to the Timestamp.
    MEMBER FUNCTION f_b_e(tp D_Timepoint_H, ts D_Timestamp) return pls_integer,
    --Returns true if two Timepoints overlap.
    MEMBER FUNCTION f_overlaps(tp1 D_Timepoint_H, tp2 D_Timepoint_H) return pls_integer,
    --Returns true if the first Timepoint precedes the second Timepoint.
    MEMBER FUNCTION f_precedes(tp1 D_Timepoint_H, tp2 D_Timepoint_H) return pls_integer,
    --Returns true if the first Timepoint meets the second Timepoint.
    MEMBER FUNCTION f_meets(tp1 D_Timepoint_H, tp2 D_Timepoint_H) return pls_integer,
    --Returns true if the first Timepoint is equal to the second Timepoint.
    MEMBER FUNCTION f_equal(tp1 D_Timepoint_H, tp2 D_Timepoint_H) return pls_integer,
    --Returns true if the first Timepoint contains the second Timepoint.
    MEMBER FUNCTION f_contains(tp1 D_Timepoint_H, tp2 D_Timepoint_H) return pls_integer,
    --Returns true if the Timepoint overlaps the Period.
    MEMBER FUNCTION f_overlaps(tp D_Timepoint_H, p_h REF D_Period_H) return pls_integer,
    --Returns true if the Timepoint precedes the Period.
    MEMBER FUNCTION f_precedes(tp D_Timepoint_H, p_h REF D_Period_H) return pls_integer,
    --Returns true if the Timepoint meets the Period.
    MEMBER FUNCTION f_meets(tp D_Timepoint_H, p_h REF D_Period_H) return pls_integer,
    --Returns true if the Timepoint is equal to the Period.
    MEMBER FUNCTION f_equal(tp D_Timepoint_H, p_h REF D_Period_H) return pls_integer,
    --Returns true if the Timepoint contains the Period.
    MEMBER FUNCTION f_contains(tp D_Timepoint_H, p_h REF D_Period_H) return pls_integer,
    --Returns true if the Timepoint overlaps the Temporal Element.
    MEMBER FUNCTION f_overlaps(tp D_Timepoint_H, te REF D_Temp_Element_H) return pls_integer,
    --Returns true if the Timepoint precedes the Temporal Element.
    MEMBER FUNCTION f_precedes(tp D_Timepoint_H, te REF D_Temp_Element_H) return pls_integer,
    --Returns true if the Timepoint meets the Temporal Element.
    MEMBER FUNCTION f_meets(tp D_Timepoint_H, te REF D_Temp_Element_H) return pls_integer,
    --Returns true if the Timepoint is equal to the Temporal Element.
    MEMBER FUNCTION f_equal(tp D_Timepoint_H, te REF D_Temp_Element_H) return pls_integer,
    --Returns true if the Timepoint contains the Temporal Element.
    MEMBER FUNCTION f_contains(tp D_Timepoint_H, te REF D_Temp_Element_H) return pls_integer,
    --Returns true if the Period constructed using the first two Timepoints overlaps the Period constructed using the other two Timepoints.
    MEMBER FUNCTION f_overlaps(tp1 D_Timepoint_H, tp2 D_Timepoint_H, tp3 D_Timepoint_H, tp4 D_Timepoint_H) return pls_integer

);
/

-- Type D_TIMEPOINT_MIN

CREATE OR REPLACE
type D_Timepoint_Min as object
(
    m_y integer,
    m_m integer,
    m_d integer,
    m_h integer,
    m_min integer,

    --Changes the status of the Timepoint object
    MEMBER PROCEDURE change_status(special_value pls_integer, special_hours pls_integer, year pls_integer),
    --Returns the year for the Timepoint object.
    MEMBER FUNCTION year return pls_integer,
    --Returns the month for the Timepoint object .
    MEMBER FUNCTION month return pls_integer,
    --Returns the day for the Timepoint object.
    MEMBER FUNCTION day return pls_integer,
    --Returns the hour for the Timepoint object.
    MEMBER FUNCTION hour return pls_integer,
    --Returns the minute for the Timepoint object.
    MEMBER FUNCTION minute return pls_integer,
    --Returns the Granularity of the Timepoint object.
    MEMBER FUNCTION get_granularity return pls_integer,
    --Returns a long number equal to the number of seconds since the begin of the calendar, representing the value of the Timepoint object.
    MEMBER FUNCTION get_Abs_Date return double precision,
    --Sets the year for the Timepoint object.
    MEMBER PROCEDURE set_year(year pls_integer),
    --Sets the month for the Timepoint object.
    MEMBER PROCEDURE set_month(month pls_integer),
    --Sets the day for the Timepoint object.
    MEMBER PROCEDURE set_day(day pls_integer),
    --Sets the hour for the Timepoint object.
    MEMBER PROCEDURE set_hour(hour pls_integer),
    --Sets the minute for the Timepoint object.
    MEMBER PROCEDURE set_minute(minute pls_integer),
    --Sets the value of the Timepoint object using a long number representing the number of seconds since the begin of the calendar.
    MEMBER PROCEDURE set_Abs_Date(d double precision),
    --Converts the Timepoint object to a Period object.
    MEMBER FUNCTION to_period return REF D_Period_Min,
    --Converts the Timepoint object to a Temporal Element object.
    MEMBER FUNCTION to_temporal_element return REF D_Temp_Element_Min,
    --Creates a string for the Timepoint object in ISO 8601 format.
    MEMBER FUNCTION to_string return Varchar2,
    --Returns true if the year of the Timepoint object is a Leap year.
    MEMBER FUNCTION is_Leap_Year return pls_integer,
    --Returns true if parameter year is a Leap year.
    MEMBER FUNCTION is_Leap_Year(year pls_integer) return pls_integer,
    --Returns the number of days in the month of the Timepoint object.
    MEMBER FUNCTION days_in_month return pls_integer,
    --Assigns the value of a Timestamp object to the Timepoint object.
    MEMBER PROCEDURE f_ass_timestamp(ts D_Timestamp),
    --Assigns the value of another Timepoint to the Timepoint object.
    MEMBER PROCEDURE f_ass_timepoint(tp D_Timepoint_Min),
    --Adds an Interval to the Timepoint object.
    MEMBER PROCEDURE f_add_interval(i D_Interval),
    --Subtracts an Interval from the Timepoint object.
    MEMBER PROCEDURE f_sub_interval(i D_Interval),
    --Increments the Timepoint object by one granule.
    MEMBER PROCEDURE f_incr,
    --Decrements the Timepoint object by one granule.
    MEMBER PROCEDURE f_decr,
    --Returns a Timepoint object representing the sum of an Timepoint object plus a Interval object.
    MEMBER FUNCTION f_add(tp D_Timepoint_Min, i D_Interval)return D_Timepoint_Min,
    --Returns a Timepoint object representing the subtraction of an Interval object from a Timepoint object.
    MEMBER FUNCTION f_sub(tp D_Timepoint_Min, i D_Interval) return D_Timepoint_Min,
    --Returns a Period object representing the intersection between two Timepoints.
    MEMBER FUNCTION intersects(tp1 D_Timepoint_Min, tp2 D_Timepoint_Min) return REF D_Period_Min,
    --Returns a Period object representing the intersection between a Timepoint and a Period.
    MEMBER FUNCTION intersects(tp D_Timepoint_Min, p_min REF D_Period_Min) return REF D_Period_Min,
    --Returns a Temporal Element object representing the intersection between a Timepoint and a Temporal Element.
    MEMBER FUNCTION intersects(tp D_Timepoint_Min, te REF D_Temp_Element_Min) return REF D_Temp_Element_Min,
    --Returns true if the Timepoints have the same value.
    MEMBER FUNCTION f_eq(tp1 D_Timepoint_Min, tp2 D_Timepoint_Min) return pls_integer,
    --Returns true if the Timepoints have different value.
    MEMBER FUNCTION f_n_eq(tp1 D_Timepoint_Min, tp2 D_Timepoint_Min) return pls_integer,
    --Returns true if the first Timepoint is less than the second.
    MEMBER FUNCTION f_l(tp1 D_Timepoint_Min, tp2 D_Timepoint_Min) return pls_integer,
    --Returns true if the first Timepoint is less or equal to the second.
    MEMBER FUNCTION f_l_e(tp1 D_Timepoint_Min, tp2 D_Timepoint_Min) return pls_integer,
    --Returns true if the first Timepoint is greater than the second.
    MEMBER FUNCTION f_b(tp1 D_Timepoint_Min, tp2 D_Timepoint_Min) return pls_integer,
    --Returns true if the first Timepoint is greater or equal to the second.
    MEMBER FUNCTION f_b_e(tp1 D_Timepoint_Min, tp2 D_Timepoint_Min) return pls_integer,
    --Returns the Interval between two Timepoints.
    MEMBER FUNCTION f_diff(tp1 D_Timepoint_Min, tp2 D_Timepoint_Min) return D_Interval,
    --Returns true if the Timepoint is equal to the Timestamp.
    MEMBER FUNCTION f_eq(tp D_Timepoint_Min, ts D_Timestamp) return pls_integer,
    --Returns true if the Timepoint is different from the Timestamp.
    MEMBER FUNCTION f_n_eq(tp D_Timepoint_Min, ts D_Timestamp) return pls_integer,
    --Returns true if the Timepoint is less than the Timestamp.
    MEMBER FUNCTION f_l(tp D_Timepoint_Min, ts D_Timestamp) return pls_integer,
    --Returns true if the Timepoint is less or equal to the Timestamp.
    MEMBER FUNCTION f_l_e(tp D_Timepoint_Min, ts D_Timestamp) return pls_integer,
    --Returns true if the Timepoint is greater than the Timestamp.
    MEMBER FUNCTION f_b(tp D_Timepoint_Min, ts D_Timestamp) return pls_integer,
    --Returns true if the Timepoint is greater or equal to the Timestamp.
    MEMBER FUNCTION f_b_e(tp D_Timepoint_Min, ts D_Timestamp) return pls_integer,
    --Returns true if two Timepoints overlap.
    MEMBER FUNCTION f_overlaps(tp1 D_Timepoint_Min, tp2 D_Timepoint_Min) return pls_integer,
    --Returns true if the first Timepoint precedes the second Timepoint.
    MEMBER FUNCTION f_precedes(tp1 D_Timepoint_Min, tp2 D_Timepoint_Min) return pls_integer,
    --Returns true if the first Timepoint meets the second Timepoint.
    MEMBER FUNCTION f_meets(tp1 D_Timepoint_Min, tp2 D_Timepoint_Min) return pls_integer,
    --Returns true if the first Timepoint is equal to the second Timepoint.
    MEMBER FUNCTION f_equal(tp1 D_Timepoint_Min, tp2 D_Timepoint_Min) return pls_integer,
    --Returns true if the first Timepoint contains the second Timepoint.
    MEMBER FUNCTION f_contains(tp1 D_Timepoint_Min, tp2 D_Timepoint_Min) return pls_integer,
    --Returns true if the Timepoint overlaps the Period.
    MEMBER FUNCTION f_overlaps(tp D_Timepoint_Min, p_min REF D_Period_Min) return pls_integer,
    --Returns true if the Timepoint precedes the Period.
    MEMBER FUNCTION f_precedes(tp D_Timepoint_Min, p_min REF D_Period_Min) return pls_integer,
    --Returns true if the Timepoint meets the Period.
    MEMBER FUNCTION f_meets(tp D_Timepoint_Min, p_min REF D_Period_Min) return pls_integer,
    --Returns true if the Timepoint is equal to the Period.
    MEMBER FUNCTION f_equal(tp D_Timepoint_Min, p_min REF D_Period_Min) return pls_integer,
    --Returns true if the Timepoint contains the Period.
    MEMBER FUNCTION f_contains(tp D_Timepoint_Min, p_min REF D_Period_Min) return pls_integer,
    --Returns true if the Timepoint overlaps the Temporal Element.
    MEMBER FUNCTION f_overlaps(tp D_Timepoint_Min, te REF D_Temp_Element_Min) return pls_integer,
    --Returns true if the Timepoint precedes the Temporal Element.
    MEMBER FUNCTION f_precedes(tp D_Timepoint_Min, te REF D_Temp_Element_Min) return pls_integer,
    --Returns true if the Timepoint meets the Temporal Element.
    MEMBER FUNCTION f_meets(tp D_Timepoint_Min, te REF D_Temp_Element_Min) return pls_integer,
    --Returns true if the Timepoint is equal to the Temporal Element.
    MEMBER FUNCTION f_equal(tp D_Timepoint_Min, te REF D_Temp_Element_Min) return pls_integer,
    --Returns true if the Timepoint contains the Temporal Element.
    MEMBER FUNCTION f_contains(tp D_Timepoint_Min, te REF D_Temp_Element_Min) return pls_integer,
    --Returns true if the Period constructed using the first two Timepoints overlaps the Period constructed using the other two Timepoints.
    MEMBER FUNCTION f_overlaps(tp1 D_Timepoint_Min, tp2 D_Timepoint_Min, tp3 D_Timepoint_Min, tp4 D_Timepoint_Min) return pls_integer

);
/

-- Type D_TIMEPOINT_SEC

CREATE OR REPLACE
type D_Timepoint_Sec as object
(
    m_y integer,
    m_m integer,
    m_d integer,
    m_h integer,
    m_min integer,
    m_sec double precision,

    --Changes the status of the Timepoint object
    MEMBER PROCEDURE change_status(special_value pls_integer, special_hours pls_integer, year pls_integer),
    --Returns the year for the Timepoint object.
    MEMBER FUNCTION year return pls_integer,
    --Returns the month for the Timepoint object .
    MEMBER FUNCTION month return pls_integer,
    --Returns the day for the Timepoint object.
    MEMBER FUNCTION day return pls_integer,
    --Returns the hour for the Timepoint object.
    MEMBER FUNCTION hour return pls_integer,
    --Returns the minute for the Timepoint object.
    MEMBER FUNCTION minute return pls_integer,
    --Returns the second for the Timepoint object.
    MEMBER FUNCTION second return double precision,
    --Returns the Granularity of the Timepoint object.
    MEMBER FUNCTION get_granularity return pls_integer,
    --Returns a long number equal to the number of seconds since the begin of the calendar, representing the value of the Timepoint object.
    MEMBER FUNCTION get_Abs_Date return double precision,
    --Sets the year for the Timepoint object.
    MEMBER PROCEDURE set_year(year pls_integer),
    --Sets the month for the Timepoint object.
    MEMBER PROCEDURE set_month(month pls_integer),
    --Sets the day for the Timepoint object.
    MEMBER PROCEDURE set_day(day pls_integer),
    --Sets the hour for the Timepoint object.
    MEMBER PROCEDURE set_hour(hour pls_integer),
    --Sets the minute for the Timepoint object.
    MEMBER PROCEDURE set_minute(minute pls_integer),
    --Sets the second for the Timepoint object.
    MEMBER PROCEDURE set_second(second double precision),
    --Sets the value of the Timepoint object using a long number representing the number of seconds since the begin of the calendar.
    MEMBER PROCEDURE set_Abs_Date(d double precision),
    --Converts the Timepoint object to a Period object.
    MEMBER FUNCTION to_period return REF D_Period_Sec,
    --Converts the Timepoint object to a Temporal Element object.
    MEMBER FUNCTION to_temporal_element return REF D_Temp_Element_Sec,
    --Creates a string for the Timepoint object in ISO 8601 format.
    MEMBER FUNCTION to_string return Varchar2,
    --Returns true if the year of the Timepoint object is a Leap year.
    MEMBER FUNCTION is_Leap_Year return pls_integer,
    --Returns true if parameter year is a Leap year.
    MEMBER FUNCTION is_Leap_Year(year pls_integer) return pls_integer,
    --Returns the number of days in the month of the Timepoint object.
    MEMBER FUNCTION days_in_month return pls_integer,
    --Assigns the value of a Timestamp object to the Timepoint object.
    MEMBER PROCEDURE f_ass_timestamp(ts D_Timestamp),
    --Assigns the value of another Timepoint to the Timepoint object.
    MEMBER PROCEDURE f_ass_timepoint(tp D_Timepoint_Sec),
    --Adds an Interval to the Timepoint object.
    MEMBER PROCEDURE f_add_interval(i D_Interval),
    --Subtracts an Interval from the Timepoint object.
    MEMBER PROCEDURE f_sub_interval(i D_Interval),
    --Increments the Timepoint object by one granule.
    MEMBER PROCEDURE f_incr,
    --Decrements the Timepoint object by one granule.
    MEMBER PROCEDURE f_decr,
    --Returns a Timepoint object representing the sum of an Timepoint object plus a Interval object.
    MEMBER FUNCTION f_add(tp D_Timepoint_Sec, i D_Interval)return D_Timepoint_Sec,
    --Returns a Timepoint object representing the subtraction of an Interval object from a Timepoint object.
    MEMBER FUNCTION f_sub(tp D_Timepoint_Sec, i D_Interval) return D_Timepoint_Sec,
    --Returns a Period object representing the intersection between two Timepoints.
    MEMBER FUNCTION intersects(tp1 D_Timepoint_Sec, tp2 D_Timepoint_Sec) return REF D_Period_Sec,
    --Returns a Period object representing the intersection between a Timepoint and a Period.
    MEMBER FUNCTION intersects(tp D_Timepoint_Sec, p_sec REF D_Period_Sec) return REF D_Period_Sec,
    --Returns a Temporal Element object representing the intersection between a Timepoint and a Temporal Element.
    MEMBER FUNCTION intersects(tp D_Timepoint_Sec, te REF D_Temp_Element_Sec) return REF D_Temp_Element_Sec,
    --Returns true if the Timepoints have the same value.
    MEMBER FUNCTION f_eq(tp1 D_Timepoint_Sec, tp2 D_Timepoint_Sec) return pls_integer,
    --Returns true if the Timepoints have different value.
    MEMBER FUNCTION f_n_eq(tp1 D_Timepoint_Sec, tp2 D_Timepoint_Sec) return pls_integer,
    --Returns true if the first Timepoint is less than the second.
    MEMBER FUNCTION f_l(tp1 D_Timepoint_Sec, tp2 D_Timepoint_Sec) return pls_integer,
    --Returns true if the first Timepoint is less or equal to the second.
    MEMBER FUNCTION f_l_e(tp1 D_Timepoint_Sec, tp2 D_Timepoint_Sec) return pls_integer,
    --Returns true if the first Timepoint is greater than the second.
    MEMBER FUNCTION f_b(tp1 D_Timepoint_Sec, tp2 D_Timepoint_Sec) return pls_integer,
    --Returns true if the first Timepoint is greater or equal to the second.
    MEMBER FUNCTION f_b_e(tp1 D_Timepoint_Sec, tp2 D_Timepoint_Sec) return pls_integer,
    --Returns the Interval between two Timepoints.
    MEMBER FUNCTION f_diff(tp1 D_Timepoint_Sec, tp2 D_Timepoint_Sec) return D_Interval,
    --Returns true if the Timepoint is equal to the Timestamp.
    MEMBER FUNCTION f_eq(tp D_Timepoint_Sec, ts D_Timestamp) return pls_integer,
    --Returns true if the Timepoint is different from the Timestamp.
    MEMBER FUNCTION f_n_eq(tp D_Timepoint_Sec, ts D_Timestamp) return pls_integer,
    --Returns true if the Timepoint is less than the Timestamp.
    MEMBER FUNCTION f_l(tp D_Timepoint_Sec, ts D_Timestamp) return pls_integer,
    --Returns true if the Timepoint is less or equal to the Timestamp.
    MEMBER FUNCTION f_l_e(tp D_Timepoint_Sec, ts D_Timestamp) return pls_integer,
    --Returns true if the Timepoint is greater than the Timestamp.
    MEMBER FUNCTION f_b(tp D_Timepoint_Sec, ts D_Timestamp) return pls_integer,
    --Returns true if the Timepoint is greater or equal to the Timestamp.
    MEMBER FUNCTION f_b_e(tp D_Timepoint_Sec, ts D_Timestamp) return pls_integer,
    --Returns true if two Timepoints overlap.
    MEMBER FUNCTION f_overlaps(tp1 D_Timepoint_Sec, tp2 D_Timepoint_Sec) return pls_integer,
    --Returns true if the first Timepoint precedes the second Timepoint.
    MEMBER FUNCTION f_precedes(tp1 D_Timepoint_Sec, tp2 D_Timepoint_Sec) return pls_integer,
    --Returns true if the first Timepoint meets the second Timepoint.
    MEMBER FUNCTION f_meets(tp1 D_Timepoint_Sec, tp2 D_Timepoint_Sec) return pls_integer,
    --Returns true if the first Timepoint is equal to the second Timepoint.
    MEMBER FUNCTION f_equal(tp1 D_Timepoint_Sec, tp2 D_Timepoint_Sec) return pls_integer,
    --Returns true if the first Timepoint contains the second Timepoint.
    MEMBER FUNCTION f_contains(tp1 D_Timepoint_Sec, tp2 D_Timepoint_Sec) return pls_integer,
    --Returns true if the Timepoint overlaps the Period.
    MEMBER FUNCTION f_overlaps(tp D_Timepoint_Sec, p_sec REF D_Period_Sec) return pls_integer,
    --Returns true if the Timepoint precedes the Period.
    MEMBER FUNCTION f_precedes(tp D_Timepoint_Sec, p_sec REF D_Period_Sec) return pls_integer,
    --Returns true if the Timepoint meets the Period.
    MEMBER FUNCTION f_meets(tp D_Timepoint_Sec, p_sec REF D_Period_Sec) return pls_integer,
    --Returns true if the Timepoint is equal to the Period.
    MEMBER FUNCTION f_equal(tp D_Timepoint_Sec, p_sec REF D_Period_Sec) return pls_integer,
    --Returns true if the Timepoint contains the Period.
    MEMBER FUNCTION f_contains(tp D_Timepoint_Sec, p_sec REF D_Period_Sec) return pls_integer,
    --Returns true if the Timepoint overlaps the Temporal Element.
    MEMBER FUNCTION f_overlaps(tp D_Timepoint_Sec, te REF D_Temp_Element_Sec) return pls_integer,
    --Returns true if the Timepoint precedes the Temporal Element.
    MEMBER FUNCTION f_precedes(tp D_Timepoint_Sec, te REF D_Temp_Element_Sec) return pls_integer,
    --Returns true if the Timepoint meets the Temporal Element.
    MEMBER FUNCTION f_meets(tp D_Timepoint_Sec, te REF D_Temp_Element_Sec) return pls_integer,
    --Returns true if the Timepoint is equal to the Temporal Element.
    MEMBER FUNCTION f_equal(tp D_Timepoint_Sec, te REF D_Temp_Element_Sec) return pls_integer,
    --Returns true if the Timepoint contains the Temporal Element.
    MEMBER FUNCTION f_contains(tp D_Timepoint_Sec, te REF D_Temp_Element_Sec) return pls_integer,
    --Returns true if the Period constructed using the first two Timepoints overlaps the Period constructed using the other two Timepoints.
    MEMBER FUNCTION f_overlaps(tp1 D_Timepoint_Sec, tp2 D_Timepoint_Sec, tp3 D_Timepoint_Sec, tp4 D_Timepoint_Sec) return pls_integer

);
/

-- Type D_PERIOD_Y

CREATE OR REPLACE
type D_Period_Y as object
(
   b D_Timepoint_Y,
   e D_Timepoint_Y,

    --Changes the status of the Period object
    MEMBER PROCEDURE change_status(special_value pls_integer),
    --Returns the begin Timepoint of the Period object.
    MEMBER FUNCTION f_begin return D_Timepoint_Y,
    --Returns the end Timepoint of the Period object.
    MEMBER FUNCTION f_end return D_Timepoint_Y,
    --Sets the begin Timepoint of the Period object.
    MEMBER PROCEDURE set_begin(tp D_Timepoint_Y),
    --Sets the end Timepoint of the Period object.
    MEMBER PROCEDURE set_end(tp D_Timepoint_Y),
    --Returns the Granularity of the Period object.
    MEMBER FUNCTION get_granularity return pls_integer,
    --Returns an Interval object representing the duration of the Period.
    MEMBER FUNCTION duration return D_Interval,
    --Creates a string for the Period object in ISO 8601 format.
    MEMBER FUNCTION to_string return Varchar2,
    --Converts the Period object to a Temporal Element object.
    MEMBER FUNCTION to_temporal_element return REF D_Temp_Element_Y,
    --Assigns the value of another Period to the Period object.
    MEMBER PROCEDURE f_ass_period(p D_Period_Y),
    --Adds an Interval to the Timepoint object.
    MEMBER PROCEDURE f_add_interval(i D_Interval),
    --Subtracts an Interval from the Timepoint object.
    MEMBER PROCEDURE f_sub_interval(i D_Interval),
    --Adds the interval to begin and end Timepoints of the Period object.
    MEMBER FUNCTION f_add(p D_Period_Y, i D_Interval)return D_Period_Y,
    --Subtracts the interval to begin and end Timepoints of the Period object.
    MEMBER FUNCTION f_sub(p D_Period_Y, i D_Interval) return D_Period_Y,
    --Constructs a Temporal Element object adding two Periods.
    MEMBER FUNCTION f_add(p1 D_Period_Y, p2 D_Period_Y) return REF D_Temp_Element_Y,
    --Constructs a Temporal Element object subtracting two Periods.
    MEMBER FUNCTION f_sub(p1 D_Period_Y, p2 D_Period_Y) return REF D_Temp_Element_Y,
    --Constructs a Temporal Element object adding a Period to a Temporal Element.
    MEMBER FUNCTION f_add(p D_Period_Y, te REF D_Temp_Element_Y) return REF D_Temp_Element_Y,
    --Constructs a Temporal Element object subtracting a Temporal Element from a Period.
    MEMBER FUNCTION f_sub(p D_Period_Y, te REF D_Temp_Element_Y) return REF D_Temp_Element_Y,
    --Returns a Period object representing the intersection between a Period and a Timepoint.
    MEMBER FUNCTION intersects(p D_Period_Y, tp D_Timepoint_Y) return D_Period_Y,
    --Returns a Period object representing the intersection between two Periods.
    MEMBER FUNCTION intersects(p1 D_Period_Y, p2 D_Period_Y) return D_Period_Y,
    --Returns a Temporal Element object representing the intersection between a Period and a Temporal Element.
    MEMBER FUNCTION intersects(p D_Period_Y, te REF D_Temp_Element_Y) return REF D_Temp_Element_Y,
    --Returns true if the Periods have the same value.
    MEMBER FUNCTION f_eq(p1 D_Period_Y, p2 D_Period_Y) return pls_integer,
    --Returns true if the Periods have different value.
    MEMBER FUNCTION f_n_eq(p1 D_Period_Y, p2 D_Period_Y) return pls_integer,
    --Returns true if the begin Timepoint of the first Period precedes the begin Timepoint of the second Period.
    MEMBER FUNCTION f_l(p1 D_Period_Y, p2 D_Period_Y) return pls_integer,
    --Returns true if the begin Timepoint of the first Period precedes or is equal to the begin Timepoint of the second Period.
    MEMBER FUNCTION f_l_e(p1 D_Period_Y, p2 D_Period_Y) return pls_integer,
    --Returns true if the begin Timepoint of the first Period follows the begin Timepoint of the second Period.
    MEMBER FUNCTION f_b(p1 D_Period_Y, p2 D_Period_Y) return pls_integer,
    --Returns true if the begin Timepoint of the first Period follows or is equal to the begin Timepoint of the second Period.
    MEMBER FUNCTION f_b_e(p1 D_Period_Y, p2 D_Period_Y) return pls_integer,
    --Returns true if the Period overlaps the Timepoint.
    MEMBER FUNCTION f_overlaps(p D_Period_Y, tp D_Timepoint_Y) return pls_integer,
    --Returns true if the Period precedes the Timepoint.
    MEMBER FUNCTION f_precedes(p D_Period_Y, tp D_Timepoint_Y) return pls_integer,
    --Returns true if the Period meets the Timepoint.
    MEMBER FUNCTION f_meets(p D_Period_Y, tp D_Timepoint_Y) return pls_integer,
    --Returns true if the Period is equal to Timepoint.
    MEMBER FUNCTION f_equal(p D_Period_Y, tp D_Timepoint_Y) return pls_integer,
    --Returns true if the Period contains the Timepoint.
    MEMBER FUNCTION f_contains(p D_Period_Y, tp D_Timepoint_Y) return pls_integer,
    --Returns true if two Periods overlap.
    MEMBER FUNCTION f_overlaps(p1 D_Period_Y, p2 D_Period_Y) return pls_integer,
    --Returns true if the first Period precedes the second Period.
    MEMBER FUNCTION f_precedes(p1 D_Period_Y, p2 D_Period_Y) return pls_integer,
    --Returns true if the first Period meets the second Period.
    MEMBER FUNCTION f_meets(p1 D_Period_Y, p2 D_Period_Y) return pls_integer,
    --Returns true if the first Period is equal to the second Period.
    MEMBER FUNCTION f_equal(p1 D_Period_Y, p2 D_Period_Y) return pls_integer,
    --Returns true if the first Period contains the second Period.
    MEMBER FUNCTION f_contains(p1 D_Period_Y, p2 D_Period_Y) return pls_integer,
    --Returns true if the Period overlaps the Temporal Element.
    MEMBER FUNCTION f_overlaps(p D_Period_Y, te REF D_Temp_Element_Y) return pls_integer,
    --Returns true if the Period precedes the Temporal Element.
    MEMBER FUNCTION f_precedes(p D_Period_Y, te REF D_Temp_Element_Y) return pls_integer,
    --Returns true if the Period meets the Temporal Element.
    MEMBER FUNCTION f_meets(p D_Period_Y, te REF D_Temp_Element_Y) return pls_integer,
    --Returns true if the Period is equal to the Temporal Element.
    MEMBER FUNCTION f_equal(p D_Period_Y, te REF D_Temp_Element_Y) return pls_integer,
    --Returns true if the Timepoint contains the Temporal Element.
    MEMBER FUNCTION f_contains(p D_Period_Y, te REF D_Temp_Element_Y) return pls_integer

);
/

-- Type D_PERIOD_M

CREATE OR REPLACE
type D_Period_M as object
(
   b D_Timepoint_M,
   e D_Timepoint_M,

    --Changes the status of the Period object
    MEMBER PROCEDURE change_status(special_value pls_integer),
    --Returns the begin Timepoint of the Period object.
    MEMBER FUNCTION f_begin return D_Timepoint_M,
    --Returns the end Timepoint of the Period object.
    MEMBER FUNCTION f_end return D_Timepoint_M,
    --Sets the begin Timepoint of the Period object.
    MEMBER PROCEDURE set_begin(tp D_Timepoint_M),
    --Sets the end Timepoint of the Period object.
    MEMBER PROCEDURE set_end(tp D_Timepoint_M),
    --Returns the Granularity of the Period object.
    MEMBER FUNCTION get_granularity return pls_integer,
    --Returns an Interval object representing the duration of the Period.
    MEMBER FUNCTION duration return D_Interval,
    --Creates a string for the Period object in ISO 8601 format.
    MEMBER FUNCTION to_string return Varchar2,
    --Converts the Period object to a Temporal Element object.
    MEMBER FUNCTION to_temporal_element return REF D_Temp_Element_M,
    --Assigns the value of another Period to the Period object.
    MEMBER PROCEDURE f_ass_period(p D_Period_M),
    --Adds an Interval to the Timepoint object.
    MEMBER PROCEDURE f_add_interval(i D_Interval),
    --Subtracts an Interval from the Timepoint object.
    MEMBER PROCEDURE f_sub_interval(i D_Interval),
    --Adds the interval to begin and end Timepoints of the Period object.
    MEMBER FUNCTION f_add(p D_Period_M, i D_Interval)return D_Period_M,
    --Subtracts the interval to begin and end Timepoints of the Period object.
    MEMBER FUNCTION f_sub(p D_Period_M, i D_Interval) return D_Period_M,
    --Constructs a Temporal Element object adding two Periods.
    MEMBER FUNCTION f_add(p1 D_Period_M, p2 D_Period_M) return REF D_Temp_Element_M,
    --Constructs a Temporal Element object subtracting two Periods.
    MEMBER FUNCTION f_sub(p1 D_Period_M, p2 D_Period_M) return REF D_Temp_Element_M,
    --Constructs a Temporal Element object adding a Period to a Temporal Element.
    MEMBER FUNCTION f_add(p D_Period_M, te REF D_Temp_Element_M) return REF D_Temp_Element_M,
    --Constructs a Temporal Element object subtracting a Temporal Element from a Period.
    MEMBER FUNCTION f_sub(p D_Period_M, te REF D_Temp_Element_M) return REF D_Temp_Element_M,
    --Returns a Period object representing the intersection between a Period and a Timepoint.
    MEMBER FUNCTION intersects(p D_Period_M, tp D_Timepoint_M) return D_Period_M,
    --Returns a Period object representing the intersection between two Periods.
    MEMBER FUNCTION intersects(p1 D_Period_M, p2 D_Period_M) return D_Period_M,
    --Returns a Temporal Element object representing the intersection between a Period and a Temporal Element.
    MEMBER FUNCTION intersects(p D_Period_M, te REF D_Temp_Element_M) return REF D_Temp_Element_M,
    --Returns true if the Periods have the same value.
    MEMBER FUNCTION f_eq(p1 D_Period_M, p2 D_Period_M) return pls_integer,
    --Returns true if the Periods have different value.
    MEMBER FUNCTION f_n_eq(p1 D_Period_M, p2 D_Period_M) return pls_integer,
    --Returns true if the begin Timepoint of the first Period precedes the begin Timepoint of the second Period.
    MEMBER FUNCTION f_l(p1 D_Period_M, p2 D_Period_M) return pls_integer,
    --Returns true if the begin Timepoint of the first Period precedes or is equal to the begin Timepoint of the second Period.
    MEMBER FUNCTION f_l_e(p1 D_Period_M, p2 D_Period_M) return pls_integer,
    --Returns true if the begin Timepoint of the first Period follows the begin Timepoint of the second Period.
    MEMBER FUNCTION f_b(p1 D_Period_M, p2 D_Period_M) return pls_integer,
    --Returns true if the begin Timepoint of the first Period follows or is equal to the begin Timepoint of the second Period.
    MEMBER FUNCTION f_b_e(p1 D_Period_M, p2 D_Period_M) return pls_integer,
    --Returns true if the Period overlaps the Timepoint.
    MEMBER FUNCTION f_overlaps(p D_Period_M, tp D_Timepoint_M) return pls_integer,
    --Returns true if the Period precedes the Timepoint.
    MEMBER FUNCTION f_precedes(p D_Period_M, tp D_Timepoint_M) return pls_integer,
    --Returns true if the Period meets the Timepoint.
    MEMBER FUNCTION f_meets(p D_Period_M, tp D_Timepoint_M) return pls_integer,
    --Returns true if the Period is equal to Timepoint.
    MEMBER FUNCTION f_equal(p D_Period_M, tp D_Timepoint_M) return pls_integer,
    --Returns true if the Period contains the Timepoint.
    MEMBER FUNCTION f_contains(p D_Period_M, tp D_Timepoint_M) return pls_integer,
    --Returns true if two Periods overlap.
    MEMBER FUNCTION f_overlaps(p1 D_Period_M, p2 D_Period_M) return pls_integer,
    --Returns true if the first Period precedes the second Period.
    MEMBER FUNCTION f_precedes(p1 D_Period_M, p2 D_Period_M) return pls_integer,
    --Returns true if the first Period meets the second Period.
    MEMBER FUNCTION f_meets(p1 D_Period_M, p2 D_Period_M) return pls_integer,
    --Returns true if the first Period is equal to the second Period.
    MEMBER FUNCTION f_equal(p1 D_Period_M, p2 D_Period_M) return pls_integer,
    --Returns true if the first Period contains the second Period.
    MEMBER FUNCTION f_contains(p1 D_Period_M, p2 D_Period_M) return pls_integer,
    --Returns true if the Period overlaps the Temporal Element.
    MEMBER FUNCTION f_overlaps(p D_Period_M, te REF D_Temp_Element_M) return pls_integer,
    --Returns true if the Period precedes the Temporal Element.
    MEMBER FUNCTION f_precedes(p D_Period_M, te REF D_Temp_Element_M) return pls_integer,
    --Returns true if the Period meets the Temporal Element.
    MEMBER FUNCTION f_meets(p D_Period_M, te REF D_Temp_Element_M) return pls_integer,
    --Returns true if the Period is equal to the Temporal Element.
    MEMBER FUNCTION f_equal(p D_Period_M, te REF D_Temp_Element_M) return pls_integer,
    --Returns true if the Timepoint contains the Temporal Element.
    MEMBER FUNCTION f_contains(p D_Period_M, te REF D_Temp_Element_M) return pls_integer

);
/

-- Type D_PERIOD_D

CREATE OR REPLACE
type D_Period_D as object
(
   b D_Timepoint_D,
   e D_Timepoint_D,

    --Changes the status of the Period object
    MEMBER PROCEDURE change_status(special_value pls_integer),
    --Returns the begin Timepoint of the Period object.
    MEMBER FUNCTION f_begin return D_Timepoint_D,
    --Returns the end Timepoint of the Period object.
    MEMBER FUNCTION f_end return D_Timepoint_D,
    --Sets the begin Timepoint of the Period object.
    MEMBER PROCEDURE set_begin(tp D_Timepoint_D),
    --Sets the end Timepoint of the Period object.
    MEMBER PROCEDURE set_end(tp D_Timepoint_D),
    --Returns the Granularity of the Period object.
    MEMBER FUNCTION get_granularity return pls_integer,
    --Returns an Interval object representing the duration of the Period.
    MEMBER FUNCTION duration return D_Interval,
    --Creates a string for the Period object in ISO 8601 format.
    MEMBER FUNCTION to_string return Varchar2,
    --Converts the Period object to a Temporal Element object.
    MEMBER FUNCTION to_temporal_element return REF D_Temp_Element_D,
    --Assigns the value of another Period to the Period object.
    MEMBER PROCEDURE f_ass_period(p D_Period_D),
    --Adds an Interval to the Timepoint object.
    MEMBER PROCEDURE f_add_interval(i D_Interval),
    --Subtracts an Interval from the Timepoint object.
    MEMBER PROCEDURE f_sub_interval(i D_Interval),
    --Adds the interval to begin and end Timepoints of the Period object.
    MEMBER FUNCTION f_add(p D_Period_D, i D_Interval)return D_Period_D,
    --Subtracts the interval to begin and end Timepoints of the Period object.
    MEMBER FUNCTION f_sub(p D_Period_D, i D_Interval) return D_Period_D,
    --Constructs a Temporal Element object adding two Periods.
    MEMBER FUNCTION f_add(p1 D_Period_D, p2 D_Period_D) return REF D_Temp_Element_D,
    --Constructs a Temporal Element object subtracting two Periods.
    MEMBER FUNCTION f_sub(p1 D_Period_D, p2 D_Period_D) return REF D_Temp_Element_D,
    --Constructs a Temporal Element object adding a Period to a Temporal Element.
    MEMBER FUNCTION f_add(p D_Period_D, te REF D_Temp_Element_D) return REF D_Temp_Element_D,
    --Constructs a Temporal Element object subtracting a Temporal Element from a Period.
    MEMBER FUNCTION f_sub(p D_Period_D, te REF D_Temp_Element_D) return REF D_Temp_Element_D,
    --Returns a Period object representing the intersection between a Period and a Timepoint.
    MEMBER FUNCTION intersects(p D_Period_D, tp D_Timepoint_D) return D_Period_D,
    --Returns a Period object representing the intersection between two Periods.
    MEMBER FUNCTION intersects(p1 D_Period_D, p2 D_Period_D) return D_Period_D,
    --Returns a Temporal Element object representing the intersection between a Period and a Temporal Element.
    MEMBER FUNCTION intersects(p D_Period_D, te REF D_Temp_Element_D) return REF D_Temp_Element_D,
    --Returns true if the Periods have the same value.
    MEMBER FUNCTION f_eq(p1 D_Period_D, p2 D_Period_D) return pls_integer,
    --Returns true if the Periods have different value.
    MEMBER FUNCTION f_n_eq(p1 D_Period_D, p2 D_Period_D) return pls_integer,
    --Returns true if the begin Timepoint of the first Period precedes the begin Timepoint of the second Period.
    MEMBER FUNCTION f_l(p1 D_Period_D, p2 D_Period_D) return pls_integer,
    --Returns true if the begin Timepoint of the first Period precedes or is equal to the begin Timepoint of the second Period.
    MEMBER FUNCTION f_l_e(p1 D_Period_D, p2 D_Period_D) return pls_integer,
    --Returns true if the begin Timepoint of the first Period follows the begin Timepoint of the second Period.
    MEMBER FUNCTION f_b(p1 D_Period_D, p2 D_Period_D) return pls_integer,
    --Returns true if the begin Timepoint of the first Period follows or is equal to the begin Timepoint of the second Period.
    MEMBER FUNCTION f_b_e(p1 D_Period_D, p2 D_Period_D) return pls_integer,
    --Returns true if the Period overlaps the Timepoint.
    MEMBER FUNCTION f_overlaps(p D_Period_D, tp D_Timepoint_D) return pls_integer,
    --Returns true if the Period precedes the Timepoint.
    MEMBER FUNCTION f_precedes(p D_Period_D, tp D_Timepoint_D) return pls_integer,
    --Returns true if the Period meets the Timepoint.
    MEMBER FUNCTION f_meets(p D_Period_D, tp D_Timepoint_D) return pls_integer,
    --Returns true if the Period is equal to Timepoint.
    MEMBER FUNCTION f_equal(p D_Period_D, tp D_Timepoint_D) return pls_integer,
    --Returns true if the Period contains the Timepoint.
    MEMBER FUNCTION f_contains(p D_Period_D, tp D_Timepoint_D) return pls_integer,
    --Returns true if two Periods overlap.
    MEMBER FUNCTION f_overlaps(p1 D_Period_D, p2 D_Period_D) return pls_integer,
    --Returns true if the first Period precedes the second Period.
    MEMBER FUNCTION f_precedes(p1 D_Period_D, p2 D_Period_D) return pls_integer,
    --Returns true if the first Period meets the second Period.
    MEMBER FUNCTION f_meets(p1 D_Period_D, p2 D_Period_D) return pls_integer,
    --Returns true if the first Period is equal to the second Period.
    MEMBER FUNCTION f_equal(p1 D_Period_D, p2 D_Period_D) return pls_integer,
    --Returns true if the first Period contains the second Period.
    MEMBER FUNCTION f_contains(p1 D_Period_D, p2 D_Period_D) return pls_integer,
    --Returns true if the Period overlaps the Temporal Element.
    MEMBER FUNCTION f_overlaps(p D_Period_D, te REF D_Temp_Element_D) return pls_integer,
    --Returns true if the Period precedes the Temporal Element.
    MEMBER FUNCTION f_precedes(p D_Period_D, te REF D_Temp_Element_D) return pls_integer,
    --Returns true if the Period meets the Temporal Element.
    MEMBER FUNCTION f_meets(p D_Period_D, te REF D_Temp_Element_D) return pls_integer,
    --Returns true if the Period is equal to the Temporal Element.
    MEMBER FUNCTION f_equal(p D_Period_D, te REF D_Temp_Element_D) return pls_integer,
    --Returns true if the Timepoint contains the Temporal Element.
    MEMBER FUNCTION f_contains(p D_Period_D, te REF D_Temp_Element_D) return pls_integer

);
/

-- Type D_PERIOD_H

CREATE OR REPLACE
type D_Period_H as object
(
   b D_Timepoint_H,
   e D_Timepoint_H,

    --Changes the status of the Period object
    MEMBER PROCEDURE change_status(special_value pls_integer),
    --Returns the begin Timepoint of the Period object.
    MEMBER FUNCTION f_begin return D_Timepoint_H,
    --Returns the end Timepoint of the Period object.
    MEMBER FUNCTION f_end return D_Timepoint_H,
    --Sets the begin Timepoint of the Period object.
    MEMBER PROCEDURE set_begin(tp D_Timepoint_H),
    --Sets the end Timepoint of the Period object.
    MEMBER PROCEDURE set_end(tp D_Timepoint_H),
    --Returns the Granularity of the Period object.
    MEMBER FUNCTION get_granularity return pls_integer,
    --Returns an Interval object representing the duration of the Period.
    MEMBER FUNCTION duration return D_Interval,
    --Creates a string for the Period object in ISO 8601 format.
    MEMBER FUNCTION to_string return Varchar2,
    --Converts the Period object to a Temporal Element object.
    MEMBER FUNCTION to_temporal_element return REF D_Temp_Element_H,
    --Assigns the value of another Period to the Period object.
    MEMBER PROCEDURE f_ass_period(p D_Period_H),
    --Adds an Interval to the Timepoint object.
    MEMBER PROCEDURE f_add_interval(i D_Interval),
    --Subtracts an Interval from the Timepoint object.
    MEMBER PROCEDURE f_sub_interval(i D_Interval),
    --Adds the interval to begin and end Timepoints of the Period object.
    MEMBER FUNCTION f_add(p D_Period_H, i D_Interval)return D_Period_H,
    --Subtracts the interval to begin and end Timepoints of the Period object.
    MEMBER FUNCTION f_sub(p D_Period_H, i D_Interval) return D_Period_H,
    --Constructs a Temporal Element object adding two Periods.
    MEMBER FUNCTION f_add(p1 D_Period_H, p2 D_Period_H) return REF D_Temp_Element_H,
    --Constructs a Temporal Element object subtracting two Periods.
    MEMBER FUNCTION f_sub(p1 D_Period_H, p2 D_Period_H) return REF D_Temp_Element_H,
    --Constructs a Temporal Element object adding a Period to a Temporal Element.
    MEMBER FUNCTION f_add(p D_Period_H, te REF D_Temp_Element_H) return REF D_Temp_Element_H,
    --Constructs a Temporal Element object subtracting a Temporal Element from a Period.
    MEMBER FUNCTION f_sub(p D_Period_H, te REF D_Temp_Element_H) return REF D_Temp_Element_H,
    --Returns a Period object representing the intersection between a Period and a Timepoint.
    MEMBER FUNCTION intersects(p D_Period_H, tp D_Timepoint_H) return D_Period_H,
    --Returns a Period object representing the intersection between two Periods.
    MEMBER FUNCTION intersects(p1 D_Period_H, p2 D_Period_H) return D_Period_H,
    --Returns a Temporal Element object representing the intersection between a Period and a Temporal Element.
    MEMBER FUNCTION intersects(p D_Period_H, te REF D_Temp_Element_H) return REF D_Temp_Element_H,
    --Returns true if the Periods have the same value.
    MEMBER FUNCTION f_eq(p1 D_Period_H, p2 D_Period_H) return pls_integer,
    --Returns true if the Periods have different value.
    MEMBER FUNCTION f_n_eq(p1 D_Period_H, p2 D_Period_H) return pls_integer,
    --Returns true if the begin Timepoint of the first Period precedes the begin Timepoint of the second Period.
    MEMBER FUNCTION f_l(p1 D_Period_H, p2 D_Period_H) return pls_integer,
    --Returns true if the begin Timepoint of the first Period precedes or is equal to the begin Timepoint of the second Period.
    MEMBER FUNCTION f_l_e(p1 D_Period_H, p2 D_Period_H) return pls_integer,
    --Returns true if the begin Timepoint of the first Period follows the begin Timepoint of the second Period.
    MEMBER FUNCTION f_b(p1 D_Period_H, p2 D_Period_H) return pls_integer,
    --Returns true if the begin Timepoint of the first Period follows or is equal to the begin Timepoint of the second Period.
    MEMBER FUNCTION f_b_e(p1 D_Period_H, p2 D_Period_H) return pls_integer,
    --Returns true if the Period overlaps the Timepoint.
    MEMBER FUNCTION f_overlaps(p D_Period_H, tp D_Timepoint_H) return pls_integer,
    --Returns true if the Period precedes the Timepoint.
    MEMBER FUNCTION f_precedes(p D_Period_H, tp D_Timepoint_H) return pls_integer,
    --Returns true if the Period meets the Timepoint.
    MEMBER FUNCTION f_meets(p D_Period_H, tp D_Timepoint_H) return pls_integer,
    --Returns true if the Period is equal to Timepoint.
    MEMBER FUNCTION f_equal(p D_Period_H, tp D_Timepoint_H) return pls_integer,
    --Returns true if the Period contains the Timepoint.
    MEMBER FUNCTION f_contains(p D_Period_H, tp D_Timepoint_H) return pls_integer,
    --Returns true if two Periods overlap.
    MEMBER FUNCTION f_overlaps(p1 D_Period_H, p2 D_Period_H) return pls_integer,
    --Returns true if the first Period precedes the second Period.
    MEMBER FUNCTION f_precedes(p1 D_Period_H, p2 D_Period_H) return pls_integer,
    --Returns true if the first Period meets the second Period.
    MEMBER FUNCTION f_meets(p1 D_Period_H, p2 D_Period_H) return pls_integer,
    --Returns true if the first Period is equal to the second Period.
    MEMBER FUNCTION f_equal(p1 D_Period_H, p2 D_Period_H) return pls_integer,
    --Returns true if the first Period contains the second Period.
    MEMBER FUNCTION f_contains(p1 D_Period_H, p2 D_Period_H) return pls_integer,
    --Returns true if the Period overlaps the Temporal Element.
    MEMBER FUNCTION f_overlaps(p D_Period_H, te REF D_Temp_Element_H) return pls_integer,
    --Returns true if the Period precedes the Temporal Element.
    MEMBER FUNCTION f_precedes(p D_Period_H, te REF D_Temp_Element_H) return pls_integer,
    --Returns true if the Period meets the Temporal Element.
    MEMBER FUNCTION f_meets(p D_Period_H, te REF D_Temp_Element_H) return pls_integer,
    --Returns true if the Period is equal to the Temporal Element.
    MEMBER FUNCTION f_equal(p D_Period_H, te REF D_Temp_Element_H) return pls_integer,
    --Returns true if the Timepoint contains the Temporal Element.
    MEMBER FUNCTION f_contains(p D_Period_H, te REF D_Temp_Element_H) return pls_integer

);
/

-- Type D_PERIOD_MIN

CREATE OR REPLACE
type D_Period_Min as object
(
   b D_Timepoint_Min,
   e D_Timepoint_Min,

    --Changes the status of the Period object
    MEMBER PROCEDURE change_status(special_value pls_integer),
    --Returns the begin Timepoint of the Period object.
    MEMBER FUNCTION f_begin return D_Timepoint_Min,
    --Returns the end Timepoint of the Period object.
    MEMBER FUNCTION f_end return D_Timepoint_Min,
    --Sets the begin Timepoint of the Period object.
    MEMBER PROCEDURE set_begin(tp D_Timepoint_Min),
    --Sets the end Timepoint of the Period object.
    MEMBER PROCEDURE set_end(tp D_Timepoint_Min),
    --Returns the Granularity of the Period object.
    MEMBER FUNCTION get_granularity return pls_integer,
    --Returns an Interval object representing the duration of the Period.
    MEMBER FUNCTION duration return D_Interval,
    --Creates a string for the Period object in ISO 8601 format.
    MEMBER FUNCTION to_string return Varchar2,
    --Converts the Period object to a Temporal Element object.
    MEMBER FUNCTION to_temporal_element return REF D_Temp_Element_Min,
    --Assigns the value of another Period to the Period object.
    MEMBER PROCEDURE f_ass_period(p D_Period_Min),
    --Adds an Interval to the Timepoint object.
    MEMBER PROCEDURE f_add_interval(i D_Interval),
    --Subtracts an Interval from the Timepoint object.
    MEMBER PROCEDURE f_sub_interval(i D_Interval),
    --Adds the interval to begin and end Timepoints of the Period object.
    MEMBER FUNCTION f_add(p D_Period_Min, i D_Interval)return D_Period_Min,
    --Subtracts the interval to begin and end Timepoints of the Period object.
    MEMBER FUNCTION f_sub(p D_Period_Min, i D_Interval) return D_Period_Min,
    --Constructs a Temporal Element object adding two Periods.
    MEMBER FUNCTION f_add(p1 D_Period_Min, p2 D_Period_Min) return REF D_Temp_Element_Min,
    --Constructs a Temporal Element object subtracting two Periods.
    MEMBER FUNCTION f_sub(p1 D_Period_Min, p2 D_Period_Min) return REF D_Temp_Element_Min,
    --Constructs a Temporal Element object adding a Period to a Temporal Element.
    MEMBER FUNCTION f_add(p D_Period_Min, te REF D_Temp_Element_Min) return REF D_Temp_Element_Min,
    --Constructs a Temporal Element object subtracting a Temporal Element from a Period.
    MEMBER FUNCTION f_sub(p D_Period_Min, te REF D_Temp_Element_Min) return REF D_Temp_Element_Min,
    --Returns a Period object representing the intersection between a Period and a Timepoint.
    MEMBER FUNCTION intersects(p D_Period_Min, tp D_Timepoint_Min) return D_Period_Min,
    --Returns a Period object representing the intersection between two Periods.
    MEMBER FUNCTION intersects(p1 D_Period_Min, p2 D_Period_Min) return D_Period_Min,
    --Returns a Temporal Element object representing the intersection between a Period and a Temporal Element.
    MEMBER FUNCTION intersects(p D_Period_Min, te REF D_Temp_Element_Min) return REF D_Temp_Element_Min,
    --Returns true if the Periods have the same value.
    MEMBER FUNCTION f_eq(p1 D_Period_Min, p2 D_Period_Min) return pls_integer,
    --Returns true if the Periods have different value.
    MEMBER FUNCTION f_n_eq(p1 D_Period_Min, p2 D_Period_Min) return pls_integer,
    --Returns true if the begin Timepoint of the first Period precedes the begin Timepoint of the second Period.
    MEMBER FUNCTION f_l(p1 D_Period_Min, p2 D_Period_Min) return pls_integer,
    --Returns true if the begin Timepoint of the first Period precedes or is equal to the begin Timepoint of the second Period.
    MEMBER FUNCTION f_l_e(p1 D_Period_Min, p2 D_Period_Min) return pls_integer,
    --Returns true if the begin Timepoint of the first Period follows the begin Timepoint of the second Period.
    MEMBER FUNCTION f_b(p1 D_Period_Min, p2 D_Period_Min) return pls_integer,
    --Returns true if the begin Timepoint of the first Period follows or is equal to the begin Timepoint of the second Period.
    MEMBER FUNCTION f_b_e(p1 D_Period_Min, p2 D_Period_Min) return pls_integer,
    --Returns true if the Period overlaps the Timepoint.
    MEMBER FUNCTION f_overlaps(p D_Period_Min, tp D_Timepoint_Min) return pls_integer,
    --Returns true if the Period precedes the Timepoint.
    MEMBER FUNCTION f_precedes(p D_Period_Min, tp D_Timepoint_Min) return pls_integer,
    --Returns true if the Period meets the Timepoint.
    MEMBER FUNCTION f_meets(p D_Period_Min, tp D_Timepoint_Min) return pls_integer,
    --Returns true if the Period is equal to Timepoint.
    MEMBER FUNCTION f_equal(p D_Period_Min, tp D_Timepoint_Min) return pls_integer,
    --Returns true if the Period contains the Timepoint.
    MEMBER FUNCTION f_contains(p D_Period_Min, tp D_Timepoint_Min) return pls_integer,
    --Returns true if two Periods overlap.
    MEMBER FUNCTION f_overlaps(p1 D_Period_Min, p2 D_Period_Min) return pls_integer,
    --Returns true if the first Period precedes the second Period.
    MEMBER FUNCTION f_precedes(p1 D_Period_Min, p2 D_Period_Min) return pls_integer,
    --Returns true if the first Period meets the second Period.
    MEMBER FUNCTION f_meets(p1 D_Period_Min, p2 D_Period_Min) return pls_integer,
    --Returns true if the first Period is equal to the second Period.
    MEMBER FUNCTION f_equal(p1 D_Period_Min, p2 D_Period_Min) return pls_integer,
    --Returns true if the first Period contains the second Period.
    MEMBER FUNCTION f_contains(p1 D_Period_Min, p2 D_Period_Min) return pls_integer,
    --Returns true if the Period overlaps the Temporal Element.
    MEMBER FUNCTION f_overlaps(p D_Period_Min, te REF D_Temp_Element_Min) return pls_integer,
    --Returns true if the Period precedes the Temporal Element.
    MEMBER FUNCTION f_precedes(p D_Period_Min, te REF D_Temp_Element_Min) return pls_integer,
    --Returns true if the Period meets the Temporal Element.
    MEMBER FUNCTION f_meets(p D_Period_Min, te REF D_Temp_Element_Min) return pls_integer,
    --Returns true if the Period is equal to the Temporal Element.
    MEMBER FUNCTION f_equal(p D_Period_Min, te REF D_Temp_Element_Min) return pls_integer,
    --Returns true if the Timepoint contains the Temporal Element.
    MEMBER FUNCTION f_contains(p D_Period_Min, te REF D_Temp_Element_Min) return pls_integer

);
/

-- Type D_PERIOD_SEC

CREATE OR REPLACE
type D_Period_Sec as object
(
   b D_Timepoint_Sec,
   e D_Timepoint_Sec,

    --Changes the status of the Period object
    MEMBER PROCEDURE change_status(special_value pls_integer),
    --Returns the begin Timepoint of the Period object.
    MEMBER FUNCTION f_begin return D_Timepoint_Sec,
    --Returns the end Timepoint of the Period object.
    MEMBER FUNCTION f_end return D_Timepoint_Sec,
    --Sets the begin Timepoint of the Period object.
    MEMBER PROCEDURE set_begin(tp D_Timepoint_Sec),
    --Sets the end Timepoint of the Period object.
    MEMBER PROCEDURE set_end(tp D_Timepoint_Sec),
    --Returns the Granularity of the Period object.
    MEMBER FUNCTION get_granularity return pls_integer,
    --Returns an Interval object representing the duration of the Period.
    MEMBER FUNCTION duration return D_Interval,
    --Creates a string for the Period object in ISO 8601 format.
    MEMBER FUNCTION to_string return Varchar2,
    --Converts the Period object to a Temporal Element object.
    MEMBER FUNCTION to_temporal_element return REF D_Temp_Element_Sec,
    --Assigns the value of another Period to the Period object.
    MEMBER PROCEDURE f_ass_period(p D_Period_Sec),
    --Adds an Interval to the Timepoint object.
    MEMBER PROCEDURE f_add_interval(i D_Interval),
    --Subtracts an Interval from the Timepoint object.
    MEMBER PROCEDURE f_sub_interval(i D_Interval),
    --Adds the interval to begin and end Timepoints of the Period object.
    MEMBER FUNCTION f_add(p D_Period_Sec, i D_Interval)return D_Period_Sec,
    --Subtracts the interval to begin and end Timepoints of the Period object.
    MEMBER FUNCTION f_sub(p D_Period_Sec, i D_Interval) return D_Period_Sec,
    --Constructs a Temporal Element object adding two Periods.
    MEMBER FUNCTION f_add(p1 D_Period_Sec, p2 D_Period_Sec) return REF D_Temp_Element_Sec,
    --Constructs a Temporal Element object subtracting two Periods.
    MEMBER FUNCTION f_sub(p1 D_Period_Sec, p2 D_Period_Sec) return REF D_Temp_Element_Sec,
    --Constructs a Temporal Element object adding a Period to a Temporal Element.
    MEMBER FUNCTION f_add(p D_Period_Sec, te REF D_Temp_Element_Sec) return REF D_Temp_Element_Sec,
    --Constructs a Temporal Element object subtracting a Temporal Element from a Period.
    MEMBER FUNCTION f_sub(p D_Period_Sec, te REF D_Temp_Element_Sec) return REF D_Temp_Element_Sec,
    --Returns a Period object representing the intersection between a Period and a Timepoint.
    MEMBER FUNCTION intersects(p D_Period_Sec, tp D_Timepoint_Sec) return D_Period_Sec,
    --Returns a Period object representing the intersection between two Periods.
    MEMBER FUNCTION intersects(p1 D_Period_Sec, p2 D_Period_Sec) return D_Period_Sec,
    --Returns a Temporal Element object representing the intersection between a Period and a Temporal Element.
    MEMBER FUNCTION intersects(p D_Period_Sec, te REF D_Temp_Element_Sec) return REF D_Temp_Element_Sec,
    --Returns true if the Periods have the same value.
    MEMBER FUNCTION f_eq(p1 D_Period_Sec, p2 D_Period_Sec) return pls_integer,
    --Returns true if the Periods have different value.
    MEMBER FUNCTION f_n_eq(p1 D_Period_Sec, p2 D_Period_Sec) return pls_integer,
    --Returns true if the begin Timepoint of the first Period precedes the begin Timepoint of the second Period.
    MEMBER FUNCTION f_l(p1 D_Period_Sec, p2 D_Period_Sec) return pls_integer,
    --Returns true if the begin Timepoint of the first Period precedes or is equal to the begin Timepoint of the second Period.
    MEMBER FUNCTION f_l_e(p1 D_Period_Sec, p2 D_Period_Sec) return pls_integer,
    --Returns true if the begin Timepoint of the first Period follows the begin Timepoint of the second Period.
    MEMBER FUNCTION f_b(p1 D_Period_Sec, p2 D_Period_Sec) return pls_integer,
    --Returns true if the begin Timepoint of the first Period follows or is equal to the begin Timepoint of the second Period.
    MEMBER FUNCTION f_b_e(p1 D_Period_Sec, p2 D_Period_Sec) return pls_integer,
    --Returns true if the Period overlaps the Timepoint.
    MEMBER FUNCTION f_overlaps(p D_Period_Sec, tp D_Timepoint_Sec) return pls_integer,
    --Returns true if the Period precedes the Timepoint.
    MEMBER FUNCTION f_precedes(p D_Period_Sec, tp D_Timepoint_Sec) return pls_integer,
    --Returns true if the Period meets the Timepoint.
    MEMBER FUNCTION f_meets(p D_Period_Sec, tp D_Timepoint_Sec) return pls_integer,
    --Returns true if the Period is equal to Timepoint.
    MEMBER FUNCTION f_equal(p D_Period_Sec, tp D_Timepoint_Sec) return pls_integer,
    --Returns true if the Period contains the Timepoint.
    MEMBER FUNCTION f_contains(p D_Period_Sec, tp D_Timepoint_Sec) return pls_integer,
    --Returns true if two Periods overlap.
    MEMBER FUNCTION f_overlaps(p1 D_Period_Sec, p2 D_Period_Sec) return pls_integer,
    --Returns true if the first Period precedes the second Period.
    MEMBER FUNCTION f_precedes(p1 D_Period_Sec, p2 D_Period_Sec) return pls_integer,
    --Returns true if the first Period meets the second Period.
    MEMBER FUNCTION f_meets(p1 D_Period_Sec, p2 D_Period_Sec) return pls_integer,
    --Returns true if the first Period is equal to the second Period.
    MEMBER FUNCTION f_equal(p1 D_Period_Sec, p2 D_Period_Sec) return pls_integer,
    --Returns true if the first Period contains the second Period.
    MEMBER FUNCTION f_contains(p1 D_Period_Sec, p2 D_Period_Sec) return pls_integer,
    --Returns true if the Period overlaps the Temporal Element.
    MEMBER FUNCTION f_overlaps(p D_Period_Sec, te REF D_Temp_Element_Sec) return pls_integer,
    --Returns true if the Period precedes the Temporal Element.
    MEMBER FUNCTION f_precedes(p D_Period_Sec, te REF D_Temp_Element_Sec) return pls_integer,
    --Returns true if the Period meets the Temporal Element.
    MEMBER FUNCTION f_meets(p D_Period_Sec, te REF D_Temp_Element_Sec) return pls_integer,
    --Returns true if the Period is equal to the Temporal Element.
    MEMBER FUNCTION f_equal(p D_Period_Sec, te REF D_Temp_Element_Sec) return pls_integer,
    --Returns true if the Timepoint contains the Temporal Element.
    MEMBER FUNCTION f_contains(p D_Period_Sec, te REF D_Temp_Element_Sec) return pls_integer

);
/

-- Type Temp_Element_Y

CREATE OR REPLACE
type Temp_Element_Y as table of D_Period_Y;  -- define type
/

-- Type TEMP_ELEMENT_M

CREATE OR REPLACE
type Temp_Element_M as table of D_Period_M;  -- define type
/

-- Type TEMP_ELEMENT_D

CREATE OR REPLACE
type Temp_Element_D as table of D_Period_D;  -- define type
/

-- Type TEMP_ELEMENT_H

CREATE OR REPLACE
type Temp_Element_H as table of D_Period_H;  -- define type
/

-- Type TEMP_ELEMENT_MIN

CREATE OR REPLACE
type Temp_Element_Min as table of D_Period_Min;  -- define type
/

-- Type TEMP_ELEMENT_SEC

CREATE OR REPLACE
type Temp_Element_Sec as table of D_Period_Sec;  -- define type
/

-- Type D_TEMP_ELEMENT_Y

CREATE OR REPLACE
type D_Temp_Element_Y as object
(
   te Temp_Element_Y,

   --Creates a string for the Temporal Element object.
   MEMBER FUNCTION to_string return Varchar2,
   --Creates a Temporal Element object from the string and assigns it to the current TE.
   MEMBER PROCEDURE to_temporal_element(te_string Varchar2),
   --Creates a Temporal Element object from the string and returns it.
   MEMBER FUNCTION return_temporal_element(te_string Varchar2) return temp_element_y,
   --Returns the first Period of the Temporal Element object.
   MEMBER FUNCTION f_begin return D_Period_Y,
   --Returns the last Period of the Temporal Element object.
   MEMBER FUNCTION f_end return D_Period_Y,
   --Returns the Granularity of the Temporal Element object.
   MEMBER FUNCTION get_granularity return pls_integer,
   --Returns an Interval object representing the sum of the duration of the Periods in the Temporal Element object.
   MEMBER FUNCTION duration return D_Interval,
   --Returns the number of Periods contained in the Temporal Element object.
   MEMBER FUNCTION cardinality return pls_integer,
   --Returns the Period number num inside the Temporal Element object.
   MEMBER FUNCTION go(num pls_integer) return D_Period_Y,
   --Assigns the value of another Temporal Element to the Temporal Element object.
   MEMBER PROCEDURE f_ass_temp_element(te1 D_Temp_Element_Y),
   --Adds a Temporal Element to the Temporal Element object. The result is all the times which belong to both the Temporal Element objects.
   MEMBER PROCEDURE f_add_temp_element(te1 D_Temp_Element_Y),
   --Adds a Period to the Temporal Element object. The result is all the times which belong to either the Period and the Temporal Element.
   MEMBER PROCEDURE f_add_period(p D_Period_Y),
   --Subtracts a Temporal Element from the Temporal Element object. The result is all the times which are included in the current Temporal Elementbut not in the other one.
   MEMBER PROCEDURE f_sub_temp_element(te1 D_Temp_Element_Y),
   --Subtracts a Period from the Temporal Element object. The result is all the times which are included in the current Temporal Element but not in the Period.
   MEMBER PROCEDURE f_sub_period(p D_Period_Y),
   --Constructs a Temporal Element adding a Period to an existing Temporal Element.
   MEMBER FUNCTION f_add(te1 D_Temp_Element_Y, p D_Period_Y) return D_Temp_Element_Y,
   --Constructs a Temporal Element adding two Temporal Elements.
   MEMBER FUNCTION f_add(te1 D_Temp_Element_Y, te2 D_Temp_Element_Y) return D_Temp_Element_Y,
   --Constructs a Temporal Element subtracting a Period to an existing Temporal Element.
   MEMBER FUNCTION f_sub(te1 D_Temp_Element_Y, p D_Period_Y) return D_Temp_Element_Y,
   --Constructs a Temporal Element subtracting two Temporal Elements.
   MEMBER FUNCTION f_sub(te1 D_Temp_Element_Y, te2 D_Temp_Element_Y) return D_Temp_Element_Y,
   --Returns a Temporal Element object representing the intersection between a Temporal Element and a Timepoint.
   MEMBER FUNCTION intersects(te1 D_Temp_Element_Y, tp D_Timepoint_Y) return D_Temp_Element_Y,
   --Returns a Temporal Element object representing the intersection between a Temporal Element and a Period.
   MEMBER FUNCTION intersects(te1 D_Temp_Element_Y, p D_Period_Y) return D_Temp_Element_Y,
   --Returns a Temporal Element object representing the intersection between two Temporal Elements.
   MEMBER FUNCTION intersects(te1 D_Temp_Element_Y, te2 D_Temp_Element_Y) return D_Temp_Element_Y,
   --Returns true if the Temporal Elements have the same value.
   MEMBER FUNCTION f_eq(te1 D_Temp_Element_Y, te2 D_Temp_Element_Y) return pls_integer,
   --Returns true if the Temporal Elements have different value.
   MEMBER FUNCTION f_n_eq(te1 D_Temp_Element_Y, te2 D_Temp_Element_Y) return pls_integer,
   --Returns true if the Temporal Element overlaps the Timepoint.
   MEMBER FUNCTION f_overlaps(te1 D_Temp_Element_Y, tp D_Timepoint_Y) return pls_integer,
   --Returns true if the Temporal Element precedes the Timepoint.
   MEMBER FUNCTION f_precedes(te1 D_Temp_Element_Y, tp D_Timepoint_Y) return pls_integer,
   --Returns true if the Temporal Element meets the Timepoint.
   MEMBER FUNCTION f_meets(te1 D_Temp_Element_Y, tp D_Timepoint_Y) return pls_integer,
   --Returns true if the Temporal Element equal the Timepoint.
   MEMBER FUNCTION f_equal(te1 D_Temp_Element_Y, tp D_Timepoint_Y) return pls_integer,
   --Returns true if the Temporal Element contains the Timepoint.
   MEMBER FUNCTION f_contains(te1 D_Temp_Element_Y, tp D_Timepoint_Y) return pls_integer,
   --Returns true if the Temporal Element overlaps the Period
   MEMBER FUNCTION f_overlaps(te1 D_Temp_Element_Y, p D_Period_Y) return pls_integer,
   --Returns true if the Temporal Element precedes the Period
   MEMBER FUNCTION f_precedes(te1 D_Temp_Element_Y, p D_Period_Y) return pls_integer,
   --Returns true if the Temporal Element meets the Period
   MEMBER FUNCTION f_meets(te1 D_Temp_Element_Y, p D_Period_Y) return pls_integer,
   --Returns true if the Temporal Element equal the Period
   MEMBER FUNCTION f_equal(te1 D_Temp_Element_Y, p D_Period_Y) return pls_integer,
   --Returns true if the Temporal Element contains the Period
   MEMBER FUNCTION f_contains(te1 D_Temp_Element_Y, p D_Period_Y) return pls_integer,
   --Returns true if two Temporal Elements overlap.
   MEMBER FUNCTION f_overlaps(te1 D_Temp_Element_Y, te2 D_Temp_Element_Y) return pls_integer,
   --Returns true if the first Temporal Element precedes the second Temporal Element.
   MEMBER FUNCTION f_precedes(te1 D_Temp_Element_Y, te2 D_Temp_Element_Y) return pls_integer,
   --Returns true if the first Temporal Element meets the second Temporal Element.
   MEMBER FUNCTION f_meets(te1 D_Temp_Element_Y, te2 D_Temp_Element_Y) return pls_integer,
   --Returns true if the first Temporal Element is equal to second Temporal Element.
   MEMBER FUNCTION f_equal(te1 D_Temp_Element_Y, te2 D_Temp_Element_Y) return pls_integer,
   --Returns true if the first Temporal Element contains the second Temporal Element.
   MEMBER FUNCTION f_contains(te1 D_Temp_Element_Y, te2 D_Temp_Element_Y) return pls_integer

);
/

-- Type D_TEMP_ELEMENT_M

CREATE OR REPLACE
type D_Temp_Element_M as object
(
   te Temp_Element_M,

   --Creates a string for the Temporal Element object.
   MEMBER FUNCTION to_string return Varchar2,
   --Creates a Temporal Element object from the string and assigns it to the current TE.
   MEMBER PROCEDURE to_temporal_element(te_string Varchar2),
   --Creates a Temporal Element object from the string and returns it.
   MEMBER FUNCTION return_temporal_element(te_string Varchar2) return Temp_Element_M,
   --Returns the first Period of the Temporal Element object.
   MEMBER FUNCTION f_begin return D_Period_M,
   --Returns the last Period of the Temporal Element object.
   MEMBER FUNCTION f_end return D_Period_M,
   --Returns the Granularity of the Temporal Element object.
   MEMBER FUNCTION get_granularity return pls_integer,
   --Returns an Interval object representing the sum of the duration of the Periods in the Temporal Element object.
   MEMBER FUNCTION duration return D_Interval,
   --Returns the number of Periods contained in the Temporal Element object.
   MEMBER FUNCTION cardinality return pls_integer,
   --Returns the Period number num inside the Temporal Element object.
   MEMBER FUNCTION go(num pls_integer) return D_Period_M,
   --Assigns the value of another Temporal Element to the Temporal Element object.
   MEMBER PROCEDURE f_ass_temp_element(te1 D_Temp_Element_M),
   --Adds a Temporal Element to the Temporal Element object. The result is all the times which belong to both the Temporal Element objects.
   MEMBER PROCEDURE f_add_temp_element(te1 D_Temp_Element_M),
   --Adds a Period to the Temporal Element object. The result is all the times which belong to either the Period and the Temporal Element.
   MEMBER PROCEDURE f_add_period(p D_Period_M),
   --Subtracts a Temporal Element from the Temporal Element object. The result is all the times which are included in the current Temporal Elementbut not in the other one.
   MEMBER PROCEDURE f_sub_temp_element(te1 D_Temp_Element_M),
   --Subtracts a Period from the Temporal Element object. The result is all the times which are included in the current Temporal Element but not in the Period.
   MEMBER PROCEDURE f_sub_period(p D_Period_M),
   --Constructs a Temporal Element adding a Period to an existing Temporal Element.
   MEMBER FUNCTION f_add(te1 D_Temp_Element_M, p D_Period_M) return D_Temp_Element_M,
   --Constructs a Temporal Element adding two Temporal Elements.
   MEMBER FUNCTION f_add(te1 D_Temp_Element_M, te2 D_Temp_Element_M) return D_Temp_Element_M,
   --Constructs a Temporal Element subtracting a Period to an existing Temporal Element.
   MEMBER FUNCTION f_sub(te1 D_Temp_Element_M, p D_Period_M) return D_Temp_Element_M,
   --Constructs a Temporal Element subtracting two Temporal Elements.
   MEMBER FUNCTION f_sub(te1 D_Temp_Element_M, te2 D_Temp_Element_M) return D_Temp_Element_M,
   --Returns a Temporal Element object representing the intersection between a Temporal Element and a Timepoint.
   MEMBER FUNCTION intersects(te1 D_Temp_Element_M, tp D_Timepoint_M) return D_Temp_Element_M,
   --Returns a Temporal Element object representing the intersection between a Temporal Element and a Period.
   MEMBER FUNCTION intersects(te1 D_Temp_Element_M, p D_Period_M) return D_Temp_Element_M,
   --Returns a Temporal Element object representing the intersection between two Temporal Elements.
   MEMBER FUNCTION intersects(te1 D_Temp_Element_M, te2 D_Temp_Element_M) return D_Temp_Element_M,
   --Returns true if the Temporal Elements have the same value.
   MEMBER FUNCTION f_eq(te1 D_Temp_Element_M, te2 D_Temp_Element_M) return pls_integer,
   --Returns true if the Temporal Elements have different value.
   MEMBER FUNCTION f_n_eq(te1 D_Temp_Element_M, te2 D_Temp_Element_M) return pls_integer,
   --Returns true if the Temporal Element overlaps the Timepoint.
   MEMBER FUNCTION f_overlaps(te1 D_Temp_Element_M, tp D_Timepoint_M) return pls_integer,
   --Returns true if the Temporal Element precedes the Timepoint.
   MEMBER FUNCTION f_precedes(te1 D_Temp_Element_M, tp D_Timepoint_M) return pls_integer,
   --Returns true if the Temporal Element meets the Timepoint.
   MEMBER FUNCTION f_meets(te1 D_Temp_Element_M, tp D_Timepoint_M) return pls_integer,
   --Returns true if the Temporal Element equal the Timepoint.
   MEMBER FUNCTION f_equal(te1 D_Temp_Element_M, tp D_Timepoint_M) return pls_integer,
   --Returns true if the Temporal Element contains the Timepoint.
   MEMBER FUNCTION f_contains(te1 D_Temp_Element_M, tp D_Timepoint_M) return pls_integer,
   --Returns true if the Temporal Element overlaps the Period
   MEMBER FUNCTION f_overlaps(te1 D_Temp_Element_M, p D_Period_M) return pls_integer,
   --Returns true if the Temporal Element precedes the Period
   MEMBER FUNCTION f_precedes(te1 D_Temp_Element_M, p D_Period_M) return pls_integer,
   --Returns true if the Temporal Element meets the Period
   MEMBER FUNCTION f_meets(te1 D_Temp_Element_M, p D_Period_M) return pls_integer,
   --Returns true if the Temporal Element equal the Period
   MEMBER FUNCTION f_equal(te1 D_Temp_Element_M, p D_Period_M) return pls_integer,
   --Returns true if the Temporal Element contains the Period
   MEMBER FUNCTION f_contains(te1 D_Temp_Element_M, p D_Period_M) return pls_integer,
   --Returns true if two Temporal Elements overlap.
   MEMBER FUNCTION f_overlaps(te1 D_Temp_Element_M, te2 D_Temp_Element_M) return pls_integer,
   --Returns true if the first Temporal Element precedes the second Temporal Element.
   MEMBER FUNCTION f_precedes(te1 D_Temp_Element_M, te2 D_Temp_Element_M) return pls_integer,
   --Returns true if the first Temporal Element meets the second Temporal Element.
   MEMBER FUNCTION f_meets(te1 D_Temp_Element_M, te2 D_Temp_Element_M) return pls_integer,
   --Returns true if the first Temporal Element is equal to second Temporal Element.
   MEMBER FUNCTION f_equal(te1 D_Temp_Element_M, te2 D_Temp_Element_M) return pls_integer,
   --Returns true if the first Temporal Element contains the second Temporal Element.
   MEMBER FUNCTION f_contains(te1 D_Temp_Element_M, te2 D_Temp_Element_M) return pls_integer

);
/

-- Type D_TEMP_ELEMENT_D

CREATE OR REPLACE
type D_Temp_Element_D as object
(
   te Temp_Element_D,

   --Creates a string for the Temporal Element object.
   MEMBER FUNCTION to_string return Varchar2,
   --Creates a Temporal Element object from the string and assigns it to the current TE.
   MEMBER PROCEDURE to_temporal_element(te_string Varchar2),
   --Creates a Temporal Element object from the string and returns it.
   MEMBER FUNCTION return_temporal_element(te_string Varchar2) return Temp_Element_D,
   --Returns the first Period of the Temporal Element object.
   MEMBER FUNCTION f_begin return D_Period_D,
   --Returns the last Period of the Temporal Element object.
   MEMBER FUNCTION f_end return D_Period_D,
   --Returns the Granularity of the Temporal Element object.
   MEMBER FUNCTION get_granularity return pls_integer,
   --Returns an Interval object representing the sum of the duration of the Periods in the Temporal Element object.
   MEMBER FUNCTION duration return D_Interval,
   --Returns the number of Periods contained in the Temporal Element object.
   MEMBER FUNCTION cardinality return pls_integer,
   --Returns the Period number num inside the Temporal Element object.
   MEMBER FUNCTION go(num pls_integer) return D_Period_D,
   --Assigns the value of another Temporal Element to the Temporal Element object.
   MEMBER PROCEDURE f_ass_temp_element(te1 D_Temp_Element_D),
   --Adds a Temporal Element to the Temporal Element object. The result is all the times which belong to both the Temporal Element objects.
   MEMBER PROCEDURE f_add_temp_element(te1 D_Temp_Element_D),
   --Adds a Period to the Temporal Element object. The result is all the times which belong to either the Period and the Temporal Element.
   MEMBER PROCEDURE f_add_period(p D_Period_D),
   --Subtracts a Temporal Element from the Temporal Element object. The result is all the times which are included in the current Temporal Elementbut not in the other one.
   MEMBER PROCEDURE f_sub_temp_element(te1 D_Temp_Element_D),
   --Subtracts a Period from the Temporal Element object. The result is all the times which are included in the current Temporal Element but not in the Period.
   MEMBER PROCEDURE f_sub_period(p D_Period_D),
   --Constructs a Temporal Element adding a Period to an existing Temporal Element.
   MEMBER FUNCTION f_add(te1 D_Temp_Element_D, p D_Period_D) return D_Temp_Element_D,
   --Constructs a Temporal Element adding two Temporal Elements.
   MEMBER FUNCTION f_add(te1 D_Temp_Element_D, te2 D_Temp_Element_D) return D_Temp_Element_D,
   --Constructs a Temporal Element subtracting a Period to an existing Temporal Element.
   MEMBER FUNCTION f_sub(te1 D_Temp_Element_D, p D_Period_D) return D_Temp_Element_D,
   --Constructs a Temporal Element subtracting two Temporal Elements.
   MEMBER FUNCTION f_sub(te1 D_Temp_Element_D, te2 D_Temp_Element_D) return D_Temp_Element_D,
   --Returns a Temporal Element object representing the intersection between a Temporal Element and a Timepoint.
   MEMBER FUNCTION intersects(te1 D_Temp_Element_D, tp D_Timepoint_D) return D_Temp_Element_D,
   --Returns a Temporal Element object representing the intersection between a Temporal Element and a Period.
   MEMBER FUNCTION intersects(te1 D_Temp_Element_D, p D_Period_D) return D_Temp_Element_D,
   --Returns a Temporal Element object representing the intersection between two Temporal Elements.
   MEMBER FUNCTION intersects(te1 D_Temp_Element_D, te2 D_Temp_Element_D) return D_Temp_Element_D,
   --Returns true if the Temporal Elements have the same value.
   MEMBER FUNCTION f_eq(te1 D_Temp_Element_D, te2 D_Temp_Element_D) return pls_integer,
   --Returns true if the Temporal Elements have different value.
   MEMBER FUNCTION f_n_eq(te1 D_Temp_Element_D, te2 D_Temp_Element_D) return pls_integer,
   --Returns true if the Temporal Element overlaps the Timepoint.
   MEMBER FUNCTION f_overlaps(te1 D_Temp_Element_D, tp D_Timepoint_D) return pls_integer,
   --Returns true if the Temporal Element precedes the Timepoint.
   MEMBER FUNCTION f_precedes(te1 D_Temp_Element_D, tp D_Timepoint_D) return pls_integer,
   --Returns true if the Temporal Element meets the Timepoint.
   MEMBER FUNCTION f_meets(te1 D_Temp_Element_D, tp D_Timepoint_D) return pls_integer,
   --Returns true if the Temporal Element equal the Timepoint.
   MEMBER FUNCTION f_equal(te1 D_Temp_Element_D, tp D_Timepoint_D) return pls_integer,
   --Returns true if the Temporal Element contains the Timepoint.
   MEMBER FUNCTION f_contains(te1 D_Temp_Element_D, tp D_Timepoint_D) return pls_integer,
   --Returns true if the Temporal Element overlaps the Period
   MEMBER FUNCTION f_overlaps(te1 D_Temp_Element_D, p D_Period_D) return pls_integer,
   --Returns true if the Temporal Element precedes the Period
   MEMBER FUNCTION f_precedes(te1 D_Temp_Element_D, p D_Period_D) return pls_integer,
   --Returns true if the Temporal Element meets the Period
   MEMBER FUNCTION f_meets(te1 D_Temp_Element_D, p D_Period_D) return pls_integer,
   --Returns true if the Temporal Element equal the Period
   MEMBER FUNCTION f_equal(te1 D_Temp_Element_D, p D_Period_D) return pls_integer,
   --Returns true if the Temporal Element contains the Period
   MEMBER FUNCTION f_contains(te1 D_Temp_Element_D, p D_Period_D) return pls_integer,
   --Returns true if two Temporal Elements overlap.
   MEMBER FUNCTION f_overlaps(te1 D_Temp_Element_D, te2 D_Temp_Element_D) return pls_integer,
   --Returns true if the first Temporal Element precedes the second Temporal Element.
   MEMBER FUNCTION f_precedes(te1 D_Temp_Element_D, te2 D_Temp_Element_D) return pls_integer,
   --Returns true if the first Temporal Element meets the second Temporal Element.
   MEMBER FUNCTION f_meets(te1 D_Temp_Element_D, te2 D_Temp_Element_D) return pls_integer,
   --Returns true if the first Temporal Element is equal to second Temporal Element.
   MEMBER FUNCTION f_equal(te1 D_Temp_Element_D, te2 D_Temp_Element_D) return pls_integer,
   --Returns true if the first Temporal Element contains the second Temporal Element.
   MEMBER FUNCTION f_contains(te1 D_Temp_Element_D, te2 D_Temp_Element_D) return pls_integer

);
/

-- Type D_TEMP_ELEMENT_H

CREATE OR REPLACE
type D_Temp_Element_H as object
(
   te Temp_Element_H,

   --Creates a string for the Temporal Element object.
   MEMBER FUNCTION to_string return Varchar2,
   --Creates a Temporal Element object from the string and assigns it to the current TE.
   MEMBER PROCEDURE to_temporal_element(te_string Varchar2),
   --Creates a Temporal Element object from the string and returns it.
   MEMBER FUNCTION return_temporal_element(te_string Varchar2) return Temp_Element_H,
   --Returns the first Period of the Temporal Element object.
   MEMBER FUNCTION f_begin return D_Period_H,
   --Returns the last Period of the Temporal Element object.
   MEMBER FUNCTION f_end return D_Period_H,
   --Returns the Granularity of the Temporal Element object.
   MEMBER FUNCTION get_granularity return pls_integer,
   --Returns an Interval object representing the sum of the duration of the Periods in the Temporal Element object.
   MEMBER FUNCTION duration return D_Interval,
   --Returns the number of Periods contained in the Temporal Element object.
   MEMBER FUNCTION cardinality return pls_integer,
   --Returns the Period number num inside the Temporal Element object.
   MEMBER FUNCTION go(num pls_integer) return D_Period_H,
   --Assigns the value of another Temporal Element to the Temporal Element object.
   MEMBER PROCEDURE f_ass_temp_element(te1 D_Temp_Element_H),
   --Adds a Temporal Element to the Temporal Element object. The result is all the times which belong to both the Temporal Element objects.
   MEMBER PROCEDURE f_add_temp_element(te1 D_Temp_Element_H),
   --Adds a Period to the Temporal Element object. The result is all the times which belong to either the Period and the Temporal Element.
   MEMBER PROCEDURE f_add_period(p D_Period_H),
   --Subtracts a Temporal Element from the Temporal Element object. The result is all the times which are included in the current Temporal Elementbut not in the other one.
   MEMBER PROCEDURE f_sub_temp_element(te1 D_Temp_Element_H),
   --Subtracts a Period from the Temporal Element object. The result is all the times which are included in the current Temporal Element but not in the Period.
   MEMBER PROCEDURE f_sub_period(p D_Period_H),
   --Constructs a Temporal Element adding a Period to an existing Temporal Element.
   MEMBER FUNCTION f_add(te1 D_Temp_Element_H, p D_Period_H) return D_Temp_Element_H,
   --Constructs a Temporal Element adding two Temporal Elements.
   MEMBER FUNCTION f_add(te1 D_Temp_Element_H, te2 D_Temp_Element_H) return D_Temp_Element_H,
   --Constructs a Temporal Element subtracting a Period to an existing Temporal Element.
   MEMBER FUNCTION f_sub(te1 D_Temp_Element_H, p D_Period_H) return D_Temp_Element_H,
   --Constructs a Temporal Element subtracting two Temporal Elements.
   MEMBER FUNCTION f_sub(te1 D_Temp_Element_H, te2 D_Temp_Element_H) return D_Temp_Element_H,
   --Returns a Temporal Element object representing the intersection between a Temporal Element and a Timepoint.
   MEMBER FUNCTION intersects(te1 D_Temp_Element_H, tp D_Timepoint_H) return D_Temp_Element_H,
   --Returns a Temporal Element object representing the intersection between a Temporal Element and a Period.
   MEMBER FUNCTION intersects(te1 D_Temp_Element_H, p D_Period_H) return D_Temp_Element_H,
   --Returns a Temporal Element object representing the intersection between two Temporal Elements.
   MEMBER FUNCTION intersects(te1 D_Temp_Element_H, te2 D_Temp_Element_H) return D_Temp_Element_H,
   --Returns true if the Temporal Elements have the same value.
   MEMBER FUNCTION f_eq(te1 D_Temp_Element_H, te2 D_Temp_Element_H) return pls_integer,
   --Returns true if the Temporal Elements have different value.
   MEMBER FUNCTION f_n_eq(te1 D_Temp_Element_H, te2 D_Temp_Element_H) return pls_integer,
   --Returns true if the Temporal Element overlaps the Timepoint.
   MEMBER FUNCTION f_overlaps(te1 D_Temp_Element_H, tp D_Timepoint_H) return pls_integer,
   --Returns true if the Temporal Element precedes the Timepoint.
   MEMBER FUNCTION f_precedes(te1 D_Temp_Element_H, tp D_Timepoint_H) return pls_integer,
   --Returns true if the Temporal Element meets the Timepoint.
   MEMBER FUNCTION f_meets(te1 D_Temp_Element_H, tp D_Timepoint_H) return pls_integer,
   --Returns true if the Temporal Element equal the Timepoint.
   MEMBER FUNCTION f_equal(te1 D_Temp_Element_H, tp D_Timepoint_H) return pls_integer,
   --Returns true if the Temporal Element contains the Timepoint.
   MEMBER FUNCTION f_contains(te1 D_Temp_Element_H, tp D_Timepoint_H) return pls_integer,
   --Returns true if the Temporal Element overlaps the Period
   MEMBER FUNCTION f_overlaps(te1 D_Temp_Element_H, p D_Period_H) return pls_integer,
   --Returns true if the Temporal Element precedes the Period
   MEMBER FUNCTION f_precedes(te1 D_Temp_Element_H, p D_Period_H) return pls_integer,
   --Returns true if the Temporal Element meets the Period
   MEMBER FUNCTION f_meets(te1 D_Temp_Element_H, p D_Period_H) return pls_integer,
   --Returns true if the Temporal Element equal the Period
   MEMBER FUNCTION f_equal(te1 D_Temp_Element_H, p D_Period_H) return pls_integer,
   --Returns true if the Temporal Element contains the Period
   MEMBER FUNCTION f_contains(te1 D_Temp_Element_H, p D_Period_H) return pls_integer,
   --Returns true if two Temporal Elements overlap.
   MEMBER FUNCTION f_overlaps(te1 D_Temp_Element_H, te2 D_Temp_Element_H) return pls_integer,
   --Returns true if the first Temporal Element precedes the second Temporal Element.
   MEMBER FUNCTION f_precedes(te1 D_Temp_Element_H, te2 D_Temp_Element_H) return pls_integer,
   --Returns true if the first Temporal Element meets the second Temporal Element.
   MEMBER FUNCTION f_meets(te1 D_Temp_Element_H, te2 D_Temp_Element_H) return pls_integer,
   --Returns true if the first Temporal Element is equal to second Temporal Element.
   MEMBER FUNCTION f_equal(te1 D_Temp_Element_H, te2 D_Temp_Element_H) return pls_integer,
   --Returns true if the first Temporal Element contains the second Temporal Element.
   MEMBER FUNCTION f_contains(te1 D_Temp_Element_H, te2 D_Temp_Element_H) return pls_integer

);
/

-- Type D_TEMP_ELEMENT_MIN

CREATE OR REPLACE
type D_Temp_Element_Min as object
(
   te Temp_Element_Min,

   --Creates a string for the Temporal Element object.
   MEMBER FUNCTION to_string return Varchar2,
   --Creates a Temporal Element object from the string and assigns it to the current TE.
   MEMBER PROCEDURE to_temporal_element(te_string Varchar2),
   --Creates a Temporal Element object from the string and returns it.
   MEMBER FUNCTION return_temporal_element(te_string Varchar2) return Temp_Element_Min,
   --Returns the first Period of the Temporal Element object.
   MEMBER FUNCTION f_begin return D_Period_Min,
   --Returns the last Period of the Temporal Element object.
   MEMBER FUNCTION f_end return D_Period_Min,
   --Returns the Granularity of the Temporal Element object.
   MEMBER FUNCTION get_granularity return pls_integer,
   --Returns an Interval object representing the sum of the duration of the Periods in the Temporal Element object.
   MEMBER FUNCTION duration return D_Interval,
   --Returns the number of Periods contained in the Temporal Element object.
   MEMBER FUNCTION cardinality return pls_integer,
   --Returns the Period number num inside the Temporal Element object.
   MEMBER FUNCTION go(num pls_integer) return D_Period_Min,
   --Assigns the value of another Temporal Element to the Temporal Element object.
   MEMBER PROCEDURE f_ass_temp_element(te1 D_Temp_Element_Min),
   --Adds a Temporal Element to the Temporal Element object. The result is all the times which belong to both the Temporal Element objects.
   MEMBER PROCEDURE f_add_temp_element(te1 D_Temp_Element_Min),
   --Adds a Period to the Temporal Element object. The result is all the times which belong to either the Period and the Temporal Element.
   MEMBER PROCEDURE f_add_period(p D_Period_Min),
   --Subtracts a Temporal Element from the Temporal Element object. The result is all the times which are included in the current Temporal Elementbut not in the other one.
   MEMBER PROCEDURE f_sub_temp_element(te1 D_Temp_Element_Min),
   --Subtracts a Period from the Temporal Element object. The result is all the times which are included in the current Temporal Element but not in the Period.
   MEMBER PROCEDURE f_sub_period(p D_Period_Min),
   --Constructs a Temporal Element adding a Period to an existing Temporal Element.
   MEMBER FUNCTION f_add(te1 D_Temp_Element_Min, p D_Period_Min) return D_Temp_Element_Min,
   --Constructs a Temporal Element adding two Temporal Elements.
   MEMBER FUNCTION f_add(te1 D_Temp_Element_Min, te2 D_Temp_Element_Min) return D_Temp_Element_Min,
   --Constructs a Temporal Element subtracting a Period to an existing Temporal Element.
   MEMBER FUNCTION f_sub(te1 D_Temp_Element_Min, p D_Period_Min) return D_Temp_Element_Min,
   --Constructs a Temporal Element subtracting two Temporal Elements.
   MEMBER FUNCTION f_sub(te1 D_Temp_Element_Min, te2 D_Temp_Element_Min) return D_Temp_Element_Min,
   --Returns a Temporal Element object representing the intersection between a Temporal Element and a Timepoint.
   MEMBER FUNCTION intersects(te1 D_Temp_Element_Min, tp D_Timepoint_Min) return D_Temp_Element_Min,
   --Returns a Temporal Element object representing the intersection between a Temporal Element and a Period.
   MEMBER FUNCTION intersects(te1 D_Temp_Element_Min, p D_Period_Min) return D_Temp_Element_Min,
   --Returns a Temporal Element object representing the intersection between two Temporal Elements.
   MEMBER FUNCTION intersects(te1 D_Temp_Element_Min, te2 D_Temp_Element_Min) return D_Temp_Element_Min,
   --Returns true if the Temporal Elements have the same value.
   MEMBER FUNCTION f_eq(te1 D_Temp_Element_Min, te2 D_Temp_Element_Min) return pls_integer,
   --Returns true if the Temporal Elements have different value.
   MEMBER FUNCTION f_n_eq(te1 D_Temp_Element_Min, te2 D_Temp_Element_Min) return pls_integer,
   --Returns true if the Temporal Element overlaps the Timepoint.
   MEMBER FUNCTION f_overlaps(te1 D_Temp_Element_Min, tp D_Timepoint_Min) return pls_integer,
   --Returns true if the Temporal Element precedes the Timepoint.
   MEMBER FUNCTION f_precedes(te1 D_Temp_Element_Min, tp D_Timepoint_Min) return pls_integer,
   --Returns true if the Temporal Element meets the Timepoint.
   MEMBER FUNCTION f_meets(te1 D_Temp_Element_Min, tp D_Timepoint_Min) return pls_integer,
   --Returns true if the Temporal Element equal the Timepoint.
   MEMBER FUNCTION f_equal(te1 D_Temp_Element_Min, tp D_Timepoint_Min) return pls_integer,
   --Returns true if the Temporal Element contains the Timepoint.
   MEMBER FUNCTION f_contains(te1 D_Temp_Element_Min, tp D_Timepoint_Min) return pls_integer,
   --Returns true if the Temporal Element overlaps the Period
   MEMBER FUNCTION f_overlaps(te1 D_Temp_Element_Min, p D_Period_Min) return pls_integer,
   --Returns true if the Temporal Element precedes the Period
   MEMBER FUNCTION f_precedes(te1 D_Temp_Element_Min, p D_Period_Min) return pls_integer,
   --Returns true if the Temporal Element meets the Period
   MEMBER FUNCTION f_meets(te1 D_Temp_Element_Min, p D_Period_Min) return pls_integer,
   --Returns true if the Temporal Element equal the Period
   MEMBER FUNCTION f_equal(te1 D_Temp_Element_Min, p D_Period_Min) return pls_integer,
   --Returns true if the Temporal Element contains the Period
   MEMBER FUNCTION f_contains(te1 D_Temp_Element_Min, p D_Period_Min) return pls_integer,
   --Returns true if two Temporal Elements overlap.
   MEMBER FUNCTION f_overlaps(te1 D_Temp_Element_Min, te2 D_Temp_Element_Min) return pls_integer,
   --Returns true if the first Temporal Element precedes the second Temporal Element.
   MEMBER FUNCTION f_precedes(te1 D_Temp_Element_Min, te2 D_Temp_Element_Min) return pls_integer,
   --Returns true if the first Temporal Element meets the second Temporal Element.
   MEMBER FUNCTION f_meets(te1 D_Temp_Element_Min, te2 D_Temp_Element_Min) return pls_integer,
   --Returns true if the first Temporal Element is equal to second Temporal Element.
   MEMBER FUNCTION f_equal(te1 D_Temp_Element_Min, te2 D_Temp_Element_Min) return pls_integer,
   --Returns true if the first Temporal Element contains the second Temporal Element.
   MEMBER FUNCTION f_contains(te1 D_Temp_Element_Min, te2 D_Temp_Element_Min) return pls_integer

);
/

-- Type D_TEMP_ELEMENT_SEC

CREATE OR REPLACE
type D_Temp_Element_Sec as object
(
   te Temp_Element_Sec,

   --Creates a string for the Temporal Element object.
   MEMBER FUNCTION to_string return Varchar2,
   --Creates a Temporal Element object from the string and assigns it to the current TE.
   MEMBER PROCEDURE to_temporal_element(te_string Varchar2),
   --Creates a Temporal Element object from the string and returns it.
   MEMBER FUNCTION return_temporal_element(te_string Varchar2) return Temp_Element_Sec,
   --Returns the first Period of the Temporal Element object.
   MEMBER FUNCTION f_begin return D_Period_Sec,
   --Returns the last Period of the Temporal Element object.
   MEMBER FUNCTION f_end return D_Period_Sec,
   --Returns the Granularity of the Temporal Element object.
   MEMBER FUNCTION get_granularity return pls_integer,
   --Returns an Interval object representing the sum of the duration of the Periods in the Temporal Element object.
   MEMBER FUNCTION duration return D_Interval,
   --Returns the number of Periods contained in the Temporal Element object.
   MEMBER FUNCTION cardinality return pls_integer,
   --Returns the Period number num inside the Temporal Element object.
   MEMBER FUNCTION go(num pls_integer) return D_Period_Sec,
   --Assigns the value of another Temporal Element to the Temporal Element object.
   MEMBER PROCEDURE f_ass_temp_element(te1 D_Temp_Element_Sec),
   --Adds a Temporal Element to the Temporal Element object. The result is all the times which belong to both the Temporal Element objects.
   MEMBER PROCEDURE f_add_temp_element(te1 D_Temp_Element_Sec),
   --Adds a Period to the Temporal Element object. The result is all the times which belong to either the Period and the Temporal Element.
   MEMBER PROCEDURE f_add_period(p D_Period_Sec),
   --Subtracts a Temporal Element from the Temporal Element object. The result is all the times which are included in the current Temporal Elementbut not in the other one.
   MEMBER PROCEDURE f_sub_temp_element(te1 D_Temp_Element_Sec),
   --Subtracts a Period from the Temporal Element object. The result is all the times which are included in the current Temporal Element but not in the Period.
   MEMBER PROCEDURE f_sub_period(p D_Period_Sec),
   --Constructs a Temporal Element adding a Period to an existing Temporal Element.
   MEMBER FUNCTION f_add(te1 D_Temp_Element_Sec, p D_Period_Sec) return D_Temp_Element_Sec,
   --Constructs a Temporal Element adding two Temporal Elements.
   MEMBER FUNCTION f_add(te1 D_Temp_Element_Sec, te2 D_Temp_Element_Sec) return D_Temp_Element_Sec,
   --Constructs a Temporal Element subtracting a Period to an existing Temporal Element.
   MEMBER FUNCTION f_sub(te1 D_Temp_Element_Sec, p D_Period_Sec) return D_Temp_Element_Sec,
   --Constructs a Temporal Element subtracting two Temporal Elements.
   MEMBER FUNCTION f_sub(te1 D_Temp_Element_Sec, te2 D_Temp_Element_Sec) return D_Temp_Element_Sec,
   --Returns a Temporal Element object representing the intersection between a Temporal Element and a Timepoint.
   MEMBER FUNCTION intersects(te1 D_Temp_Element_Sec, tp D_Timepoint_Sec) return D_Temp_Element_Sec,
   --Returns a Temporal Element object representing the intersection between a Temporal Element and a Period.
   MEMBER FUNCTION intersects(te1 D_Temp_Element_Sec, p D_Period_Sec) return D_Temp_Element_Sec,
   --Returns a Temporal Element object representing the intersection between two Temporal Elements.
   MEMBER FUNCTION intersects(te1 D_Temp_Element_Sec, te2 D_Temp_Element_Sec) return D_Temp_Element_Sec,
   --Returns true if the Temporal Elements have the same value.
   MEMBER FUNCTION f_eq(te1 D_Temp_Element_Sec, te2 D_Temp_Element_Sec) return pls_integer,
   --Returns true if the Temporal Elements have different value.
   MEMBER FUNCTION f_n_eq(te1 D_Temp_Element_Sec, te2 D_Temp_Element_Sec) return pls_integer,
   --Returns true if the Temporal Element overlaps the Timepoint.
   MEMBER FUNCTION f_overlaps(te1 D_Temp_Element_Sec, tp D_Timepoint_Sec) return pls_integer,
   --Returns true if the Temporal Element precedes the Timepoint.
   MEMBER FUNCTION f_precedes(te1 D_Temp_Element_Sec, tp D_Timepoint_Sec) return pls_integer,
   --Returns true if the Temporal Element meets the Timepoint.
   MEMBER FUNCTION f_meets(te1 D_Temp_Element_Sec, tp D_Timepoint_Sec) return pls_integer,
   --Returns true if the Temporal Element equal the Timepoint.
   MEMBER FUNCTION f_equal(te1 D_Temp_Element_Sec, tp D_Timepoint_Sec) return pls_integer,
   --Returns true if the Temporal Element contains the Timepoint.
   MEMBER FUNCTION f_contains(te1 D_Temp_Element_Sec, tp D_Timepoint_Sec) return pls_integer,
   --Returns true if the Temporal Element overlaps the Period
   MEMBER FUNCTION f_overlaps(te1 D_Temp_Element_Sec, p D_Period_Sec) return pls_integer,
   --Returns true if the Temporal Element precedes the Period
   MEMBER FUNCTION f_precedes(te1 D_Temp_Element_Sec, p D_Period_Sec) return pls_integer,
   --Returns true if the Temporal Element meets the Period
   MEMBER FUNCTION f_meets(te1 D_Temp_Element_Sec, p D_Period_Sec) return pls_integer,
   --Returns true if the Temporal Element equal the Period
   MEMBER FUNCTION f_equal(te1 D_Temp_Element_Sec, p D_Period_Sec) return pls_integer,
   --Returns true if the Temporal Element contains the Period
   MEMBER FUNCTION f_contains(te1 D_Temp_Element_Sec, p D_Period_Sec) return pls_integer,
   --Returns true if two Temporal Elements overlap.
   MEMBER FUNCTION f_overlaps(te1 D_Temp_Element_Sec, te2 D_Temp_Element_Sec) return pls_integer,
   --Returns true if the first Temporal Element precedes the second Temporal Element.
   MEMBER FUNCTION f_precedes(te1 D_Temp_Element_Sec, te2 D_Temp_Element_Sec) return pls_integer,
   --Returns true if the first Temporal Element meets the second Temporal Element.
   MEMBER FUNCTION f_meets(te1 D_Temp_Element_Sec, te2 D_Temp_Element_Sec) return pls_integer,
   --Returns true if the first Temporal Element is equal to second Temporal Element.
   MEMBER FUNCTION f_equal(te1 D_Temp_Element_Sec, te2 D_Temp_Element_Sec) return pls_integer,
   --Returns true if the first Temporal Element contains the second Temporal Element.
   MEMBER FUNCTION f_contains(te1 D_Temp_Element_Sec, te2 D_Temp_Element_Sec) return pls_integer

);
/

-- CREATE DUMMY OBJECT TABLES

create table timestamps of D_Timestamp
/
create table periods_y of D_Period_Y
/
create table periods_m of D_Period_M
/
create table periods_d of D_Period_D
/
create table periods_h of D_Period_H
/
create table periods_min of D_Period_Min
/
create table periods_sec of D_Period_Sec
/
create table temp_elements_y of D_Temp_Element_Y nested table te store as te_y_tab
/
create table temp_elements_m of D_Temp_Element_M nested table te store as te_m_tab
/
create table temp_elements_d of D_Temp_Element_D nested table te store as te_d_tab
/
create table temp_elements_h of D_Temp_Element_H nested table te store as te_h_tab
/
create table temp_elements_min of D_Temp_Element_Min nested table te store as te_min_tab
/
create table temp_elements_sec of D_Temp_Element_Sec nested table te store as te_sec_tab
/

-- Type body D_INTERVAL

CREATE OR REPLACE
type body D_Interval is

    MEMBER FUNCTION day return double precision is
      d double precision := D_Interval_Package.day(m_Value);
    begin
      return d;
    end;

    MEMBER FUNCTION hour return pls_integer is
      h pls_integer := D_Interval_Package.hour(m_Value);
    begin
      return h;
    end;

    MEMBER FUNCTION minute return pls_integer is
      m pls_integer := D_Interval_Package.minute(m_Value);
    begin
      return m;
    end;

    MEMBER FUNCTION second return double precision is
      s double precision := D_Interval_Package.second(m_Value);
    begin
      return s;
    end;

    MEMBER FUNCTION is_zero return pls_integer is
      z pls_integer := D_Interval_Package.is_zero(m_Value);
    begin
      return z;
    end;

    MEMBER FUNCTION to_string return varchar2 is
      s varchar2(32) := D_Interval_Package.to_string(m_Value);
    begin
      return s;
    end;

    MEMBER PROCEDURE f_ass(i D_Interval) is
    begin
      m_Value := D_Interval_Package.f_ass(m_Value, i.m_Value);
    end;

    MEMBER PROCEDURE f_add_to_self(i D_Interval) is
    begin
      m_Value := D_Interval_Package.f_add_to_self(m_Value, i.m_Value);
    end;

    MEMBER PROCEDURE f_sub_to_self(i D_Interval) is
    begin
      m_Value := D_Interval_Package.f_sub_to_self(m_Value, i.m_Value);
    end;

    MEMBER PROCEDURE f_mul_to_self(i pls_integer) is
    begin
      m_Value := D_Interval_Package.f_mul_to_self(m_Value, i);
    end;

    MEMBER PROCEDURE f_div_to_self(i pls_integer) is
    begin
      m_Value := D_Interval_Package.f_div_to_self(m_Value, i);
    end;

    MEMBER PROCEDURE f_min is
    begin
      m_Value := D_Interval_Package.f_min(m_Value);
    end;

    MEMBER FUNCTION f_add(i D_Interval, j D_Interval) return D_Interval is
      v double precision := D_Interval_Package.f_add(i.m_Value, j.m_Value);
    begin
      return D_Interval(v);
    end;

    MEMBER FUNCTION f_sub(i D_Interval, j D_Interval) return D_Interval is
      v double precision := D_Interval_Package.f_sub(i.m_Value, j.m_Value);
    begin
      return D_Interval(v);
    end;

    MEMBER FUNCTION f_mul(i D_Interval, j pls_integer) return D_Interval is
      v double precision := D_Interval_Package.f_mul(i.m_Value, j);
    begin
      return D_Interval(v);
    end;

    MEMBER FUNCTION f_div(i D_Interval, j pls_integer) return D_Interval is
      v double precision := D_Interval_Package.f_div(i.m_Value, j);
    begin
      return D_Interval(v);
    end;

    MEMBER FUNCTION f_eq(i D_Interval, j D_Interval) return pls_integer is
       b pls_integer := D_Interval_Package.f_eq(i.m_Value, j.m_Value);
    begin
      return b;
    end;

    MEMBER FUNCTION f_n_eq(i D_Interval, j D_Interval) return pls_integer is
       b pls_integer := D_Interval_Package.f_n_eq(i.m_Value, j.m_Value);
    begin
      return b;
    end;

    MEMBER FUNCTION f_l(i D_Interval, j D_Interval) return pls_integer is
       b pls_integer := D_Interval_Package.f_l(i.m_Value, j.m_Value);
    begin
      return b;
    end;

    MEMBER FUNCTION f_l_e(i D_Interval, j D_Interval) return pls_integer is
       b pls_integer := D_Interval_Package.f_l_e(i.m_Value, j.m_Value);
    begin
      return b;
    end;

    MEMBER FUNCTION f_b(i D_Interval, j D_Interval) return pls_integer is
       b pls_integer := D_Interval_Package.f_b(i.m_Value, j.m_Value);
    begin
      return b;
    end;

    MEMBER FUNCTION f_b_e(i D_Interval, j D_Interval) return pls_integer is
       b pls_integer := D_Interval_Package.f_b_e(i.m_Value, j.m_Value);
    begin
      return b;
    end;

end;
/

-- Type body D_DATE

CREATE OR REPLACE
type body D_Date is

   MEMBER FUNCTION year return pls_integer is
     y pls_integer := D_Date_Package.year(m_Year, m_Month, m_Day);
   begin
     return y;
   end;

   MEMBER FUNCTION month return pls_integer is
     m pls_integer := D_Date_Package.month(m_Year, m_Month, m_Day);
   begin
     return m;
   end;

   MEMBER FUNCTION day return pls_integer is
     d pls_integer := D_Date_Package.day(m_Year, m_Month, m_Day);
   begin
     return d;
   end;

   MEMBER FUNCTION day_of_year return pls_integer is
     d_of_y pls_integer := D_Date_Package.day_of_year(m_Year, m_Month, m_Day);
   begin
     return d_of_y;
   end;

   MEMBER FUNCTION day_of_week return pls_integer is
     d_of_w pls_integer := D_Date_Package.day_of_week(m_Year, m_Month, m_Day);
   begin
     return d_of_w;
   end;

   MEMBER FUNCTION month_of_year return pls_integer is
     m_of_y pls_integer := D_Date_Package.month_of_year(m_Year, m_Month, m_Day);
   begin
     return m_of_y;
   end;

   MEMBER FUNCTION f_current return D_Date is
     Y pls_integer := 0;
     M pls_integer := 0;
     D pls_integer := 0;
   begin
     D_Date_Package.f_current(m_Year, m_Month, m_Day, Y, M, D);
     return D_Date(Y, M, D);
   end;

   MEMBER FUNCTION f_next(week_Day pls_integer) return D_Date is
     Y pls_integer := 0;
     M pls_integer := 0;
     D pls_integer := 0;
   begin
     D_Date_Package.f_next(m_Year, m_Month, m_Day, week_day, Y, M, D);
     return D_Date(Y, M, D);
   end;

   MEMBER FUNCTION f_previous(week_day pls_integer) return D_Date is
     Y pls_integer := 0;
     M pls_integer := 0;
     D pls_integer := 0;
   begin
     D_Date_Package.f_previous(m_Year, m_Month, m_Day, week_day, Y, M, D);
     return D_Date(Y, M, D);
   end;

   MEMBER FUNCTION is_between(b D_Date, e D_Date) return pls_integer is
     is_b pls_integer := D_Date_Package.is_between(m_Year, m_Month, m_Day, b.m_Year, b.m_Month, b.m_Day, e.m_Year, e.m_Month, e.m_Day);
   begin
     return is_b;
   end;

   MEMBER FUNCTION is_leap_year return pls_integer is
     is_l_y pls_integer := D_Date_Package.is_leap_year(m_Year, m_Month, m_Day);
   begin
     return is_l_y;
   end;

   MEMBER FUNCTION is_leap_year(y pls_integer) return pls_integer is
     is_l_y pls_integer := D_Date_Package.is_leap_year(m_Year, m_Month, m_Day, y);
   begin
     return is_l_y;
   end;

   MEMBER FUNCTION days_in_year return pls_integer is
     d_in_y pls_integer := D_Date_Package.days_in_year(m_Year, m_Month, m_Day);
   begin
     return d_in_y;
   end;

   MEMBER FUNCTION days_in_year(y pls_integer) return pls_integer is
     d_in_y pls_integer := D_Date_Package.days_in_year(m_Year, m_Month, m_Day, y);
   begin
     return d_in_y;
   end;

   MEMBER FUNCTION days_in_month return pls_integer is
     d_in_m pls_integer := D_Date_Package.days_in_month(m_Year, m_Month, m_Day);
   begin
     return d_in_m;
   end;

   MEMBER FUNCTION days_in_month(y pls_integer, m pls_integer) return pls_integer is
     d_in_m pls_integer := D_Date_Package.days_in_month(m_Year, m_Month, m_Day, y, m);
   begin
     return d_in_m;
   end;

   MEMBER FUNCTION is_valid_date(y pls_integer, m pls_integer, d pls_integer) return pls_integer is
     is_v_d pls_integer := D_Date_Package.is_valid_date(m_Year, m_Month, m_Day, y, m, d);
   begin
     return is_v_d;
   end;

   MEMBER FUNCTION is_valid return pls_integer is
     is_v pls_integer := D_Date_Package.is_valid(m_Year, m_Month, m_Day);
   begin
     return is_v;
   end;

   MEMBER FUNCTION day_of_the_year(y pls_integer, m pls_integer, d pls_integer) return pls_integer is
     d_of_y pls_integer := D_Date_Package.day_of_the_year(m_Year, m_Month, m_Day, y, m, d);
   begin
     return d_of_y;
   end;

   MEMBER FUNCTION julian_day(y pls_integer, m pls_integer, d pls_integer) return double precision is
     jd double precision := D_Date_Package.julian_day(m_Year, m_Month, m_Day, y, m, d);
   begin
     return jd;
   end;

   MEMBER FUNCTION julian_to_gregorian(JD double precision) return D_Date is
     Y pls_integer := 0;
     M pls_integer := 0;
     D pls_integer := 0;
   begin
     D_Date_Package.julian_to_gregorian(m_Year, m_Month, m_Day, JD, Y, M, D);
     return D_Date(Y, M, D);
   end;

   MEMBER FUNCTION getAbsDate return double precision is
     d double precision := D_Date_Package.getAbsDate(m_Year, m_Month, m_Day);
   begin
     return d;
   end;

   MEMBER FUNCTION setAbsDate(num_of_days double precision) return D_Date is
     Y pls_integer := 0;
     M pls_integer := 0;
     D pls_integer := 0;
   begin
     D_Date_Package.setAbsDate(m_Year, m_Month, m_Day, num_of_days, Y, M, D);
     return D_Date(Y, M, D);
   end;

   MEMBER FUNCTION Easter(year pls_integer) return D_Date is
     Y pls_integer := 0;
     M pls_integer := 0;
     D pls_integer := 0;
   begin
     D_Date_Package.Easter(m_Year, m_Month, m_Day, year, Y, M, D);
     return D_Date(Y, M, D);
   end;

   MEMBER PROCEDURE f_ass_date(d D_Date) is
   begin
   -- m_Year, m_Month, m_Day ==== IN OUT Arguments
     D_Date_Package.f_ass_date(m_Year, m_Month, m_Day, d.m_Year, d.m_Month, d.m_Day);
   end;

   MEMBER PROCEDURE f_ass_timestamp(tsp REF D_Timestamp) is
     ts D_Timestamp;
   begin
   -- m_Year, m_Month, m_Day ==== IN OUT Arguments
     SELECT DEREF (tsp) INTO ts FROM dual;
     D_Date_Package.f_ass_timestamp(m_Year, m_Month, m_Day, ts.f_date().m_Year, ts.f_date().m_Month, ts.f_date().m_Day);
   end;

   MEMBER PROCEDURE f_add_interval(i D_Interval) is
   begin
   -- m_Year, m_Month, m_Day ==== IN OUT Arguments
     D_Date_Package.f_add_interval(m_Year, m_Month, m_Day, i.m_Value);
   end;

   MEMBER PROCEDURE f_add_Days(i pls_integer) is
   begin
   -- m_Year, m_Month, m_Day ==== IN OUT Arguments
     D_Date_Package.f_add_days(m_Year, m_Month, m_Day, i);
   end;

   MEMBER PROCEDURE f_incr is
   begin
   -- m_Year, m_Month, m_Day ==== IN OUT Arguments
     D_Date_Package.f_incr(m_Year, m_Month, m_Day);
   end;

   MEMBER PROCEDURE f_sub_interval(i D_Interval) is
   begin
   -- m_Year, m_Month, m_Day ==== IN OUT Arguments
     D_Date_Package.f_sub_interval(m_Year, m_Month, m_Day, i.m_Value);
   end;

   MEMBER PROCEDURE f_sub_days(i pls_integer) is
    begin
   -- m_Year, m_Month, m_Day ==== IN OUT Arguments
     D_Date_Package.f_sub_days(m_Year, m_Month, m_Day, i);
   end;

   MEMBER PROCEDURE f_decr is
   begin
   -- m_Year, m_Month, m_Day ==== IN OUT Arguments
     D_Date_Package.f_decr(m_Year, m_Month, m_Day);
   end;

  MEMBER FUNCTION f_add(d D_Date, i D_Interval) return D_Date is
     Year pls_integer := 0;
     Month pls_integer := 0;
     Day pls_integer := 0;
   begin
     D_Date_Package.f_add(m_Year, m_Month, m_Day, d.m_Year, d.m_Month, d.m_Day, i.m_Value, Year, Month, Day);
     return D_Date(Year, Month, Day);
   end;

   MEMBER FUNCTION f_sub(d1 D_Date, d2 D_Date) return D_Interval is
     v double precision;
   begin
     v := D_Date_Package.f_sub(m_Year, m_Month, m_Day, d1.m_Year, d1.m_Month, d1.m_Day, d2.m_Year, d2.m_Month, d2.m_Day);
     return D_Interval(v);
   end;

   MEMBER FUNCTION f_sub(d D_Date, i D_Interval) return D_Date is
     Year pls_integer := 0;
     Month pls_integer := 0;
     Day pls_integer := 0;
   begin
     D_Date_Package.f_sub(m_Year, m_Month, m_Day, d.m_Year, d.m_Month, d.m_Day, i.m_Value, Year, Month, Day);
     return D_Date(Year, Month, Day);
   end;

   MEMBER FUNCTION f_eq(i D_Date, j D_Date) return pls_integer is
     b pls_integer := D_Date_Package.f_eq(m_Year, m_Month, m_Day, i.m_Year, i.m_Month, i.m_Day, j.m_Year, j.m_Month, j.m_Day);
   begin
     return b;
   end;

   MEMBER FUNCTION f_n_eq(i D_Date, j D_Date) return pls_integer is
     b pls_integer := D_Date_Package.f_n_eq(m_Year, m_Month, m_Day, i.m_Year, i.m_Month, i.m_Day, j.m_Year, j.m_Month, j.m_Day);
   begin
     return b;
   end;

   MEMBER FUNCTION f_l(i D_Date, j D_Date) return pls_integer is
     b pls_integer := D_Date_Package.f_l(m_Year, m_Month, m_Day, i.m_Year, i.m_Month, i.m_Day, j.m_Year, j.m_Month, j.m_Day);
   begin
     return b;
   end;

   MEMBER FUNCTION f_l_e(i D_Date, j D_Date) return pls_integer is
     b pls_integer := D_Date_Package.f_l_e(m_Year, m_Month, m_Day, i.m_Year, i.m_Month, i.m_Day, j.m_Year, j.m_Month, j.m_Day);
   begin
     return b;
   end;

   MEMBER FUNCTION f_b(i D_Date, j D_Date) return pls_integer is
     b pls_integer := D_Date_Package.f_b(m_Year, m_Month, m_Day, i.m_Year, i.m_Month, i.m_Day, j.m_Year, j.m_Month, j.m_Day);
   begin
     return b;
   end;

   MEMBER FUNCTION f_b_e(i D_Date, j D_Date) return pls_integer is
     b pls_integer := D_Date_Package.f_b_e(m_Year, m_Month, m_Day, i.m_Year, i.m_Month, i.m_Day, j.m_Year, j.m_Month, j.m_Day);
   begin
     return b;
   end;

   MEMBER FUNCTION f_overlaps(d1 D_Date, d2 D_Date, d3 D_Date, d4 D_Date) return pls_integer is
     b pls_integer := D_Date_Package.f_overlaps(m_Year, m_Month, m_Day, d1.m_Year, d1.m_Month, d1.m_Day, d2.m_Year, d2.m_Month, d2.m_Day,  d3.m_Year, d3.m_Month, d3.m_Day, d4.m_Year, d4.m_Month, d4.m_Day);
   begin
     return b;
   end;

   MEMBER FUNCTION f_timestamp_overlaps(tsp1 REF D_Timestamp, tsp2 REF D_Timestamp, d1 D_Date, d2 D_Date) return pls_integer is
     b pls_integer := 0;
     ts1 D_Timestamp;
     ts2 D_Timestamp;
   begin
     SELECT DEREF (tsp1) INTO ts1 FROM dual;
     SELECT DEREF (tsp2) INTO ts2 FROM dual;
     b := D_Date_Package.f_timestamp_overlaps(m_Year, m_Month, m_Day, ts1.f_date().m_Year, ts1.f_date().m_Month, ts1.f_date().m_Day, ts2.f_date().m_Year, ts2.f_date().m_Month, ts2.f_date().m_Day, d1.m_Year, d1.m_Month, d1.m_Day, d2.m_Year, d2.m_Month, d2.m_Day);
     return b;
   end;

   MEMBER FUNCTION f_date_overlaps(d1 D_Date, d2 D_Date, tsp1 REF D_Timestamp, tsp2 REF D_Timestamp) return pls_integer is
     b pls_integer := 0;
     ts1 D_Timestamp;
     ts2 D_Timestamp;
   begin
     SELECT DEREF (tsp1) INTO ts1 FROM dual;
     SELECT DEREF (tsp2) INTO ts2 FROM dual;
     b := D_Date_Package.f_date_overlaps(m_Year, m_Month, m_Day, d1.m_Year, d1.m_Month, d1.m_Day, d2.m_Year, d2.m_Month, d2.m_Day, ts1.f_date().m_Year, ts1.f_date().m_Month, ts1.f_date().m_Day, ts2.f_date().m_Year, ts2.f_date().m_Month, ts2.f_date().m_Day);
     return b;
   end;

end;
/

-- Type body D_TIME

CREATE OR REPLACE
type body D_Time is

   MEMBER FUNCTION hour return pls_integer is
     h pls_integer := D_Time_Package.hour(m_Hour, m_Minute, m_Second, m_100thSec, m_tzHour, m_tzMinute);
   begin
     return h;
   end;

   MEMBER FUNCTION minute return pls_integer is
     m pls_integer := D_Time_Package.minute(m_Hour, m_Minute, m_Second, m_100thSec, m_tzHour, m_tzMinute);
   begin
     return m;
   end;

   MEMBER FUNCTION second return float is
     s float := D_Time_Package.second(m_Hour, m_Minute, m_Second, m_100thSec, m_tzHour, m_tzMinute);
   begin
     return s;
   end;

   MEMBER FUNCTION hundr_thSec return pls_integer is
   begin
     return m_100thSec;
   end;

   MEMBER FUNCTION tz_hour return pls_integer is
     tz_h pls_integer := D_Time_Package.tz_hour(m_Hour, m_Minute, m_Second, m_100thSec, m_tzHour, m_tzMinute);
   begin
     return tz_h;
   end;

   MEMBER FUNCTION tz_minute return pls_integer is
     tz_m pls_integer := D_Time_Package.tz_minute(m_Hour, m_Minute, m_Second, m_100thSec, m_tzHour, m_tzMinute);
   begin
     return tz_m;
   end;

   MEMBER FUNCTION f_current return D_Time is
     H      pls_integer := 0;
     M      pls_integer := 0;
     S      pls_integer := 0;
     hundr_thS pls_integer := 0;
     tz_H   pls_integer := 0;
     tz_M   pls_integer := 0;
   begin
     D_Time_Package.f_current(m_Hour, m_Minute, m_Second, m_100thSec, m_tzHour, m_tzMinute, H, M, S, hundr_thS, tz_H, tz_M);
     return D_Time(H, M, S, hundr_thS, tz_H, tz_M);
   end;

   MEMBER FUNCTION is_valid_time ( h pls_integer, m pls_integer, s float) return pls_integer is
     is_vt pls_integer := D_Time_Package.is_valid_time(m_Hour, m_Minute, m_Second, m_100thSec, m_tzHour, m_tzMinute, h, m, s);
   begin
     return is_vt;
   end;

   MEMBER FUNCTION is_valid return pls_integer is
     is_v pls_integer := D_Time_Package.is_valid(m_Hour, m_Minute, m_Second, m_100thSec, m_tzHour, m_tzMinute);
   begin
     return is_v;
   end;

   MEMBER PROCEDURE f_ass_time(t D_Time) is
   begin
   -- m_Hour, m_Minute...==== IN OUT Arguments
     D_Time_Package.f_ass_time(m_Hour, m_Minute, m_Second, m_100thSec, m_tzHour, m_tzMinute, t.m_Hour, t.m_Minute, t.m_Second, t.m_100thSec, t.m_tzHour, t.m_tzMinute);
   end;

   MEMBER PROCEDURE f_ass_timestamp(tsp REF D_Timestamp) is
     ts D_Timestamp;
    begin
    -- m_Hour, m_Minute...==== IN OUT Arguments
     SELECT DEREF (tsp) INTO ts FROM dual;
     D_Time_Package.f_ass_timestamp(m_Hour, m_Minute, m_Second, m_100thSec, m_tzHour, m_tzMinute, ts.f_time().m_Hour, ts.f_time().m_Minute, ts.f_time().m_Second, ts.f_time().m_100thSec, ts.f_time().m_tzHour, ts.f_time().m_tzMinute);
   end;

   MEMBER PROCEDURE f_add_interval(i D_Interval) is
   begin
   -- m_Hour, m_Minute...==== IN OUT Arguments
     D_Time_Package.f_add_interval(m_Hour, m_Minute, m_Second, m_100thSec, m_tzHour, m_tzMinute, i.m_Value);
   end;

   MEMBER PROCEDURE f_sub_interval(i D_Interval) is
   begin
   -- m_Hour, m_Minute...==== IN OUT Arguments
     D_Time_Package.f_sub_interval(m_Hour, m_Minute, m_Second, m_100thSec, m_tzHour, m_tzMinute, i.m_Value);
   end;

   MEMBER FUNCTION f_add(t D_Time, i D_Interval) return D_Time is
     H      pls_integer := 0;
     M      pls_integer := 0;
     S      pls_integer := 0;
     hundr_thS pls_integer := 0;
     tz_H   pls_integer := 0;
     tz_M   pls_integer := 0;
   begin
     D_Time_Package.f_add(m_Hour, m_Minute, m_Second, m_100thSec, m_tzHour, m_tzMinute, t.m_Hour, t.m_Minute, t.m_Second, t.m_100thSec, t.m_tzHour, t.m_tzMinute, i.m_Value, H, M, S, hundr_thS, tz_H, tz_M);
     return D_Time(H, M, S, hundr_thS, tz_H, tz_M);
   end;

   MEMBER FUNCTION f_sub(t1 D_Time, t2 D_Time) return D_Interval is
     i_Value      double precision := 0;
   begin
     D_Time_Package.f_sub_time_from_time(m_Hour, m_Minute, m_Second, m_100thSec, m_tzHour, m_tzMinute, t1.m_Hour, t1.m_Minute, t1.m_Second, t1.m_100thSec, t1.m_tzHour, t1.m_tzMinute, t2.m_Hour, t2.m_Minute, t2.m_Second, t2.m_100thSec, t2.m_tzHour, t2.m_tzMinute, i_Value);
     return D_Interval(i_Value);
   end;

   MEMBER FUNCTION f_sub(t D_Time, i D_Interval) return D_Time is
     H      pls_integer := 0;
     M      pls_integer := 0;
     S      pls_integer := 0;
     hundr_thS pls_integer := 0;
     tz_H   pls_integer := 0;
     tz_M   pls_integer := 0;
   begin
     D_Time_Package.f_sub_interval_from_time(m_Hour, m_Minute, m_Second, m_100thSec, m_tzHour, m_tzMinute, t.m_Hour, t.m_Minute, t.m_Second, t.m_100thSec, t.m_tzHour, t.m_tzMinute, i.m_Value, H, M, S, hundr_thS, tz_H, tz_M);
     return D_Time(H, M, S, hundr_thS, tz_H, tz_M);
   end;

   MEMBER FUNCTION f_eq(i D_Time, j D_Time) return pls_integer is
     b pls_integer := D_Time_Package.f_eq(m_Hour, m_Minute, m_Second, m_100thSec, m_tzHour, m_tzMinute, i.m_Hour, i.m_Minute, i.m_Second, i.m_100thSec, i.m_tzHour, i.m_tzMinute, j.m_Hour, j.m_Minute, j.m_Second, j.m_100thSec, j.m_tzHour, j.m_tzMinute);
   begin
     return b;
   end;

   MEMBER FUNCTION f_n_eq(i D_Time, j D_Time) return pls_integer is
     b pls_integer := D_Time_Package.f_n_eq(m_Hour, m_Minute, m_Second, m_100thSec, m_tzHour, m_tzMinute, i.m_Hour, i.m_Minute, i.m_Second, i.m_100thSec, i.m_tzHour, i.m_tzMinute, j.m_Hour, j.m_Minute, j.m_Second, j.m_100thSec, j.m_tzHour, j.m_tzMinute);
   begin
     return b;
   end;

   MEMBER FUNCTION f_l(i D_Time, j D_Time) return pls_integer is
     b pls_integer := D_Time_Package.f_l(m_Hour, m_Minute, m_Second, m_100thSec, m_tzHour, m_tzMinute, i.m_Hour, i.m_Minute, i.m_Second, i.m_100thSec, i.m_tzHour, i.m_tzMinute, j.m_Hour, j.m_Minute, j.m_Second, j.m_100thSec, j.m_tzHour, j.m_tzMinute);
   begin
     return b;
   end;

   MEMBER FUNCTION f_l_e(i D_Time, j D_Time) return pls_integer is
     b pls_integer := D_Time_Package.f_l_e(m_Hour, m_Minute, m_Second, m_100thSec, m_tzHour, m_tzMinute, i.m_Hour, i.m_Minute, i.m_Second, i.m_100thSec, i.m_tzHour, i.m_tzMinute, j.m_Hour, j.m_Minute, j.m_Second, j.m_100thSec, j.m_tzHour, j.m_tzMinute);
   begin
     return b;
   end;

   MEMBER FUNCTION f_b(i D_Time, j D_Time) return pls_integer is
     b pls_integer := D_Time_Package.f_b(m_Hour, m_Minute, m_Second, m_100thSec, m_tzHour, m_tzMinute, i.m_Hour, i.m_Minute, i.m_Second, i.m_100thSec, i.m_tzHour, i.m_tzMinute, j.m_Hour, j.m_Minute, j.m_Second, j.m_100thSec, j.m_tzHour, j.m_tzMinute);
   begin
     return b;
   end;

   MEMBER FUNCTION f_b_e(i D_Time, j D_Time) return pls_integer is
     b pls_integer := D_Time_Package.f_b_e(m_Hour, m_Minute, m_Second, m_100thSec, m_tzHour, m_tzMinute, i.m_Hour, i.m_Minute, i.m_Second, i.m_100thSec, i.m_tzHour, i.m_tzMinute, j.m_Hour, j.m_Minute, j.m_Second, j.m_100thSec, j.m_tzHour, j.m_tzMinute);
   begin
     return b;
   end;

   MEMBER FUNCTION f_overlaps(t1 D_Time, t2 D_Time, t3 D_Time, t4 D_Time) return pls_integer is
     b pls_integer := D_Time_Package.f_overlaps(m_Hour, m_Minute, m_Second, m_100thSec, m_tzHour, m_tzMinute, t1.m_Hour, t1.m_Minute, t1.m_Second, t1.m_100thSec, t1.m_tzHour, t1.m_tzMinute, t2.m_Hour, t2.m_Minute, t2.m_Second, t2.m_100thSec, t2.m_tzHour, t2.m_tzMinute, t3.m_Hour, t3.m_Minute, t3.m_Second, t3.m_100thSec, t3.m_tzHour, t3.m_tzMinute, t4.m_Hour, t4.m_Minute, t4.m_Second, t4.m_100thSec, t4.m_tzHour, t4.m_tzMinute);
   begin
     return b;
   end;

   MEMBER FUNCTION f_timestamp_overlaps(tsp1 REF D_Timestamp, tsp2 REF D_Timestamp, t1 D_Time, t2 D_Time) return pls_integer is
     b pls_integer := 0;
     ts1 D_Timestamp;
     ts2 D_Timestamp;
   begin
     SELECT DEREF (tsp1) INTO ts1 FROM dual;
     SELECT DEREF (tsp2) INTO ts2 FROM dual;
     b := D_Time_Package.f_timestamp_overlaps(m_Hour, m_Minute, m_Second, m_100thSec, m_tzHour, m_tzMinute, ts1.f_time().m_Hour, ts1.f_time().m_Minute, ts1.f_time().m_Second, ts1.f_time().m_100thSec, ts1.f_time().m_tzHour, ts1.f_time().m_tzMinute, ts2.f_time().m_Hour, ts2.f_time().m_Minute, ts2.f_time().m_Second, ts2.f_time().m_100thSec, ts2.f_time().m_tzHour, ts2.f_time().m_tzMinute, t1.m_Hour, t1.m_Minute, t1.m_Second, t1.m_100thSec, t1.m_tzHour, t1.m_tzMinute, t2.m_Hour, t2.m_Minute, t2.m_Second, t2.m_100thSec, t2.m_tzHour, t2.m_tzMinute);
     return b;
   end;

   MEMBER FUNCTION f_time_overlaps(t1 D_Time, t2 D_Time, tsp1 REF D_Timestamp, tsp2 REF D_Timestamp) return pls_integer is
     b pls_integer := 0;
     ts1 D_Timestamp;
     ts2 D_Timestamp;
   begin
     SELECT DEREF (tsp1) INTO ts1 FROM dual;
     SELECT DEREF (tsp2) INTO ts2 FROM dual;
     b := D_Time_Package.f_time_overlaps(m_Hour, m_Minute, m_Second, m_100thSec, m_tzHour, m_tzMinute, t1.m_Hour, t1.m_Minute, t1.m_Second, t1.m_100thSec, t1.m_tzHour, t1.m_tzMinute, t2.m_Hour, t2.m_Minute, t2.m_Second, t2.m_100thSec, t2.m_tzHour, t2.m_tzMinute, ts1.f_time().m_Hour, ts1.f_time().m_Minute, ts1.f_time().m_Second, ts1.f_time().m_100thSec, ts1.f_time().m_tzHour, ts1.f_time().m_tzMinute, ts2.f_time().m_Hour, ts2.f_time().m_Minute, ts2.f_time().m_Second, ts2.f_time().m_100thSec, ts2.f_time().m_tzHour, ts2.f_time().m_tzMinute);
     return b;
   end;

end;
/

-- Type body D_TIMESTAMP

CREATE OR REPLACE
type body D_Timestamp is

    --Return the Date property of the Timestamp object.
    MEMBER FUNCTION f_date return D_Date is
    Y pls_integer := 0;
    M pls_integer := 0;
    D pls_integer := 0;
    begin
        D_Timestamp_Package.f_date(m_Date.year(), m_Date.month(), m_Date.day(), m_Time.hour(), m_Time.minute(), m_Time.second(), m_Time.hundr_thSec(), m_Time.tz_hour(), m_Time.tz_minute(), Y, M, D);
        return D_Date(Y, M, D);
    end;

    --Return the Time property of the Timestamp object.
    MEMBER FUNCTION f_time return D_Time is
    H      pls_integer := 0;
    M      pls_integer := 0;
    S      pls_integer := 0;
    hundr_thS pls_integer := 0;
    tz_H   pls_integer := 0;
    tz_M   pls_integer := 0;
    begin
        D_Timestamp_Package.f_time(m_Date.year(), m_Date.month(), m_Date.day(), m_Time.hour(), m_Time.minute(), m_Time.second(), m_Time.hundr_thSec(), m_Time.tz_hour(), m_Time.tz_minute(), H, M, S, hundr_thS, tz_H, tz_M);
        return D_Time(H, M, S, hundr_thS, tz_H, tz_M);
    end;

    --Returns the number corresponding to the year.
    MEMBER FUNCTION year return pls_integer is
    y pls_integer := D_Timestamp_Package.year(m_Date.year(), m_Date.month(), m_Date.day(), m_Time.hour(), m_Time.minute(), m_Time.second(), m_Time.hundr_thSec(), m_Time.tz_hour(), m_Time.tz_minute());
    begin
        return y;
    end;

    --Returns the number corresponding to the month.
    MEMBER FUNCTION month return pls_integer is
    m pls_integer := D_Timestamp_Package.month(m_Date.year(), m_Date.month(), m_Date.day(), m_Time.hour(), m_Time.minute(), m_Time.second(), m_Time.hundr_thSec(), m_Time.tz_hour(), m_Time.tz_minute());
    begin
        return m;
    end;

    --Returns the number corresponding to the day.
    MEMBER FUNCTION day return pls_integer is
    d pls_integer := D_Timestamp_Package.day(m_Date.year(), m_Date.month(), m_Date.day(), m_Time.hour(), m_Time.minute(), m_Time.second(), m_Time.hundr_thSec(), m_Time.tz_hour(), m_Time.tz_minute());
    begin
        return d;
    end;

    --Returns the number corresponding to the hour.
    MEMBER FUNCTION hour return pls_integer is
    h pls_integer := D_Timestamp_Package.hour(m_Date.year(), m_Date.month(), m_Date.day(), m_Time.hour(), m_Time.minute(), m_Time.second(), m_Time.hundr_thSec(), m_Time.tz_hour(), m_Time.tz_minute());
    begin
        return h;
    end;

    --Returns the number corresponding to the minute.
    MEMBER FUNCTION minute return pls_integer is
    m pls_integer := D_Timestamp_Package.minute(m_Date.year(), m_Date.month(), m_Date.day(), m_Time.hour(), m_Time.minute(), m_Time.second(), m_Time.hundr_thSec(), m_Time.tz_hour(), m_Time.tz_minute());
    begin
        return m;
    end;

    --Returns the number corresponding to the second.
    MEMBER FUNCTION second return float is
    s float := D_Timestamp_Package.second(m_Date.year(), m_Date.month(), m_Date.day(), m_Time.hour(), m_Time.minute(), m_Time.second(), m_Time.hundr_thSec(), m_Time.tz_hour(), m_Time.tz_minute());
    begin
        return s;
    end;

    --Returns the number corresponding to the 100thSec.
    MEMBER FUNCTION hundr_thSec return pls_integer is
    begin
        return m_Time.hundr_thSec();
    end;

    --Returns the number corresponding to the local timezone hour.
    MEMBER FUNCTION tz_hour return pls_integer is
    tz_h pls_integer := D_Timestamp_Package.tz_hour(m_Date.year(), m_Date.month(), m_Date.day(), m_Time.hour(), m_Time.minute(), m_Time.second(), m_Time.hundr_thSec(), m_Time.tz_hour(), m_Time.tz_minute());
    begin
        return tz_h;
    end;

    --Returns the number corresponding to the local timezone minute.
    MEMBER FUNCTION tz_minute return pls_integer is
    tz_m pls_integer := D_Timestamp_Package.tz_minute(m_Date.year(), m_Date.month(), m_Date.day(), m_Time.hour(), m_Time.minute(), m_Time.second(), m_Time.hundr_thSec(), m_Time.tz_hour(), m_Time.tz_minute());
    begin
        return tz_m;
    end;

    --Returns a Timestamp object representing the current system date and time.
    MEMBER FUNCTION f_current return D_Timestamp is
    Year   pls_integer := 0;
    Month  pls_integer := 0;
    Day    pls_integer := 0;
    H      pls_integer := 0;
    M      pls_integer := 0;
    S      pls_integer := 0;
    hundr_thS pls_integer := 0;
    tz_H   pls_integer := 0;
    tz_M   pls_integer := 0;
    begin
        D_Timestamp_Package.f_current(m_Date.year(), m_Date.month(), m_Date.day(), m_Time.hour(), m_Time.minute(), m_Time.second(), m_Time.hundr_thSec(), m_Time.tz_hour(), m_Time.tz_minute(), Year, Month, Day, H, M, S, hundr_thS, tz_H, tz_M);
        return D_Timestamp(D_Date(Year, Month, Day), D_Time(H, M, S, hundr_thS, tz_H, tz_M));
    end;

    --Assigns the value of another Timestamp to the Timestamp object.
    MEMBER PROCEDURE f_ass_timestamp (ts D_Timestamp ) is
    -- m_Year,..., m_Hour, m_Minute,...==== IN OUT Arguments
    begin
        D_Timestamp_Package.f_ass_timestamp(m_Date.m_Year, m_Date.m_Month, m_Date.m_Day, m_Time.m_Hour, m_Time.m_Minute, m_Time.m_Second, m_Time.m_100thSec, m_Time.m_tzHour, m_Time.m_tzMinute, ts.m_Date.m_Year, ts.m_Date.m_Month, ts.m_Date.m_Day, ts.m_Time.m_Hour, ts.m_Time.m_Minute, ts.m_Time.m_Second, ts.m_Time.m_100thSec, ts.m_Time.m_tzHour, ts.m_Time.m_tzMinute);
    end;

    --Assigns the value of a Date object to the date property of the Timestamp object.
    MEMBER PROCEDURE f_ass_date (d D_Date) is
    -- m_Year,m_Month,m_Day==== IN OUT Arguments
    begin
        D_Timestamp_Package.f_ass_date(m_Date.m_Year, m_Date.m_Month, m_Date.m_Day, m_Time.m_Hour, m_Time.m_Minute, m_Time.m_Second, m_Time.m_100thSec, m_Time.m_tzHour, m_Time.m_tzMinute, d.m_Year, d.m_Month, d.m_Day);
    end;

    --Increments the value of the Timestamp object by a specified Interval.
    MEMBER PROCEDURE f_add_interval (i D_Interval) is
    -- m_Year,..., m_Hour, m_Minute,...==== IN OUT Arguments
    begin
        D_Timestamp_Package.f_add_interval(m_Date.m_Year, m_Date.m_Month, m_Date.m_Day, m_Time.m_Hour, m_Time.m_Minute, m_Time.m_Second, m_Time.m_100thSec, m_Time.m_tzHour, m_Time.m_tzMinute, i.m_Value);
    end;

    --Decrements the value of the Timestamp object by a specified Interval.
    MEMBER PROCEDURE f_sub_interval (i D_Interval) is
    -- m_Year,..., m_Hour, m_Minute,...==== IN OUT Arguments
    begin
        D_Timestamp_Package.f_sub_interval(m_Date.m_Year, m_Date.m_Month, m_Date.m_Day, m_Time.m_Hour, m_Time.m_Minute, m_Time.m_Second, m_Time.m_100thSec, m_Time.m_tzHour, m_Time.m_tzMinute, i.m_Value);
    end;

    --Adds an Interval to the Timestamp value.
    MEMBER FUNCTION f_add (ts D_Timestamp, i D_Interval) return D_Timestamp is
    Year   pls_integer := 0;
    Month  pls_integer := 0;
    Day    pls_integer := 0;
    H      pls_integer := 0;
    M      pls_integer := 0;
    S      pls_integer := 0;
    hundr_thS pls_integer := 0;
    tz_H   pls_integer := 0;
    tz_M   pls_integer := 0;
    begin
        D_Timestamp_Package.f_add(m_Date.year(), m_Date.month(), m_Date.day(), m_Time.hour(), m_Time.minute(), m_Time.second(), m_Time.hundr_thSec(), m_Time.tz_hour(), m_Time.tz_minute(), ts.year(), ts.month(), ts.day(), ts.hour(), ts.minute(), ts.second(), ts.hundr_thSec(), ts.tz_hour(), ts.tz_minute(), i.m_Value, Year, Month, Day, H, M, S, hundr_thS, tz_H, tz_M);
        return D_Timestamp(D_Date(Year, Month, Day), D_Time(H, M, S, hundr_thS, tz_H, tz_M));
    end;

    --Subtracts an Interval from the Timestamp value.
    MEMBER FUNCTION f_sub (ts D_Timestamp, i D_Interval) return D_Timestamp is
    Year   pls_integer := 0;
    Month  pls_integer := 0;
    Day    pls_integer := 0;
    H      pls_integer := 0;
    M      pls_integer := 0;
    S      pls_integer := 0;
    hundr_thS pls_integer := 0;
    tz_H   pls_integer := 0;
    tz_M   pls_integer := 0;
    begin
        D_Timestamp_Package.f_sub(m_Date.year(), m_Date.month(), m_Date.day(), m_Time.hour(), m_Time.minute(), m_Time.second(), m_Time.hundr_thSec(), m_Time.tz_hour(), m_Time.tz_minute(), ts.year(), ts.month(), ts.day(), ts.hour(), ts.minute(), ts.second(), ts.hundr_thSec(), ts.tz_hour(), ts.tz_minute(), i.m_Value, Year, Month, Day, H, M, S, hundr_thS, tz_H, tz_M);
        return D_Timestamp(D_Date(Year, Month, Day), D_Time(H, M, S, hundr_thS, tz_H, tz_M));
    end;

    --Returns true if the Timestamps have the same value.
    MEMBER FUNCTION f_eq (ts1 D_Timestamp, ts2 D_Timestamp) return pls_integer is
    b pls_integer := D_Timestamp_Package.f_eq(m_Date.year(), m_Date.month(), m_Date.day(), m_Time.hour(), m_Time.minute(), m_Time.second(), m_Time.hundr_thSec(), m_Time.tz_hour(), m_Time.tz_minute(), ts1.m_Date.year(), ts1.m_Date.month(), ts1.m_Date.day(), ts1.m_Time.hour(), ts1.m_Time.minute(), ts1.m_Time.second(), ts1.m_Time.hundr_thSec(), ts1.m_Time.tz_hour(), ts1.m_Time.tz_minute(), ts2.m_Date.year(), ts2.m_Date.month(), ts2.m_Date.day(), ts2.m_Time.hour(), ts2.m_Time.minute(), ts2.m_Time.second(), ts2.m_Time.hundr_thSec(), ts2.m_Time.tz_hour(), ts2.m_Time.tz_minute());
    begin
        return b;
    end;

    --Returns true if the Timestamps have different value.
    MEMBER FUNCTION f_n_eq (ts1 D_Timestamp, ts2 D_Timestamp) return pls_integer is
     b pls_integer := D_Timestamp_Package.f_n_eq(m_Date.year(), m_Date.month(), m_Date.day(), m_Time.hour(), m_Time.minute(), m_Time.second(), m_Time.hundr_thSec(), m_Time.tz_hour(), m_Time.tz_minute(), ts1.m_Date.year(), ts1.m_Date.month(), ts1.m_Date.day(), ts1.m_Time.hour(), ts1.m_Time.minute(), ts1.m_Time.second(), ts1.m_Time.hundr_thSec(), ts1.m_Time.tz_hour(), ts1.m_Time.tz_minute(), ts2.m_Date.year(), ts2.m_Date.month(), ts2.m_Date.day(), ts2.m_Time.hour(), ts2.m_Time.minute(), ts2.m_Time.second(), ts2.m_Time.hundr_thSec(), ts2.m_Time.tz_hour(), ts2.m_Time.tz_minute());
    begin
        return b;
    end;

    --Returns true if the first Timestamp is less than the second.
    MEMBER FUNCTION f_l (ts1 D_Timestamp, ts2 D_Timestamp) return pls_integer is
     b pls_integer := D_Timestamp_Package.f_l(m_Date.year(), m_Date.month(), m_Date.day(), m_Time.hour(), m_Time.minute(), m_Time.second(), m_Time.hundr_thSec(), m_Time.tz_hour(), m_Time.tz_minute(), ts1.m_Date.year(), ts1.m_Date.month(), ts1.m_Date.day(), ts1.m_Time.hour(), ts1.m_Time.minute(), ts1.m_Time.second(), ts1.m_Time.hundr_thSec(), ts1.m_Time.tz_hour(), ts1.m_Time.tz_minute(), ts2.m_Date.year(), ts2.m_Date.month(), ts2.m_Date.day(), ts2.m_Time.hour(), ts2.m_Time.minute(), ts2.m_Time.second(), ts2.m_Time.hundr_thSec(), ts2.m_Time.tz_hour(), ts2.m_Time.tz_minute());
    begin
        return b;
    end;

    --Returns true if the first Timestamp is less or equal to the second.
    MEMBER FUNCTION f_l_e (ts1 D_Timestamp, ts2 D_Timestamp) return pls_integer is
     b pls_integer := D_Timestamp_Package.f_l_e(m_Date.year(), m_Date.month(), m_Date.day(), m_Time.hour(), m_Time.minute(), m_Time.second(), m_Time.hundr_thSec(), m_Time.tz_hour(), m_Time.tz_minute(), ts1.m_Date.year(), ts1.m_Date.month(), ts1.m_Date.day(), ts1.m_Time.hour(), ts1.m_Time.minute(), ts1.m_Time.second(), ts1.m_Time.hundr_thSec(), ts1.m_Time.tz_hour(), ts1.m_Time.tz_minute(), ts2.m_Date.year(), ts2.m_Date.month(), ts2.m_Date.day(), ts2.m_Time.hour(), ts2.m_Time.minute(), ts2.m_Time.second(), ts2.m_Time.hundr_thSec(), ts2.m_Time.tz_hour(), ts2.m_Time.tz_minute());
    begin
        return b;
    end;

    --Returns true if the first Timestamp is greater than the second.
    MEMBER FUNCTION f_b (ts1 D_Timestamp, ts2 D_Timestamp) return pls_integer is
     b pls_integer := D_Timestamp_Package.f_b(m_Date.year(), m_Date.month(), m_Date.day(), m_Time.hour(), m_Time.minute(), m_Time.second(), m_Time.hundr_thSec(), m_Time.tz_hour(), m_Time.tz_minute(), ts1.m_Date.year(), ts1.m_Date.month(), ts1.m_Date.day(), ts1.m_Time.hour(), ts1.m_Time.minute(), ts1.m_Time.second(), ts1.m_Time.hundr_thSec(), ts1.m_Time.tz_hour(), ts1.m_Time.tz_minute(), ts2.m_Date.year(), ts2.m_Date.month(), ts2.m_Date.day(), ts2.m_Time.hour(), ts2.m_Time.minute(), ts2.m_Time.second(), ts2.m_Time.hundr_thSec(), ts2.m_Time.tz_hour(), ts2.m_Time.tz_minute());
    begin
        return b;
    end;

    --Returns true if the first Timestamp is greater or equal to the second.
    MEMBER FUNCTION f_b_e (ts1 D_Timestamp, ts2 D_Timestamp) return pls_integer is
     b pls_integer := D_Timestamp_Package.f_b_e(m_Date.year(), m_Date.month(), m_Date.day(), m_Time.hour(), m_Time.minute(), m_Time.second(), m_Time.hundr_thSec(), m_Time.tz_hour(), m_Time.tz_minute(), ts1.m_Date.year(), ts1.m_Date.month(), ts1.m_Date.day(), ts1.m_Time.hour(), ts1.m_Time.minute(), ts1.m_Time.second(), ts1.m_Time.hundr_thSec(), ts1.m_Time.tz_hour(), ts1.m_Time.tz_minute(), ts2.m_Date.year(), ts2.m_Date.month(), ts2.m_Date.day(), ts2.m_Time.hour(), ts2.m_Time.minute(), ts2.m_Time.second(), ts2.m_Time.hundr_thSec(), ts2.m_Time.tz_hour(), ts2.m_Time.tz_minute());
    begin
        return b;
    end;

    --Returns true if the period formed by the first two parameters overlaps the period formed by the other two.
    MEMBER FUNCTION f_overlaps (ts1 D_Timestamp, ts2 D_Timestamp, ts3 D_Timestamp, ts4 D_Timestamp) return pls_integer is
     b pls_integer := D_Timestamp_Package.f_overlaps(m_Date.year(), m_Date.month(), m_Date.day(), m_Time.hour(), m_Time.minute(), m_Time.second(), m_Time.hundr_thSec(), m_Time.tz_hour(), m_Time.tz_minute(), ts1.m_Date.year(), ts1.m_Date.month(), ts1.m_Date.day(), ts1.m_Time.hour(), ts1.m_Time.minute(), ts1.m_Time.second(), ts1.m_Time.hundr_thSec(), ts1.m_Time.tz_hour(), ts1.m_Time.tz_minute(), ts2.m_Date.year(), ts2.m_Date.month(), ts2.m_Date.day(), ts2.m_Time.hour(), ts2.m_Time.minute(), ts2.m_Time.second(), ts2.m_Time.hundr_thSec(), ts2.m_Time.tz_hour(), ts2.m_Time.tz_minute(), ts3.m_Date.year(), ts3.m_Date.month(), ts3.m_Date.day(), ts3.m_Time.hour(), ts3.m_Time.minute(), ts3.m_Time.second(), ts3.m_Time.hundr_thSec(), ts3.m_Time.tz_hour(), ts3.m_Time.tz_minute(), ts4.m_Date.year(), ts4.m_Date.month(), ts4.m_Date.day(), ts4.m_Time.hour(), ts4.m_Time.minute(), ts4.m_Time.second(), ts4.m_Time.hundr_thSec(), ts4.m_Time.tz_hour(), ts4.m_Time.tz_minute());
    begin
        return b;
    end;

end;
/

-- Function RETURN_TEMPORAL_ELEMENT_Y

CREATE OR REPLACE
FUNCTION return_temporal_element_y(te_string Varchar2) return temp_element_y is
    new_te temp_element_y;
    s Varchar2(32000);
    t1 pls_integer :=0;
    t2 pls_integer :=0;
    i pls_integer :=0;

    begin
        s := te_string;
        new_te := temp_element_y();

        WHILE LENGTH(s) != 0 LOOP
            t1 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t2 := TO_NUMBER( LPAD(s, INSTR(s, '#') - 1) );
            s :=  SUBSTR(s, INSTR(s,'#') + 1, LENGTH(s) - INSTR(s,'#') + 1 );

            new_te.EXTEND;
            i := new_te.LAST;
            new_te(i) := d_period_y(d_timepoint_y(t1), d_timepoint_y(t2));
        END LOOP;

        return new_te;
    end;
/

-- Function RETURN_TEMPORAL_ELEMENT_M

    CREATE OR REPLACE
    FUNCTION return_temporal_element_m(te_string Varchar2) return Temp_Element_M is
    new_te Temp_Element_M;
    s Varchar2(32000);
    t1 pls_integer :=0;
    t2 pls_integer :=0;
    t3 pls_integer :=0;
    t4 pls_integer :=0;
    i pls_integer :=0;

    begin
        s := te_string;
        new_te := Temp_Element_M();

        WHILE LENGTH(s) != 0 LOOP
            t1 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t2 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t3 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t4 := TO_NUMBER( LPAD(s, INSTR(s, '#') - 1) );
            s :=  SUBSTR(s, INSTR(s,'#') + 1, LENGTH(s) - INSTR(s,'#') + 1 );

            new_te.EXTEND;
            i := new_te.LAST;
            new_te(i) := D_Period_M(D_Timepoint_M(t1, t2), D_Timepoint_M(t3, t4));
        END LOOP;

        return new_te;
    end;
/

-- Function RETURN_TEMPORAL_ELEMENT_D

CREATE OR REPLACE
FUNCTION return_temporal_element_d(te_string Varchar2) return Temp_Element_D is
    new_te Temp_Element_D;
    s Varchar2(32000);
    t1 pls_integer :=0;
    t2 pls_integer :=0;
    t3 pls_integer :=0;
    t4 pls_integer :=0;
    t5 pls_integer :=0;
    t6 pls_integer :=0;
    i pls_integer :=0;

    begin
        s := te_string;
        new_te := Temp_Element_D();

        WHILE LENGTH(s) != 0 LOOP
            t1 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t2 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t3 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t4 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t5 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t6 := TO_NUMBER( LPAD(s, INSTR(s, '#') - 1) );
            s :=  SUBSTR(s, INSTR(s,'#') + 1, LENGTH(s) - INSTR(s,'#') + 1 );

            new_te.EXTEND;
            i := new_te.LAST;
            new_te(i) := D_Period_D(D_Timepoint_D(t1, t2, t3), D_Timepoint_D(t4, t5, t6));
        END LOOP;

        return new_te;
    end;
/

-- Function RETURN_TEMPORAL_ELEMENT_H

CREATE OR REPLACE
FUNCTION return_temporal_element_h(te_string Varchar2) return Temp_Element_H is
    new_te Temp_Element_H;
    s Varchar2(32000);
    t1 pls_integer :=0;
    t2 pls_integer :=0;
    t3 pls_integer :=0;
    t4 pls_integer :=0;
    t5 pls_integer :=0;
    t6 pls_integer :=0;
    t7 pls_integer :=0;
    t8 pls_integer :=0;
    i pls_integer :=0;

    begin
        s := te_string;
        new_te := Temp_Element_H();

        WHILE LENGTH(s) != 0 LOOP
            t1 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t2 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t3 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t4 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t5 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t6 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t7 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t8 := TO_NUMBER( LPAD(s, INSTR(s, '#') - 1) );
            s :=  SUBSTR(s, INSTR(s,'#') + 1, LENGTH(s) - INSTR(s,'#') + 1 );

            new_te.EXTEND;
            i := new_te.LAST;
            new_te(i) := D_Period_H(D_Timepoint_H(t1, t2, t3, t4), D_Timepoint_H(t5, t6, t7, t8));
        END LOOP;

        return new_te;
    end;
/

-- Function RETURN_TEMPORAL_ELEMENT_Min

CREATE OR REPLACE
FUNCTION return_temporal_element_min(te_string Varchar2) return Temp_Element_Min is
    new_te Temp_Element_Min;
    s Varchar2(32000);
    t1 pls_integer :=0;
    t2 pls_integer :=0;
    t3 pls_integer :=0;
    t4 pls_integer :=0;
    t5 pls_integer :=0;
    t6 pls_integer :=0;
    t7 pls_integer :=0;
    t8 pls_integer :=0;
    t9 pls_integer :=0;
    t10 pls_integer :=0;
    i pls_integer :=0;

    begin
        s := te_string;
        new_te := Temp_Element_Min();

        WHILE LENGTH(s) != 0 LOOP
            t1 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t2 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t3 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t4 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t5 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t6 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t7 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t8 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t9 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t10 := TO_NUMBER( LPAD(s, INSTR(s, '#') - 1) );
            s :=  SUBSTR(s, INSTR(s,'#') + 1, LENGTH(s) - INSTR(s,'#') + 1 );

            new_te.EXTEND;
            i := new_te.LAST;
            new_te(i) := D_Period_Min(D_Timepoint_Min(t1, t2, t3, t4, t5), D_Timepoint_Min(t6, t7, t8, t9, t10));
        END LOOP;

        return new_te;
    end;
/

-- Function RETURN_TEMPORAL_ELEMENT_SEC

CREATE OR REPLACE
FUNCTION return_temporal_element_sec(te_string Varchar2) return Temp_Element_Sec is
    new_te Temp_Element_Sec;
    s Varchar2(32766);
    t1 pls_integer :=0;
    t2 pls_integer :=0;
    t3 pls_integer :=0;
    t4 pls_integer :=0;
    t5 pls_integer :=0;
    t6 double precision :=0;
    t7 pls_integer :=0;
    t8 pls_integer :=0;
    t9 pls_integer :=0;
    t10 pls_integer :=0;
    t11 pls_integer :=0;
    t12 double precision :=0;
    i pls_integer :=0;

    begin
        s := te_string;
        new_te := Temp_Element_Sec();

        WHILE LENGTH(s) != 0 LOOP
            t1 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t2 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t3 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t4 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t5 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t6 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t7 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t8 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t9 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t10 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t11 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t12 := TO_NUMBER( LPAD(s, INSTR(s, '#') - 1) );
            s :=  SUBSTR(s, INSTR(s,'#') + 1, LENGTH(s) - INSTR(s,'#') + 1 );

            new_te.EXTEND;
            i := new_te.LAST;
            new_te(i) := D_Period_Sec(D_Timepoint_Sec(t1, t2, t3, t4, t5, t6), D_Timepoint_Sec(t7, t8, t9, t10, t11, t12));
        END LOOP;

        return new_te;
    end;
/

-- Type body D_TIMEPOINT_Y

CREATE OR REPLACE
type body D_Timepoint_Y is

    --Changes the status of the Timepoint object
    MEMBER PROCEDURE change_status(special_value pls_integer) is
    begin
    -- m_y IN OUT argument
         D_Timepoint_Y_Package.change_status(m_y, special_value);
    end;

    --Returns the year for the Timepoint object.
    MEMBER FUNCTION year return pls_integer is
    y pls_integer := D_Timepoint_Y_Package.year(m_y);
    begin
         return y;
    end;

    --Returns the Granularity of the Timepoint object.
    MEMBER FUNCTION get_granularity return pls_integer is
    g pls_integer := D_Timepoint_Y_Package.get_granularity(m_y);
    begin
         return g;
    end;

    --Returns a long number equal to the number of seconds since the begin of the calendar, representing the value of the Timepoint object.
    MEMBER FUNCTION get_Abs_Date return double precision is
    g double precision := D_Timepoint_Y_Package.get_Abs_Date(m_y);
    begin
         return g;
    end;

    --Sets the year for the Timepoint object.
    MEMBER PROCEDURE set_year(year pls_integer) is
    begin
    -- m_y IN OUT argument
         D_Timepoint_Y_Package.set_year(m_y, year);
    end;

    --Sets the value of the Timepoint object using a long number representing the number of seconds since the begin of the calendar.
    MEMBER PROCEDURE set_Abs_Date(d double precision) is
    begin
    -- m_y IN OUT argument
         D_Timepoint_Y_Package.set_Abs_Date(m_y, d);
    end;

    --Converts the Timepoint object to a Period object.
    MEMBER FUNCTION to_period return REF D_Period_Y is
    b_y pls_integer := 0;
    e_y pls_integer := 0;
    per REF D_Period_Y;
    begin
         D_Timepoint_Y_Package.to_period(m_y, b_y, e_y);
         INSERT INTO periods_y p
         VALUES (D_Period_Y(D_Timepoint_Y(b_y), D_Timepoint_Y(e_y)))
         RETURNING REF(p) INTO per;
         return per;
    end;

    --Converts the Timepoint object to a Temporal Element object.
    MEMBER FUNCTION to_temporal_element return REF D_Temp_Element_Y is
    str Varchar2(32766) := '';
    TE_y REF D_Temp_Element_Y;
    begin
         str := D_Timepoint_Y_Package.to_temporal_element(m_y);
         INSERT INTO temp_elements_y t
         VALUES (D_Temp_Element_Y(return_temporal_element_y(str)))
         RETURNING REF(t) INTO TE_y;
         return TE_y;
    end;

    --Creates a string for the Timepoint object in ISO 8601 format.
    MEMBER FUNCTION to_string return Varchar2 is
    s Varchar2(50) := D_Timepoint_Y_Package.to_string(m_y);
    begin
         return s;
    end;

    --Returns true if the year of the Timepoint object is a Leap year.
    MEMBER FUNCTION is_Leap_Year return pls_integer is
    b pls_integer := D_Timepoint_Y_Package.is_Leap_Year(m_y);
    begin
         return b;
    end;

    --Returns true if parameter year is a Leap year.
    MEMBER FUNCTION is_Leap_Year(year pls_integer) return pls_integer is
    b pls_integer := D_Timepoint_Y_Package.is_Leap_Year(m_y, year);
    begin
         return b;
    end;

    --Assigns the value of a Timestamp object to the Timepoint object.
    MEMBER PROCEDURE f_ass_timestamp(ts D_Timestamp) is
    -- m_y IN OUT argument
    begin
         D_Timepoint_Y_Package.f_ass_timestamp(m_y, ts.m_Date.m_Year, ts.m_Date.m_Month, ts.m_Date.m_Day, ts.m_Time.m_Hour, ts.m_Time.m_Minute, ts.m_Time.m_Second, ts.m_Time.m_100thSec, ts.m_Time.m_tzHour, ts.m_Time.m_tzMinute);
    end;

    --Assigns the value of another Timepoint to the Timepoint object.
    MEMBER PROCEDURE f_ass_timepoint(tp D_Timepoint_Y) is
    -- m_y IN OUT argument
    begin
         D_Timepoint_Y_Package.f_ass_timepoint(m_y, tp.m_y);
    end;

    --Adds an Interval to the Timepoint object.
    MEMBER PROCEDURE f_add_interval(i D_Interval) is
    -- m_y IN OUT argument
    begin
         D_Timepoint_Y_Package.f_add_interval(m_y, i.m_Value);
    end;

    --Subtracts an Interval from the Timepoint object.
    MEMBER PROCEDURE f_sub_interval(i D_Interval) is
    -- m_y IN OUT argument
    begin
         D_Timepoint_Y_Package.f_sub_interval(m_y, i.m_Value);
    end;

    --Increments the Timepoint object by one granule (Prefix operator).
    MEMBER PROCEDURE f_incr is
    -- m_y IN OUT argument
    begin
         D_Timepoint_Y_Package.f_incr(m_y);
    end;

    --Decrements the Timepoint object by one granule (Prefix operator).
    MEMBER PROCEDURE f_decr is
    -- m_y IN OUT argument
    begin
         D_Timepoint_Y_Package.f_decr(m_y);
    end;

    --Returns a Timepoint object representing the sum of an Timepoint object plus a Interval object.
    MEMBER FUNCTION f_add(tp D_Timepoint_Y, i D_Interval) return D_Timepoint_Y is
    y pls_integer := 0;
    begin
         D_Timepoint_Y_Package.f_add(m_y, tp.m_y, i.m_Value, y);
         return D_Timepoint_Y(y);
    end;

    --Returns a Timepoint object representing the subtraction of an Interval object from a Timepoint object.
    MEMBER FUNCTION f_sub(tp D_Timepoint_Y, i D_Interval) return D_Timepoint_Y is
    y pls_integer := 0;
    begin
         D_Timepoint_Y_Package.f_sub(m_y, tp.m_y, i.m_Value, y);
         return D_Timepoint_Y(y);
    end;

    --Returns a Period object representing the intersection between two Timepoints.
    MEMBER FUNCTION intersects(tp1 D_Timepoint_Y, tp2 D_Timepoint_Y) return REF D_Period_Y is
    b_y pls_integer := 0;
    e_y pls_integer := 0;
    per REF D_Period_Y;
    begin
         D_Timepoint_Y_Package.intersects(m_y, tp1.m_y, tp2.m_y, b_y, e_y);
         INSERT INTO periods_y p
         VALUES (D_Period_Y(D_Timepoint_Y(b_y), D_Timepoint_Y(e_y)))
         RETURNING REF(p) INTO per;
         return per;
    end;

    --Returns a Period object representing the intersection between a Timepoint and a Period.
    MEMBER FUNCTION intersects(tp D_Timepoint_Y, p_y REF D_Period_Y) return REF D_Period_Y is
    b_y pls_integer := 0;
    e_y pls_integer := 0;
    p D_Period_Y;
    per REF D_Period_Y;
    begin
         SELECT DEREF(p_y) INTO p FROM DUAL;
         D_Timepoint_Y_Package.intersects(m_y, tp.m_y, p.b.m_y, p.e.m_y, b_y, e_y);
         INSERT INTO periods_y ps
         VALUES (D_Period_Y(D_Timepoint_Y(b_y), D_Timepoint_Y(e_y)))
         RETURNING REF(ps) INTO per;
         return per;
    end;

    --Returns a Temporal Element object representing the intersection between a Timepoint and a Temporal Element.
    MEMBER FUNCTION intersects(tp D_Timepoint_Y, te REF D_Temp_Element_Y) return REF D_Temp_Element_Y is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_Y;
    TE_y REF D_Temp_Element_Y;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         str := D_Timepoint_Y_Package.intersects(m_y, tp.m_y, te1.to_string());
         INSERT INTO temp_elements_y t
         VALUES (D_Temp_Element_Y(return_temporal_element_y(str)))
         RETURNING REF(t) INTO TE_y;
         return TE_y;
    end;

    --Returns true if the Timepoints have the same value.
    MEMBER FUNCTION f_eq(tp1 D_Timepoint_Y, tp2 D_Timepoint_Y) return pls_integer is
    b pls_integer := D_Timepoint_Y_Package.f_eq(m_y, tp1.m_y, tp2.m_y);
    begin
         return b;
    end;

    --Returns true if the Timepoints have different value.
    MEMBER FUNCTION f_n_eq(tp1 D_Timepoint_Y, tp2 D_Timepoint_Y) return pls_integer is
    b pls_integer := D_Timepoint_Y_Package.f_n_eq(m_y, tp1.m_y, tp2.m_y);
    begin
         return b;
    end;

    --Returns true if the first Timepoint is less than the second.
    MEMBER FUNCTION f_l(tp1 D_Timepoint_Y, tp2 D_Timepoint_Y) return pls_integer is
    b pls_integer := D_Timepoint_Y_Package.f_l(m_y, tp1.m_y, tp2.m_y);
    begin
         return b;
    end;

    --Returns true if the first Timepoint is less or equal to the second.
    MEMBER FUNCTION f_l_e(tp1 D_Timepoint_Y, tp2 D_Timepoint_Y) return pls_integer is
    b pls_integer := D_Timepoint_Y_Package.f_l_e(m_y, tp1.m_y, tp2.m_y);
    begin
         return b;
    end;

    --Returns true if the first Timepoint is greater than the second.
    MEMBER FUNCTION f_b(tp1 D_Timepoint_Y, tp2 D_Timepoint_Y) return pls_integer is
    b pls_integer := D_Timepoint_Y_Package.f_b(m_y, tp1.m_y, tp2.m_y);
    begin
         return b;
    end;

    --Returns true if the first Timepoint is greater or equal to the second.
    MEMBER FUNCTION f_b_e(tp1 D_Timepoint_Y, tp2 D_Timepoint_Y) return pls_integer is
    b pls_integer := D_Timepoint_Y_Package.f_b_e(m_y, tp1.m_y, tp2.m_y);
    begin
         return b;
    end;

    --Returns the Interval between two Timepoints.
    MEMBER FUNCTION f_diff(tp1 D_Timepoint_Y, tp2 D_Timepoint_Y) return D_Interval is
    i_Value double precision := 0;
    begin
         D_Timepoint_Y_Package.f_diff(m_y, tp1.m_y, tp2.m_y, i_Value);
         return D_Interval(i_Value);
    end;

    --Returns true if the Timepoint is equal to the Timestamp.
    MEMBER FUNCTION f_eq(tp D_Timepoint_Y, ts D_Timestamp) return pls_integer is
    b pls_integer := D_Timepoint_Y_Package.f_eq(m_y, tp.m_y, ts.m_Date.m_Year, ts.m_Date.m_Month, ts.m_Date.m_Day, ts.m_Time.m_Hour, ts.m_Time.m_Minute, ts.m_Time.m_Second, ts.m_Time.m_100thSec, ts.m_Time.m_tzHour, ts.m_Time.m_tzMinute);
    begin
         return b;
    end;

    --Returns true if the Timepoint is different from the Timestamp.
    MEMBER FUNCTION f_n_eq(tp D_Timepoint_Y, ts D_Timestamp) return pls_integer is
    b pls_integer := D_Timepoint_Y_Package.f_n_eq(m_y, tp.m_y, ts.m_Date.m_Year, ts.m_Date.m_Month, ts.m_Date.m_Day, ts.m_Time.m_Hour, ts.m_Time.m_Minute, ts.m_Time.m_Second, ts.m_Time.m_100thSec, ts.m_Time.m_tzHour, ts.m_Time.m_tzMinute);
    begin
         return b;
    end;

    --Returns true if the Timepoint is less than the Timestamp.
    MEMBER FUNCTION f_l(tp D_Timepoint_Y, ts D_Timestamp) return pls_integer is
    b pls_integer := D_Timepoint_Y_Package.f_l(m_y, tp.m_y, ts.m_Date.m_Year, ts.m_Date.m_Month, ts.m_Date.m_Day, ts.m_Time.m_Hour, ts.m_Time.m_Minute, ts.m_Time.m_Second, ts.m_Time.m_100thSec, ts.m_Time.m_tzHour, ts.m_Time.m_tzMinute);
    begin
         return b;
    end;

    --Returns true if the Timepoint is less or equal to the Timestamp.
    MEMBER FUNCTION f_l_e(tp D_Timepoint_Y, ts D_Timestamp) return pls_integer is
    b pls_integer := D_Timepoint_Y_Package.f_l_e(m_y, tp.m_y, ts.m_Date.m_Year, ts.m_Date.m_Month, ts.m_Date.m_Day, ts.m_Time.m_Hour, ts.m_Time.m_Minute, ts.m_Time.m_Second, ts.m_Time.m_100thSec, ts.m_Time.m_tzHour, ts.m_Time.m_tzMinute);
    begin
         return b;
    end;

    --Returns true if the Timepoint is greater than the Timestamp.
    MEMBER FUNCTION f_b(tp D_Timepoint_Y, ts D_Timestamp) return pls_integer is
    b pls_integer := D_Timepoint_Y_Package.f_b(m_y, tp.m_y, ts.m_Date.m_Year, ts.m_Date.m_Month, ts.m_Date.m_Day, ts.m_Time.m_Hour, ts.m_Time.m_Minute, ts.m_Time.m_Second, ts.m_Time.m_100thSec, ts.m_Time.m_tzHour, ts.m_Time.m_tzMinute);
    begin
         return b;
    end;

    --Returns true if the Timepoint is greater or equal to the Timestamp.
    MEMBER FUNCTION f_b_e(tp D_Timepoint_Y, ts D_Timestamp) return pls_integer is
    b pls_integer := D_Timepoint_Y_Package.f_b_e(m_y, tp.m_y, ts.m_Date.m_Year, ts.m_Date.m_Month, ts.m_Date.m_Day, ts.m_Time.m_Hour, ts.m_Time.m_Minute, ts.m_Time.m_Second, ts.m_Time.m_100thSec, ts.m_Time.m_tzHour, ts.m_Time.m_tzMinute);
    begin
         return b;
    end;

    --Returns true if two Timepoints overlap.
    MEMBER FUNCTION f_overlaps(tp1 D_Timepoint_Y, tp2 D_Timepoint_Y) return pls_integer is
    b pls_integer := D_Timepoint_Y_Package.f_overlaps(m_y, tp1.m_y, tp2.m_y);
    begin
         return b;
    end;

    --Returns true if the first Timepoint precedes the second Timepoint.
    MEMBER FUNCTION f_precedes(tp1 D_Timepoint_Y, tp2 D_Timepoint_Y) return pls_integer is
    b pls_integer := D_Timepoint_Y_Package.f_precedes(m_y, tp1.m_y, tp2.m_y);
    begin
         return b;
    end;

    --Returns true if the first Timepoint meets the second Timepoint.
    MEMBER FUNCTION f_meets(tp1 D_Timepoint_Y, tp2 D_Timepoint_Y) return pls_integer is
    b pls_integer := D_Timepoint_Y_Package.f_meets(m_y, tp1.m_y, tp2.m_y);
    begin
         return b;
    end;

    --Returns true if the first Timepoint is equal to the second Timepoint.
    MEMBER FUNCTION f_equal(tp1 D_Timepoint_Y, tp2 D_Timepoint_Y) return pls_integer is
    b pls_integer := D_Timepoint_Y_Package.f_equal(m_y, tp1.m_y, tp2.m_y);
    begin
         return b;
    end;

    --Returns true if the first Timepoint contains the second Timepoint.
    MEMBER FUNCTION f_contains(tp1 D_Timepoint_Y, tp2 D_Timepoint_Y) return pls_integer is
    b pls_integer := D_Timepoint_Y_Package.f_contains(m_y, tp1.m_y, tp2.m_y);
    begin
         return b;
    end;

    --Returns true if the Timepoint overlaps the Period.
    MEMBER FUNCTION f_overlaps(tp D_Timepoint_Y, p_y REF D_Period_Y) return pls_integer is
    p D_Period_Y;
    b pls_integer := 0;
    begin
         SELECT DEREF(p_y) INTO p FROM DUAL;
         b := D_Timepoint_Y_Package.f_overlaps(m_y, tp.m_y, p.b.m_y, p.e.m_y);
         return b;
    end;

    --Returns true if the Timepoint precedes the Period.
    MEMBER FUNCTION f_precedes(tp D_Timepoint_Y, p_y REF D_Period_Y) return pls_integer is
    p D_Period_Y;
    b pls_integer := 0;
    begin
         SELECT DEREF(p_y) INTO p FROM DUAL;
         b := D_Timepoint_Y_Package.f_precedes(m_y, tp.m_y, p.b.m_y, p.e.m_y);
         return b;
    end;

    --Returns true if the Timepoint meets the Period.
    MEMBER FUNCTION f_meets(tp D_Timepoint_Y, p_y REF D_Period_Y) return pls_integer is
    p D_Period_Y;
    b pls_integer := 0;
    begin
         SELECT DEREF(p_y) INTO p FROM DUAL;
         b := D_Timepoint_Y_Package.f_meets(m_y, tp.m_y, p.b.m_y, p.e.m_y);
         return b;
    end;

    --Returns true if the Timepoint is equal to the Period.
    MEMBER FUNCTION f_equal(tp D_Timepoint_Y, p_y REF D_Period_Y) return pls_integer is
    p D_Period_Y;
    b pls_integer := 0;
    begin
         SELECT DEREF(p_y) INTO p FROM DUAL;
         b := D_Timepoint_Y_Package.f_equal(m_y, tp.m_y, p.b.m_y, p.e.m_y);
         return b;
    end;

    --Returns true if the Timepoint contains the Period.
    MEMBER FUNCTION f_contains(tp D_Timepoint_Y, p_y REF D_Period_Y) return pls_integer is
    p D_Period_Y;
    b pls_integer := 0;
    begin
         SELECT DEREF(p_y) INTO p FROM DUAL;
         b := D_Timepoint_Y_Package.f_contains(m_y, tp.m_y, p.b.m_y, p.e.m_y);
         return b;
    end;

    --Returns true if the Timepoint overlaps the Temporal Element.
    MEMBER FUNCTION f_overlaps(tp D_Timepoint_Y, te REF D_Temp_Element_Y) return pls_integer is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_Y;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         return D_Timepoint_Y_Package.f_overlaps(m_y, tp.m_y, te1.to_string());
    end;

    --Returns true if the Timepoint precedes the Temporal Element.
    MEMBER FUNCTION f_precedes(tp D_Timepoint_Y, te REF D_Temp_Element_Y) return pls_integer is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_Y;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         return D_Timepoint_Y_Package.f_precedes(m_y, tp.m_y, te1.to_string());
    end;

    --Returns true if the Timepoint meets the Temporal Element.
    MEMBER FUNCTION f_meets(tp D_Timepoint_Y, te REF D_Temp_Element_Y) return pls_integer is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_Y;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         return D_Timepoint_Y_Package.f_meets(m_y, tp.m_y, te1.to_string());
    end;

    --Returns true if the Timepoint is equal to the Temporal Element.
    MEMBER FUNCTION f_equal(tp D_Timepoint_Y, te REF D_Temp_Element_Y) return pls_integer is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_Y;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         return D_Timepoint_Y_Package.f_equal(m_y, tp.m_y, te1.to_string());
    end;

    --Returns true if the Timepoint contains the Temporal Element.
    MEMBER FUNCTION f_contains(tp D_Timepoint_Y, te REF D_Temp_Element_Y) return pls_integer is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_Y;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         return D_Timepoint_Y_Package.f_contains(m_y, tp.m_y, te1.to_string());
    end;

    --Returns true if the Period constructed using the first two Timepoints overlaps the Period constructed using the other two Timepoints.
    MEMBER FUNCTION f_overlaps(tp1 D_Timepoint_Y, tp2 D_Timepoint_Y, tp3 D_Timepoint_Y, tp4 D_Timepoint_Y) return pls_integer is
    b pls_integer := D_Timepoint_Y_Package.f_overlaps(m_y, tp1.m_y, tp2.m_y, tp3.m_y, tp4.m_y);
    begin
         return b;
    end;

end;
/

-- Type body D_TIMEPOINT_M

CREATE OR REPLACE
type body D_Timepoint_M is

    --Changes the status of the Timepoint object
    MEMBER PROCEDURE change_status(special_value pls_integer) is
    begin
    -- m_y, m_m IN OUT argument
         D_Timepoint_M_Package.change_status(m_y, m_m, special_value);
    end;

    --Returns the year for the Timepoint object.
    MEMBER FUNCTION year return pls_integer is
    y pls_integer := D_Timepoint_M_Package.year(m_y, m_m);
    begin
         return y;
    end;

    --Returns the month for the Timepoint object .
    MEMBER FUNCTION month return pls_integer is
    m pls_integer := D_Timepoint_M_Package.month(m_y, m_m);
    begin
         return m;
    end;

    --Returns the Granularity of the Timepoint object.
    MEMBER FUNCTION get_granularity return pls_integer is
    g pls_integer := D_Timepoint_M_Package.get_granularity(m_y, m_m);
    begin
         return g;
    end;

    --Returns a long number equal to the number of seconds since the begin of the calendar, representing the value of the Timepoint object.
    MEMBER FUNCTION get_Abs_Date return double precision is
    g double precision := D_Timepoint_M_Package.get_Abs_Date(m_y, m_m);
    begin
         return g;
    end;

    --Sets the year for the Timepoint object.
    MEMBER PROCEDURE set_year(year pls_integer) is
    begin
    -- m_y, m_m IN OUT argument
         D_Timepoint_M_Package.set_year(m_y, m_m, year);
    end;

    --Sets the month for the Timepoint object.
    MEMBER PROCEDURE set_month(month pls_integer) is
    begin
    -- m_y, m_m IN OUT argument
         D_Timepoint_M_Package.set_month(m_y, m_m, month);
    end;

    --Sets the value of the Timepoint object using a long number representing the number of seconds since the begin of the calendar.
    MEMBER PROCEDURE set_Abs_Date(d double precision) is
    begin
    -- m_y, m_m IN OUT argument
         D_Timepoint_M_Package.set_Abs_Date(m_y, m_m, d);
    end;

    --Converts the Timepoint object to a Period object.
    MEMBER FUNCTION to_period return REF D_Period_M is
    b_y pls_integer := 0;
    e_y pls_integer := 0;
    b_m pls_integer := 0;
    e_m pls_integer := 0;
    per REF D_Period_M;
    begin
         D_Timepoint_M_Package.to_period(m_y, m_m, b_y, b_m, e_y, e_m);
         INSERT INTO periods_m p
         VALUES (D_Period_M(D_Timepoint_M(b_y, b_m), D_Timepoint_M(e_y, e_m)))
         RETURNING REF(p) INTO per;
         return per;
    end;

    --Converts the Timepoint object to a Temporal Element object.
    MEMBER FUNCTION to_temporal_element return REF D_Temp_Element_M is
    str Varchar2(32766) := '';
    TE_m REF D_Temp_Element_M;
    begin
         str := D_Timepoint_M_Package.to_temporal_element(m_y, m_m);
         INSERT INTO temp_elements_m t
         VALUES (D_Temp_Element_M(return_temporal_element_m(str)))
         RETURNING REF(t) INTO TE_m;
         return TE_m;
    end;

    --Creates a string for the Timepoint object in ISO 8601 format.
    MEMBER FUNCTION to_string return Varchar2 is
    s Varchar2(50) := D_Timepoint_M_Package.to_string(m_y, m_m);
    begin
         return s;
    end;

    --Returns true if the year of the Timepoint object is a Leap year.
    MEMBER FUNCTION is_Leap_Year return pls_integer is
    b pls_integer := D_Timepoint_M_Package.is_Leap_Year(m_y, m_m);
    begin
         return b;
    end;

    --Returns true if parameter year is a Leap year.
    MEMBER FUNCTION is_Leap_Year(year pls_integer) return pls_integer is
    b pls_integer := D_Timepoint_M_Package.is_Leap_Year(m_y, m_m, year);
    begin
         return b;
    end;

    --Returns the number of days in the month of the Timepoint object.
    MEMBER FUNCTION days_in_month return pls_integer is
    d pls_integer := D_Timepoint_M_Package.days_in_month(m_y, m_m);
    begin
         return d;
    end;

    --Assigns the value of a Timestamp object to the Timepoint object.
    MEMBER PROCEDURE f_ass_timestamp(ts D_Timestamp) is
    -- m_y, m_m IN OUT argument
    begin
         D_Timepoint_M_Package.f_ass_timestamp(m_y, m_m, ts.m_Date.m_Year, ts.m_Date.m_Month, ts.m_Date.m_Day, ts.m_Time.m_Hour, ts.m_Time.m_Minute, ts.m_Time.m_Second, ts.m_Time.m_100thSec, ts.m_Time.m_tzHour, ts.m_Time.m_tzMinute);
    end;

    --Assigns the value of another Timepoint to the Timepoint object.
    MEMBER PROCEDURE f_ass_timepoint(tp D_Timepoint_M) is
    -- m_y, m_m IN OUT argument
    begin
         D_Timepoint_M_Package.f_ass_timepoint(m_y, m_m, tp.m_y, tp.m_m);
    end;

    --Adds an Interval to the Timepoint object.
    MEMBER PROCEDURE f_add_interval(i D_Interval) is
    -- m_y, m_m IN OUT argument
    begin
         D_Timepoint_M_Package.f_add_interval(m_y, m_m, i.m_Value);
    end;

    --Subtracts an Interval from the Timepoint object.
    MEMBER PROCEDURE f_sub_interval(i D_Interval) is
    -- m_y, m_m IN OUT argument
    begin
         D_Timepoint_M_Package.f_sub_interval(m_y, m_m, i.m_Value);
    end;

    --Increments the Timepoint object by one granule (Prefix operator).
    MEMBER PROCEDURE f_incr is
    -- m_y, m_m IN OUT argument
    begin
         D_Timepoint_M_Package.f_incr(m_y, m_m);
    end;

    --Decrements the Timepoint object by one granule (Prefix operator).
    MEMBER PROCEDURE f_decr is
    -- m_y, m_m IN OUT argument
    begin
         D_Timepoint_M_Package.f_decr(m_y, m_m);
    end;

    --Returns a Timepoint object representing the sum of an Timepoint object plus a Interval object.
    MEMBER FUNCTION f_add(tp D_Timepoint_M, i D_Interval) return D_Timepoint_M is
    y pls_integer := 0;
    m pls_integer := 0;
    begin
         D_Timepoint_M_Package.f_add(m_y, m_m, tp.m_y, tp.m_m, i.m_Value, y, m);
         return D_Timepoint_M(y, m);
    end;

    --Returns a Timepoint object representing the subtraction of an Interval object from a Timepoint object.
    MEMBER FUNCTION f_sub(tp D_Timepoint_M, i D_Interval) return D_Timepoint_M is
    y pls_integer := 0;
    m pls_integer := 0;
    begin
         D_Timepoint_M_Package.f_sub(m_y, m_m, tp.m_y, tp.m_m, i.m_Value, y, m);
         return D_Timepoint_M(y, m);
    end;

    --Returns a Period object representing the intersection between two Timepoints.
    MEMBER FUNCTION intersects(tp1 D_Timepoint_M, tp2 D_Timepoint_M) return REF D_Period_M is
    b_y pls_integer := 0;
    e_y pls_integer := 0;
    b_m pls_integer := 0;
    e_m pls_integer := 0;
    per REF D_Period_M;
    begin
         D_Timepoint_M_Package.intersects(m_y, m_m, tp1.m_y, tp1.m_m, tp2.m_y, tp2.m_m, b_y, b_m, e_y, e_m);
         INSERT INTO periods_m p
         VALUES (D_Period_M(D_Timepoint_M(b_y, b_m), D_Timepoint_M(e_y, e_m)))
         RETURNING REF(p) INTO per;
         return per;
    end;

    --Returns a Period object representing the intersection between a Timepoint and a Period.
    MEMBER FUNCTION intersects(tp D_Timepoint_M, p_m REF D_Period_M) return REF D_Period_M is
    b_y pls_integer := 0;
    e_y pls_integer := 0;
    b_m pls_integer := 0;
    e_m pls_integer := 0;
    p D_Period_M;
    per REF D_Period_M;
    begin
         SELECT DEREF(p_m) INTO p FROM DUAL;
         D_Timepoint_M_Package.intersects(m_y, m_m, tp.m_y, tp.m_m, p.b.m_y, p.b.m_m, p.e.m_y, p.e.m_m, b_y, b_m, e_y, e_m);
         INSERT INTO periods_m ps
         VALUES (D_Period_M(D_Timepoint_M(b_y, b_m), D_Timepoint_M(e_y, e_m)))
         RETURNING REF(ps) INTO per;
         return per;
    end;

    --Returns a Temporal Element object representing the intersection between a Timepoint and a Temporal Element.
    MEMBER FUNCTION intersects(tp D_Timepoint_M, te REF D_Temp_Element_M) return REF D_Temp_Element_M is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_M;
    TE_m REF D_Temp_Element_M;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         str := D_Timepoint_M_Package.intersects(m_y, m_m, tp.m_y, tp.m_m, te1.to_string());
         INSERT INTO temp_elements_m t
         VALUES (D_Temp_Element_M(return_temporal_element_m(str)))
         RETURNING REF(t) INTO TE_m;
         return TE_m;
    end;

    --Returns true if the Timepoints have the same value.
    MEMBER FUNCTION f_eq(tp1 D_Timepoint_M, tp2 D_Timepoint_M) return pls_integer is
    b pls_integer := D_Timepoint_M_Package.f_eq(m_y, m_m, tp1.m_y, tp1.m_m, tp2.m_y, tp2.m_m);
    begin
         return b;
    end;

    --Returns true if the Timepoints have different value.
    MEMBER FUNCTION f_n_eq(tp1 D_Timepoint_M, tp2 D_Timepoint_M) return pls_integer is
    b pls_integer := D_Timepoint_M_Package.f_n_eq(m_y, m_m, tp1.m_y, tp1.m_m, tp2.m_y, tp2.m_m);
    begin
         return b;
    end;

    --Returns true if the first Timepoint is less than the second.
    MEMBER FUNCTION f_l(tp1 D_Timepoint_M, tp2 D_Timepoint_M) return pls_integer is
    b pls_integer := D_Timepoint_M_Package.f_l(m_y, m_m, tp1.m_y, tp1.m_m, tp2.m_y, tp2.m_m);
    begin
         return b;
    end;

    --Returns true if the first Timepoint is less or equal to the second.
    MEMBER FUNCTION f_l_e(tp1 D_Timepoint_M, tp2 D_Timepoint_M) return pls_integer is
    b pls_integer := D_Timepoint_M_Package.f_l_e(m_y, m_m, tp1.m_y, tp1.m_m, tp2.m_y, tp2.m_m);
    begin
         return b;
    end;

    --Returns true if the first Timepoint is greater than the second.
    MEMBER FUNCTION f_b(tp1 D_Timepoint_M, tp2 D_Timepoint_M) return pls_integer is
    b pls_integer := D_Timepoint_M_Package.f_b(m_y, m_m, tp1.m_y, tp1.m_m, tp2.m_y, tp2.m_m);
    begin
         return b;
    end;

    --Returns true if the first Timepoint is greater or equal to the second.
    MEMBER FUNCTION f_b_e(tp1 D_Timepoint_M, tp2 D_Timepoint_M) return pls_integer is
    b pls_integer := D_Timepoint_M_Package.f_b_e(m_y, m_m, tp1.m_y, tp1.m_m, tp2.m_y, tp2.m_m);
    begin
         return b;
    end;

    --Returns the Interval between two Timepoints.
    MEMBER FUNCTION f_diff(tp1 D_Timepoint_M, tp2 D_Timepoint_M) return D_Interval is
    i_Value double precision := 0;
    begin
         D_Timepoint_M_Package.f_diff(m_y, m_m, tp1.m_y, tp1.m_m, tp2.m_y, tp2.m_m, i_Value);
         return D_Interval(i_Value);
    end;

    --Returns true if the Timepoint is equal to the Timestamp.
    MEMBER FUNCTION f_eq(tp D_Timepoint_M, ts D_Timestamp) return pls_integer is
    b pls_integer := D_Timepoint_M_Package.f_eq(m_y, m_m, tp.m_y, tp.m_m, ts.m_Date.m_Year, ts.m_Date.m_Month, ts.m_Date.m_Day, ts.m_Time.m_Hour, ts.m_Time.m_Minute, ts.m_Time.m_Second, ts.m_Time.m_100thSec, ts.m_Time.m_tzHour, ts.m_Time.m_tzMinute);
    begin
         return b;
    end;

    --Returns true if the Timepoint is different from the Timestamp.
    MEMBER FUNCTION f_n_eq(tp D_Timepoint_M, ts D_Timestamp) return pls_integer is
    b pls_integer := D_Timepoint_M_Package.f_n_eq(m_y, m_m, tp.m_y, tp.m_m, ts.m_Date.m_Year, ts.m_Date.m_Month, ts.m_Date.m_Day, ts.m_Time.m_Hour, ts.m_Time.m_Minute, ts.m_Time.m_Second, ts.m_Time.m_100thSec, ts.m_Time.m_tzHour, ts.m_Time.m_tzMinute);
    begin
         return b;
    end;

    --Returns true if the Timepoint is less than the Timestamp.
    MEMBER FUNCTION f_l(tp D_Timepoint_M, ts D_Timestamp) return pls_integer is
    b pls_integer := D_Timepoint_M_Package.f_l(m_y, m_m, tp.m_y, tp.m_m, ts.m_Date.m_Year, ts.m_Date.m_Month, ts.m_Date.m_Day, ts.m_Time.m_Hour, ts.m_Time.m_Minute, ts.m_Time.m_Second, ts.m_Time.m_100thSec, ts.m_Time.m_tzHour, ts.m_Time.m_tzMinute);
    begin
         return b;
    end;

    --Returns true if the Timepoint is less or equal to the Timestamp.
    MEMBER FUNCTION f_l_e(tp D_Timepoint_M, ts D_Timestamp) return pls_integer is
    b pls_integer := D_Timepoint_M_Package.f_l_e(m_y, m_m, tp.m_y, tp.m_m, ts.m_Date.m_Year, ts.m_Date.m_Month, ts.m_Date.m_Day, ts.m_Time.m_Hour, ts.m_Time.m_Minute, ts.m_Time.m_Second, ts.m_Time.m_100thSec, ts.m_Time.m_tzHour, ts.m_Time.m_tzMinute);
    begin
         return b;
    end;

    --Returns true if the Timepoint is greater than the Timestamp.
    MEMBER FUNCTION f_b(tp D_Timepoint_M, ts D_Timestamp) return pls_integer is
    b pls_integer := D_Timepoint_M_Package.f_b(m_y, m_m, tp.m_y, tp.m_m, ts.m_Date.m_Year, ts.m_Date.m_Month, ts.m_Date.m_Day, ts.m_Time.m_Hour, ts.m_Time.m_Minute, ts.m_Time.m_Second, ts.m_Time.m_100thSec, ts.m_Time.m_tzHour, ts.m_Time.m_tzMinute);
    begin
         return b;
    end;

    --Returns true if the Timepoint is greater or equal to the Timestamp.
    MEMBER FUNCTION f_b_e(tp D_Timepoint_M, ts D_Timestamp) return pls_integer is
    b pls_integer := D_Timepoint_M_Package.f_b_e(m_y, m_m, tp.m_y, tp.m_m, ts.m_Date.m_Year, ts.m_Date.m_Month, ts.m_Date.m_Day, ts.m_Time.m_Hour, ts.m_Time.m_Minute, ts.m_Time.m_Second, ts.m_Time.m_100thSec, ts.m_Time.m_tzHour, ts.m_Time.m_tzMinute);
    begin
         return b;
    end;

    --Returns true if two Timepoints overlap.
    MEMBER FUNCTION f_overlaps(tp1 D_Timepoint_M, tp2 D_Timepoint_M) return pls_integer is
    b pls_integer := D_Timepoint_M_Package.f_overlaps(m_y, m_m, tp1.m_y, tp1.m_m, tp2.m_y, tp2.m_m);
    begin
         return b;
    end;

    --Returns true if the first Timepoint precedes the second Timepoint.
    MEMBER FUNCTION f_precedes(tp1 D_Timepoint_M, tp2 D_Timepoint_M) return pls_integer is
    b pls_integer := D_Timepoint_M_Package.f_precedes(m_y, m_m, tp1.m_y, tp1.m_m, tp2.m_y, tp2.m_m);
    begin
         return b;
    end;

    --Returns true if the first Timepoint meets the second Timepoint.
    MEMBER FUNCTION f_meets(tp1 D_Timepoint_M, tp2 D_Timepoint_M) return pls_integer is
    b pls_integer := D_Timepoint_M_Package.f_meets(m_y, m_m, tp1.m_y, tp1.m_m, tp2.m_y, tp2.m_m);
    begin
         return b;
    end;

    --Returns true if the first Timepoint is equal to the second Timepoint.
    MEMBER FUNCTION f_equal(tp1 D_Timepoint_M, tp2 D_Timepoint_M) return pls_integer is
    b pls_integer := D_Timepoint_M_Package.f_equal(m_y, m_m, tp1.m_y, tp1.m_m, tp2.m_y, tp2.m_m);
    begin
         return b;
    end;

    --Returns true if the first Timepoint contains the second Timepoint.
    MEMBER FUNCTION f_contains(tp1 D_Timepoint_M, tp2 D_Timepoint_M) return pls_integer is
    b pls_integer := D_Timepoint_M_Package.f_contains(m_y, m_m, tp1.m_y, tp1.m_m, tp2.m_y, tp2.m_m);
    begin
         return b;
    end;

    --Returns true if the Timepoint overlaps the Period.
    MEMBER FUNCTION f_overlaps(tp D_Timepoint_M, p_m REF D_Period_M) return pls_integer is
    p D_Period_M;
    b pls_integer := 0;
    begin
         SELECT DEREF(p_m) INTO p FROM DUAL;
         b := D_Timepoint_M_Package.f_overlaps(m_y, m_m, tp.m_y, tp.m_m, p.b.m_y, p.b.m_m, p.e.m_y, p.e.m_m);
         return b;
    end;

    --Returns true if the Timepoint precedes the Period.
    MEMBER FUNCTION f_precedes(tp D_Timepoint_M, p_m REF D_Period_M) return pls_integer is
    p D_Period_M;
    b pls_integer := 0;
    begin
         SELECT DEREF(p_m) INTO p FROM DUAL;
         b := D_Timepoint_M_Package.f_precedes(m_y, m_m, tp.m_y, tp.m_m, p.b.m_y, p.b.m_m, p.e.m_y, p.e.m_m);
         return b;
    end;

    --Returns true if the Timepoint meets the Period.
    MEMBER FUNCTION f_meets(tp D_Timepoint_M, p_m REF  D_Period_M) return pls_integer is
    p D_Period_M;
    b pls_integer := 0;
    begin
         SELECT DEREF(p_m) INTO p FROM DUAL;
         b := D_Timepoint_M_Package.f_meets(m_y, m_m, tp.m_y, tp.m_m, p.b.m_y, p.b.m_m, p.e.m_y, p.e.m_m);
         return b;
    end;

    --Returns true if the Timepoint is equal to the Period.
    MEMBER FUNCTION f_equal(tp D_Timepoint_M, p_m REF D_Period_M) return pls_integer is
    p D_Period_M;
    b pls_integer := 0;
    begin
         SELECT DEREF(p_m) INTO p FROM DUAL;
         b := D_Timepoint_M_Package.f_equal(m_y, m_m, tp.m_y, tp.m_m, p.b.m_y, p.b.m_m, p.e.m_y, p.e.m_m);
         return b;
    end;

    --Returns true if the Timepoint contains the Period.
    MEMBER FUNCTION f_contains(tp D_Timepoint_M, p_m REF D_Period_M) return pls_integer is
    p D_Period_M;
    b pls_integer := 0;
    begin
         SELECT DEREF(p_m) INTO p FROM DUAL;
         b := D_Timepoint_M_Package.f_contains(m_y, m_m, tp.m_y, tp.m_m, p.b.m_y, p.b.m_m, p.e.m_y, p.e.m_m);
         return b;
    end;

    --Returns true if the Timepoint overlaps the Temporal Element.
    MEMBER FUNCTION f_overlaps(tp D_Timepoint_M, te REF D_Temp_Element_M) return pls_integer is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_M;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         return D_Timepoint_M_Package.f_overlaps(m_y, m_m, tp.m_y, tp.m_m, te1.to_string());
    end;

    --Returns true if the Timepoint precedes the Temporal Element.
    MEMBER FUNCTION f_precedes(tp D_Timepoint_M, te REF D_Temp_Element_M) return pls_integer is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_M;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         return D_Timepoint_M_Package.f_precedes(m_y, m_m, tp.m_y, tp.m_m, te1.to_string());
    end;

    --Returns true if the Timepoint meets the Temporal Element.
    MEMBER FUNCTION f_meets(tp D_Timepoint_M, te REF D_Temp_Element_M) return pls_integer is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_M;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         return D_Timepoint_M_Package.f_meets(m_y, m_m, tp.m_y, tp.m_m, te1.to_string());
    end;

    --Returns true if the Timepoint is equal to the Temporal Element.
    MEMBER FUNCTION f_equal(tp D_Timepoint_M, te REF D_Temp_Element_M) return pls_integer is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_M;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         return D_Timepoint_M_Package.f_equal(m_y, m_m, tp.m_y, tp.m_m, te1.to_string());
    end;

    --Returns true if the Timepoint contains the Temporal Element.
    MEMBER FUNCTION f_contains(tp D_Timepoint_M, te REF D_Temp_Element_M) return pls_integer is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_M;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         return D_Timepoint_M_Package.f_contains(m_y, m_m, tp.m_y, tp.m_m, te1.to_string());
    end;

    --Returns true if the Period constructed using the first two Timepoints overlaps the Period constructed using the other two Timepoints.
    MEMBER FUNCTION f_overlaps(tp1 D_Timepoint_M, tp2 D_Timepoint_M, tp3 D_Timepoint_M, tp4 D_Timepoint_M) return pls_integer is
    b pls_integer := D_Timepoint_M_Package.f_overlaps(m_y, m_m, tp1.m_y, tp1.m_m, tp2.m_y, tp2.m_m, tp3.m_y, tp3.m_m, tp4.m_y, tp4.m_m);
    begin
         return b;
    end;

end;
/

-- Type body D_TIMEPOINT_D

CREATE OR REPLACE
type body D_Timepoint_D is

    --Changes the status of the Timepoint object
    MEMBER PROCEDURE change_status(special_value pls_integer, year pls_integer) is
    begin
    -- m_y, m_m, m_d IN OUT argument
         D_Timepoint_D_Package.change_status(m_y, m_m, m_d, special_value, year);
    end;

    --Returns the year for the Timepoint object.
    MEMBER FUNCTION year return pls_integer is
    y pls_integer := D_Timepoint_D_Package.year(m_y, m_m, m_d);
    begin
         return y;
    end;

    --Returns the month for the Timepoint object .
    MEMBER FUNCTION month return pls_integer is
    m pls_integer := D_Timepoint_D_Package.month(m_y, m_m, m_d);
    begin
         return m;
    end;

    --Returns the day for the Timepoint object.
    MEMBER FUNCTION day return pls_integer is
    d pls_integer := D_Timepoint_D_Package.day(m_y, m_m, m_d);
    begin
         return d;
    end;

    --Returns the Granularity of the Timepoint object.
    MEMBER FUNCTION get_granularity return pls_integer is
    g pls_integer := D_Timepoint_D_Package.get_granularity(m_y, m_m, m_d);
    begin
         return g;
    end;

    --Returns a long number equal to the number of seconds since the begin of the calendar, representing the value of the Timepoint object.
    MEMBER FUNCTION get_Abs_Date return double precision is
    g double precision := D_Timepoint_D_Package.get_Abs_Date(m_y, m_m, m_d);
    begin
         return g;
    end;

    --Sets the year for the Timepoint object.
    MEMBER PROCEDURE set_year(year pls_integer) is
    begin
    -- m_y, m_m, m_d IN OUT argument
         D_Timepoint_D_Package.set_year(m_y, m_m, m_d, year);
    end;

    --Sets the month for the Timepoint object.
    MEMBER PROCEDURE set_month(month pls_integer) is
    begin
    -- m_y, m_m, m_d IN OUT argument
         D_Timepoint_D_Package.set_month(m_y, m_m, m_d, month);
    end;

    --Sets the day for the Timepoint object.
    MEMBER PROCEDURE set_day(day pls_integer) is
    begin
    -- m_y, m_m, m_d IN OUT argument
         D_Timepoint_D_Package.set_day(m_y, m_m, m_d, day);
    end;

    --Sets the value of the Timepoint object using a long number representing the number of seconds since the begin of the calendar.
    MEMBER PROCEDURE set_Abs_Date(d double precision) is
    begin
    -- m_y, m_m, m_d IN OUT argument
         D_Timepoint_D_Package.set_Abs_Date(m_y, m_m, m_d, d);
    end;

    --Converts the Timepoint object to a Period object.
    MEMBER FUNCTION to_period return REF D_Period_D is
    b_y pls_integer := 0;
    e_y pls_integer := 0;
    b_m pls_integer := 0;
    e_m pls_integer := 0;
    b_d pls_integer := 0;
    e_d pls_integer := 0;
    per REF D_Period_D;
    begin
         D_Timepoint_D_Package.to_period(m_y, m_m, m_d, b_y, b_m, b_d, e_y, e_m, e_d);
         INSERT INTO periods_d p
         VALUES (D_Period_D(D_Timepoint_D(b_y, b_m, b_d), D_Timepoint_D(e_y, e_m, e_d)))
         RETURNING REF(p) INTO per;
         return per;
    end;

    --Converts the Timepoint object to a Temporal Element object.
    MEMBER FUNCTION to_temporal_element return REF D_Temp_Element_D is
    str Varchar2(32766) := '';
    TE_d REF D_Temp_Element_D;
    begin
         str := D_Timepoint_D_Package.to_temporal_element(m_y, m_m, m_d);
         INSERT INTO temp_elements_d t
         VALUES (D_Temp_Element_D(return_temporal_element_d(str)))
         RETURNING REF(t) INTO TE_d;
         return TE_d;
    end;

    --Creates a string for the Timepoint object in ISO 8601 format.
    MEMBER FUNCTION to_string return Varchar2 is
    s Varchar2(50) := D_Timepoint_D_Package.to_string(m_y, m_m, m_d);
    begin
         return s;
    end;

    --Returns true if the year of the Timepoint object is a Leap year.
    MEMBER FUNCTION is_Leap_Year return pls_integer is
    b pls_integer := D_Timepoint_D_Package.is_Leap_Year(m_y, m_m, m_d);
    begin
         return b;
    end;

    --Returns true if parameter year is a Leap year.
    MEMBER FUNCTION is_Leap_Year(year pls_integer) return pls_integer is
    b pls_integer := D_Timepoint_D_Package.is_Leap_Year(m_y, m_m, m_d, year);
    begin
         return b;
    end;

    --Returns the number of days in the month of the Timepoint object.
    MEMBER FUNCTION days_in_month return pls_integer is
    d pls_integer := D_Timepoint_D_Package.days_in_month(m_y, m_m, m_d);
    begin
         return d;
    end;

    --Assigns the value of a Timestamp object to the Timepoint object.
    MEMBER PROCEDURE f_ass_timestamp(ts D_Timestamp) is
    -- m_y, m_m, m_d IN OUT argument
    begin
         D_Timepoint_D_Package.f_ass_timestamp(m_y, m_m, m_d, ts.m_Date.m_Year, ts.m_Date.m_Month, ts.m_Date.m_Day, ts.m_Time.m_Hour, ts.m_Time.m_Minute, ts.m_Time.m_Second, ts.m_Time.m_100thSec, ts.m_Time.m_tzHour, ts.m_Time.m_tzMinute);
    end;

    --Assigns the value of another Timepoint to the Timepoint object.
    MEMBER PROCEDURE f_ass_timepoint(tp D_Timepoint_D) is
    -- m_y, m_m, m_d IN OUT argument
    begin
         D_Timepoint_D_Package.f_ass_timepoint(m_y, m_m, m_d, tp.m_y, tp.m_m, tp.m_d);
    end;

    --Adds an Interval to the Timepoint object.
    MEMBER PROCEDURE f_add_interval(i D_Interval) is
    -- m_y, m_m, m_d IN OUT argument
    begin
         D_Timepoint_D_Package.f_add_interval(m_y, m_m, m_d, i.m_Value);
    end;

    --Subtracts an Interval from the Timepoint object.
    MEMBER PROCEDURE f_sub_interval(i D_Interval) is
    -- m_y, m_m, m_d IN OUT argument
    begin
         D_Timepoint_D_Package.f_sub_interval(m_y, m_m, m_d, i.m_Value);
    end;

    --Increments the Timepoint object by one granule (Prefix operator).
    MEMBER PROCEDURE f_incr is
    -- m_y, m_m, m_d IN OUT argument
    begin
         D_Timepoint_D_Package.f_incr(m_y, m_m, m_d);
    end;

    --Decrements the Timepoint object by one granule (Prefix operator).
    MEMBER PROCEDURE f_decr is
    -- m_y, m_m, m_d IN OUT argument
    begin
         D_Timepoint_D_Package.f_decr(m_y, m_m, m_d);
    end;

    --Returns a Timepoint object representing the sum of an Timepoint object plus a Interval object.
    MEMBER FUNCTION f_add(tp D_Timepoint_D, i D_Interval) return D_Timepoint_D is
    y pls_integer := 0;
    m pls_integer := 0;
    d pls_integer := 0;
    begin
         D_Timepoint_D_Package.f_add(m_y, m_m, m_d, tp.m_y, tp.m_m, tp.m_d, i.m_Value, y, m, d);
         return D_Timepoint_D(y, m, d);
    end;

    --Returns a Timepoint object representing the subtraction of an Interval object from a Timepoint object.
    MEMBER FUNCTION f_sub(tp D_Timepoint_D, i D_Interval) return D_Timepoint_D is
    y pls_integer := 0;
    m pls_integer := 0;
    d pls_integer := 0;
    begin
         D_Timepoint_D_Package.f_sub(m_y, m_m, m_d, tp.m_y, tp.m_m, tp.m_d, i.m_Value, y, m, d);
         return D_Timepoint_D(y, m, d);
    end;

    --Returns a Period object representing the intersection between two Timepoints.
    MEMBER FUNCTION intersects(tp1 D_Timepoint_D, tp2 D_Timepoint_D) return REF D_Period_D is
    b_y pls_integer := 0;
    e_y pls_integer := 0;
    b_m pls_integer := 0;
    e_m pls_integer := 0;
    b_d pls_integer := 0;
    e_d pls_integer := 0;
    per REF D_Period_D;
    begin
         D_Timepoint_D_Package.intersects(m_y, m_m, m_d, tp1.m_y, tp1.m_m, tp1.m_d, tp2.m_y, tp2.m_m, tp2.m_d, b_y, b_m, b_d, e_y, e_m, e_d);
         INSERT INTO periods_d p
         VALUES (D_Period_D(D_Timepoint_D(b_y, b_m, b_d), D_Timepoint_D(e_y, e_m, e_d)))
         RETURNING REF(p) INTO per;
         return per;
    end;

    --Returns a Period object representing the intersection between a Timepoint and a Period.
    MEMBER FUNCTION intersects(tp D_Timepoint_D, p_d REF D_Period_D) return REF D_Period_D is
    b_y pls_integer := 0;
    e_y pls_integer := 0;
    b_m pls_integer := 0;
    e_m pls_integer := 0;
    b_d pls_integer := 0;
    e_d pls_integer := 0;
    p D_Period_D;
    per REF D_Period_D;
    begin
         SELECT DEREF(p_d) INTO p FROM DUAL;
         D_Timepoint_D_Package.intersects(m_y, m_m, m_d, tp.m_y, tp.m_m, tp.m_d, p.b.m_y, p.b.m_m, p.b.m_d, p.e.m_y, p.e.m_m, p.e.m_d, b_y, b_m, b_d, e_y, e_m, e_d);
         INSERT INTO periods_d ps
         VALUES (D_Period_D(D_Timepoint_D(b_y, b_m, b_d), D_Timepoint_D(e_y, e_m, e_d)))
         RETURNING REF(ps) INTO per;
         return per;
    end;

    --Returns a Temporal Element object representing the intersection between a Timepoint and a Temporal Element.
    MEMBER FUNCTION intersects(tp D_Timepoint_D, te REF D_Temp_Element_D) return REF D_Temp_Element_D is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_D;
    TE_d REF D_Temp_Element_D;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         str := D_Timepoint_D_Package.intersects(m_y, m_m, m_d, tp.m_y, tp.m_m, tp.m_d, te1.to_string());
         INSERT INTO temp_elements_d t
         VALUES (D_Temp_Element_D(return_temporal_element_d(str)))
         RETURNING REF(t) INTO TE_d;
         return TE_d;
    end;

    --Returns true if the Timepoints have the same value.
    MEMBER FUNCTION f_eq(tp1 D_Timepoint_D, tp2 D_Timepoint_D) return pls_integer is
    b pls_integer := D_Timepoint_D_Package.f_eq(m_y, m_m, m_d, tp1.m_y, tp1.m_m, tp1.m_d, tp2.m_y, tp2.m_m, tp2.m_d);
    begin
         return b;
    end;

    --Returns true if the Timepoints have different value.
    MEMBER FUNCTION f_n_eq(tp1 D_Timepoint_D, tp2 D_Timepoint_D) return pls_integer is
    b pls_integer := D_Timepoint_D_Package.f_n_eq(m_y, m_m, m_d, tp1.m_y, tp1.m_m, tp1.m_d, tp2.m_y, tp2.m_m, tp2.m_d);
    begin
         return b;
    end;

    --Returns true if the first Timepoint is less than the second.
    MEMBER FUNCTION f_l(tp1 D_Timepoint_D, tp2 D_Timepoint_D) return pls_integer is
    b pls_integer := D_Timepoint_D_Package.f_l(m_y, m_m, m_d, tp1.m_y, tp1.m_m, tp1.m_d, tp2.m_y, tp2.m_m, tp2.m_d);
    begin
         return b;
    end;

    --Returns true if the first Timepoint is less or equal to the second.
    MEMBER FUNCTION f_l_e(tp1 D_Timepoint_D, tp2 D_Timepoint_D) return pls_integer is
    b pls_integer := D_Timepoint_D_Package.f_l_e(m_y, m_m, m_d, tp1.m_y, tp1.m_m, tp1.m_d, tp2.m_y, tp2.m_m, tp2.m_d);
    begin
         return b;
    end;

    --Returns true if the first Timepoint is greater than the second.
    MEMBER FUNCTION f_b(tp1 D_Timepoint_D, tp2 D_Timepoint_D) return pls_integer is
    b pls_integer := D_Timepoint_D_Package.f_b(m_y, m_m, m_d, tp1.m_y, tp1.m_m, tp1.m_d, tp2.m_y, tp2.m_m, tp2.m_d);
    begin
         return b;
    end;

    --Returns true if the first Timepoint is greater or equal to the second.
    MEMBER FUNCTION f_b_e(tp1 D_Timepoint_D, tp2 D_Timepoint_D) return pls_integer is
    b pls_integer := D_Timepoint_D_Package.f_b_e(m_y, m_m, m_d, tp1.m_y, tp1.m_m, tp1.m_d, tp2.m_y, tp2.m_m, tp2.m_d);
    begin
         return b;
    end;

    --Returns the Interval between two Timepoints.
    MEMBER FUNCTION f_diff(tp1 D_Timepoint_D, tp2 D_Timepoint_D) return D_Interval is
    i_Value double precision := 0;
    begin
         D_Timepoint_D_Package.f_diff(m_y, m_m, m_d, tp1.m_y, tp1.m_m, tp1.m_d, tp2.m_y, tp2.m_m, tp2.m_d, i_Value);
         return D_Interval(i_Value);
    end;

    --Returns true if the Timepoint is equal to the Timestamp.
    MEMBER FUNCTION f_eq(tp D_Timepoint_D, ts D_Timestamp) return pls_integer is
    b pls_integer := D_Timepoint_D_Package.f_eq(m_y, m_m, m_d, tp.m_y, tp.m_m, tp.m_d, ts.m_Date.m_Year, ts.m_Date.m_Month, ts.m_Date.m_Day, ts.m_Time.m_Hour, ts.m_Time.m_Minute, ts.m_Time.m_Second, ts.m_Time.m_100thSec, ts.m_Time.m_tzHour, ts.m_Time.m_tzMinute);
    begin
         return b;
    end;

    --Returns true if the Timepoint is different from the Timestamp.
    MEMBER FUNCTION f_n_eq(tp D_Timepoint_D, ts D_Timestamp) return pls_integer is
    b pls_integer := D_Timepoint_D_Package.f_n_eq(m_y, m_m, m_d, tp.m_y, tp.m_m, tp.m_d, ts.m_Date.m_Year, ts.m_Date.m_Month, ts.m_Date.m_Day, ts.m_Time.m_Hour, ts.m_Time.m_Minute, ts.m_Time.m_Second, ts.m_Time.m_100thSec, ts.m_Time.m_tzHour, ts.m_Time.m_tzMinute);
    begin
         return b;
    end;

    --Returns true if the Timepoint is less than the Timestamp.
    MEMBER FUNCTION f_l(tp D_Timepoint_D, ts D_Timestamp) return pls_integer is
    b pls_integer := D_Timepoint_D_Package.f_l(m_y, m_m, m_d, tp.m_y, tp.m_m, tp.m_d, ts.m_Date.m_Year, ts.m_Date.m_Month, ts.m_Date.m_Day, ts.m_Time.m_Hour, ts.m_Time.m_Minute, ts.m_Time.m_Second, ts.m_Time.m_100thSec, ts.m_Time.m_tzHour, ts.m_Time.m_tzMinute);
    begin
         return b;
    end;

    --Returns true if the Timepoint is less or equal to the Timestamp.
    MEMBER FUNCTION f_l_e(tp D_Timepoint_D, ts D_Timestamp) return pls_integer is
    b pls_integer := D_Timepoint_D_Package.f_l_e(m_y, m_m, m_d, tp.m_y, tp.m_m, tp.m_d, ts.m_Date.m_Year, ts.m_Date.m_Month, ts.m_Date.m_Day, ts.m_Time.m_Hour, ts.m_Time.m_Minute, ts.m_Time.m_Second, ts.m_Time.m_100thSec, ts.m_Time.m_tzHour, ts.m_Time.m_tzMinute);
    begin
         return b;
    end;

    --Returns true if the Timepoint is greater than the Timestamp.
    MEMBER FUNCTION f_b(tp D_Timepoint_D, ts D_Timestamp) return pls_integer is
    b pls_integer := D_Timepoint_D_Package.f_b(m_y, m_m, m_d, tp.m_y, tp.m_m, tp.m_d, ts.m_Date.m_Year, ts.m_Date.m_Month, ts.m_Date.m_Day, ts.m_Time.m_Hour, ts.m_Time.m_Minute, ts.m_Time.m_Second, ts.m_Time.m_100thSec, ts.m_Time.m_tzHour, ts.m_Time.m_tzMinute);
    begin
         return b;
    end;

    --Returns true if the Timepoint is greater or equal to the Timestamp.
    MEMBER FUNCTION f_b_e(tp D_Timepoint_D, ts D_Timestamp) return pls_integer is
    b pls_integer := D_Timepoint_D_Package.f_b_e(m_y, m_m, m_d, tp.m_y, tp.m_m, tp.m_d, ts.m_Date.m_Year, ts.m_Date.m_Month, ts.m_Date.m_Day, ts.m_Time.m_Hour, ts.m_Time.m_Minute, ts.m_Time.m_Second, ts.m_Time.m_100thSec, ts.m_Time.m_tzHour, ts.m_Time.m_tzMinute);
    begin
         return b;
    end;

    --Returns true if two Timepoints overlap.
    MEMBER FUNCTION f_overlaps(tp1 D_Timepoint_D, tp2 D_Timepoint_D) return pls_integer is
    b pls_integer := D_Timepoint_D_Package.f_overlaps(m_y, m_m, m_d, tp1.m_y, tp1.m_m, tp1.m_d, tp2.m_y, tp2.m_m, tp2.m_d);
    begin
         return b;
    end;

    --Returns true if the first Timepoint precedes the second Timepoint.
    MEMBER FUNCTION f_precedes(tp1 D_Timepoint_D, tp2 D_Timepoint_D) return pls_integer is
    b pls_integer := D_Timepoint_D_Package.f_precedes(m_y, m_m, m_d, tp1.m_y, tp1.m_m, tp1.m_d, tp2.m_y, tp2.m_m, tp2.m_d);
    begin
         return b;
    end;

    --Returns true if the first Timepoint meets the second Timepoint.
    MEMBER FUNCTION f_meets(tp1 D_Timepoint_D, tp2 D_Timepoint_D) return pls_integer is
    b pls_integer := D_Timepoint_D_Package.f_meets(m_y, m_m, m_d, tp1.m_y, tp1.m_m, tp1.m_d, tp2.m_y, tp2.m_m, tp2.m_d);
    begin
         return b;
    end;

    --Returns true if the first Timepoint is equal to the second Timepoint.
    MEMBER FUNCTION f_equal(tp1 D_Timepoint_D, tp2 D_Timepoint_D) return pls_integer is
    b pls_integer := D_Timepoint_D_Package.f_equal(m_y, m_m, m_d, tp1.m_y, tp1.m_m, tp1.m_d, tp2.m_y, tp2.m_m, tp2.m_d);
    begin
         return b;
    end;

    --Returns true if the first Timepoint contains the second Timepoint.
    MEMBER FUNCTION f_contains(tp1 D_Timepoint_D, tp2 D_Timepoint_D) return pls_integer is
    b pls_integer := D_Timepoint_D_Package.f_contains(m_y, m_m, m_d, tp1.m_y, tp1.m_m, tp1.m_d, tp2.m_y, tp2.m_m, tp2.m_d);
    begin
         return b;
    end;

    --Returns true if the Timepoint overlaps the Period.
    MEMBER FUNCTION f_overlaps(tp D_Timepoint_D, p_d REF D_Period_D) return pls_integer is
    p D_Period_D;
    b pls_integer := 0;
    begin
         SELECT DEREF(p_d) INTO p FROM DUAL;
         b := D_Timepoint_D_Package.f_overlaps(m_y, m_m, m_d, tp.m_y, tp.m_m, tp.m_d, p.b.m_y, p.b.m_m, p.b.m_d, p.e.m_y, p.e.m_m, p.e.m_d);
         return b;
    end;

    --Returns true if the Timepoint precedes the Period.
    MEMBER FUNCTION f_precedes(tp D_Timepoint_D, p_d REF D_Period_D) return pls_integer is
    p D_Period_D;
    b pls_integer := 0;
    begin
         SELECT DEREF(p_d) INTO p FROM DUAL;
         b := D_Timepoint_D_Package.f_precedes(m_y, m_m, m_d, tp.m_y, tp.m_m, tp.m_d, p.b.m_y, p.b.m_m, p.b.m_d, p.e.m_y, p.e.m_m, p.e.m_d);
         return b;
    end;

    --Returns true if the Timepoint meets the Period.
    MEMBER FUNCTION f_meets(tp D_Timepoint_D, p_d REF D_Period_D) return pls_integer is
    p D_Period_D;
    b pls_integer := 0;
    begin
         SELECT DEREF(p_d) INTO p FROM DUAL;
         b := D_Timepoint_D_Package.f_meets(m_y, m_m, m_d, tp.m_y, tp.m_m, tp.m_d, p.b.m_y, p.b.m_m, p.b.m_d, p.e.m_y, p.e.m_m, p.e.m_d);
         return b;
    end;

    --Returns true if the Timepoint is equal to the Period.
    MEMBER FUNCTION f_equal(tp D_Timepoint_D, p_d REF D_Period_D) return pls_integer is
    p D_Period_D;
    b pls_integer := 0;
    begin
         SELECT DEREF(p_d) INTO p FROM DUAL;
         b := D_Timepoint_D_Package.f_equal(m_y, m_m, m_d, tp.m_y, tp.m_m, tp.m_d, p.b.m_y, p.b.m_m, p.b.m_d, p.e.m_y, p.e.m_m, p.e.m_d);
         return b;
    end;

    --Returns true if the Timepoint contains the Period.
    MEMBER FUNCTION f_contains(tp D_Timepoint_D, p_d REF D_Period_D) return pls_integer is
    p D_Period_D;
    b pls_integer := 0;
    begin
         SELECT DEREF(p_d) INTO p FROM DUAL;
         b := D_Timepoint_D_Package.f_contains(m_y, m_m, m_d, tp.m_y, tp.m_m, tp.m_d, p.b.m_y, p.b.m_m, p.b.m_d, p.e.m_y, p.e.m_m, p.e.m_d);
         return b;
    end;

    --Returns true if the Timepoint overlaps the Temporal Element.
    MEMBER FUNCTION f_overlaps(tp D_Timepoint_D, te REF D_Temp_Element_D) return pls_integer is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_D;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         return D_Timepoint_D_Package.f_overlaps(m_y, m_m, m_d, tp.m_y, tp.m_m, tp.m_d, te1.to_string());
    end;

    --Returns true if the Timepoint precedes the Temporal Element.
    MEMBER FUNCTION f_precedes(tp D_Timepoint_D, te REF D_Temp_Element_D) return pls_integer is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_D;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         return D_Timepoint_D_Package.f_precedes(m_y, m_m, m_d, tp.m_y, tp.m_m, tp.m_d, te1.to_string());
    end;

    --Returns true if the Timepoint meets the Temporal Element.
    MEMBER FUNCTION f_meets(tp D_Timepoint_D, te REF D_Temp_Element_D) return pls_integer is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_D;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         return D_Timepoint_D_Package.f_meets(m_y, m_m, m_d, tp.m_y, tp.m_m, tp.m_d, te1.to_string());
    end;

    --Returns true if the Timepoint is equal to the Temporal Element.
    MEMBER FUNCTION f_equal(tp D_Timepoint_D, te REF D_Temp_Element_D) return pls_integer is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_D;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         return D_Timepoint_D_Package.f_equal(m_y, m_m, m_d, tp.m_y, tp.m_m, tp.m_d, te1.to_string());
    end;

    --Returns true if the Timepoint contains the Temporal Element.
    MEMBER FUNCTION f_contains(tp D_Timepoint_D, te REF D_Temp_Element_D) return pls_integer is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_D;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         return D_Timepoint_D_Package.f_contains(m_y, m_m, m_d, tp.m_y, tp.m_m, tp.m_d, te1.to_string());
    end;

    --Returns true if the Period constructed using the first two Timepoints overlaps the Period constructed using the other two Timepoints.
    MEMBER FUNCTION f_overlaps(tp1 D_Timepoint_D, tp2 D_Timepoint_D, tp3 D_Timepoint_D, tp4 D_Timepoint_D) return pls_integer is
    b pls_integer := D_Timepoint_D_Package.f_overlaps(m_y, m_m, m_d, tp1.m_y, tp1.m_m, tp1.m_d, tp2.m_y, tp2.m_m, tp2.m_d, tp3.m_y, tp3.m_m, tp3.m_d, tp4.m_y, tp4.m_m, tp4.m_d);
    begin
         return b;
    end;

end;
/

-- Type body D_TIMEPOINT_H

CREATE OR REPLACE
type body D_Timepoint_H is

    --Changes the status of the Timepoint object
    MEMBER PROCEDURE change_status(special_value pls_integer, special_hours pls_integer, year pls_integer) is
    begin
    -- m_y, m_m, m_d, m_h IN OUT argument
         D_Timepoint_H_Package.change_status(m_y, m_m, m_d, m_h, special_value, special_hours, year);
    end;

    --Changes the status of the Timepoint object
    MEMBER PROCEDURE change_status(special_hours pls_integer) is
    begin
    -- m_y, m_m, m_d, m_h IN OUT argument
         D_Timepoint_H_Package.change_status(m_y, m_m, m_d, m_h, special_hours);
    end;

    --Returns the year for the Timepoint object.
    MEMBER FUNCTION year return pls_integer is
    y pls_integer := D_Timepoint_H_Package.year(m_y, m_m, m_d, m_h);
    begin
         return y;
    end;

    --Returns the month for the Timepoint object .
    MEMBER FUNCTION month return pls_integer is
    m pls_integer := D_Timepoint_H_Package.month(m_y, m_m, m_d, m_h);
    begin
         return m;
    end;

    --Returns the day for the Timepoint object.
    MEMBER FUNCTION day return pls_integer is
    d pls_integer := D_Timepoint_H_Package.day(m_y, m_m, m_d, m_h);
    begin
         return d;
    end;

    --Returns the hour for the Timepoint object.
    MEMBER FUNCTION hour return pls_integer is
    h pls_integer := D_Timepoint_H_Package.hour(m_y, m_m, m_d, m_h);
    begin
         return h;
    end;

    --Returns the Granularity of the Timepoint object.
    MEMBER FUNCTION get_granularity return pls_integer is
    g pls_integer := D_Timepoint_H_Package.get_granularity(m_y, m_m, m_d, m_h);
    begin
         return g;
    end;

    --Returns a long number equal to the number of seconds since the begin of the calendar, representing the value of the Timepoint object.
    MEMBER FUNCTION get_Abs_Date return double precision is
    g double precision := D_Timepoint_H_Package.get_Abs_Date(m_y, m_m, m_d, m_h);
    begin
         return g;
    end;

    --Sets the year for the Timepoint object.
    MEMBER PROCEDURE set_year(year pls_integer) is
    begin
    -- m_y, m_m, m_d, m_h IN OUT argument
         D_Timepoint_H_Package.set_year(m_y, m_m, m_d, m_h, year);
    end;

    --Sets the month for the Timepoint object.
    MEMBER PROCEDURE set_month(month pls_integer) is
    begin
    -- m_y, m_m, m_d, m_h IN OUT argument
         D_Timepoint_H_Package.set_month(m_y, m_m, m_d, m_h, month);
    end;

    --Sets the day for the Timepoint object.
    MEMBER PROCEDURE set_day(day pls_integer) is
    begin
    -- m_y, m_m, m_d, m_h IN OUT argument
         D_Timepoint_H_Package.set_day(m_y, m_m, m_d, m_h, day);
    end;

    --Sets the hour for the Timepoint object.
    MEMBER PROCEDURE set_hour(hour pls_integer) is
    begin
    -- m_y, m_m, m_d, m_h IN OUT argument
         D_Timepoint_H_Package.set_hour(m_y, m_m, m_d, m_h, hour);
    end;

    --Sets the value of the Timepoint object using a long number representing the number of seconds since the begin of the calendar.
    MEMBER PROCEDURE set_Abs_Date(d double precision) is
    begin
    -- m_y, m_m, m_d, m_h IN OUT argument
         D_Timepoint_H_Package.set_Abs_Date(m_y, m_m, m_d, m_h, d);
    end;

    --Converts the Timepoint object to a Period object.
    MEMBER FUNCTION to_period return REF D_Period_H is
    b_y pls_integer := 0;
    e_y pls_integer := 0;
    b_m pls_integer := 0;
    e_m pls_integer := 0;
    b_d pls_integer := 0;
    e_d pls_integer := 0;
    b_h pls_integer := 0;
    e_h pls_integer := 0;
    per REF D_Period_H;
    begin
         D_Timepoint_H_Package.to_period(m_y, m_m, m_d, m_h, b_y, b_m, b_d, b_h, e_y, e_m, e_d, e_h);
         INSERT INTO periods_h p
         VALUES (D_Period_H(D_Timepoint_H(b_y, b_m, b_d, b_h), D_Timepoint_H(e_y, e_m, e_d, e_h)))
         RETURNING REF(p) INTO per;
         return per;
    end;

    --Converts the Timepoint object to a Temporal Element object.
    MEMBER FUNCTION to_temporal_element return REF D_Temp_Element_H is
    str Varchar2(32766) := '';
    TE_h REF D_Temp_Element_H;
    begin
         str := D_Timepoint_H_Package.to_temporal_element(m_y, m_m, m_d, m_h);
         INSERT INTO temp_elements_h t
         VALUES (D_Temp_Element_H(return_temporal_element_h(str)))
         RETURNING REF(t) INTO TE_h;
         return TE_h;
    end;

    --Creates a string for the Timepoint object in ISO 8601 format.
    MEMBER FUNCTION to_string return Varchar2 is
    s Varchar2(50) := D_Timepoint_H_Package.to_string(m_y, m_m, m_d, m_h);
    begin
         return s;
    end;

    --Returns true if the year of the Timepoint object is a Leap year.
    MEMBER FUNCTION is_Leap_Year return pls_integer is
    b pls_integer := D_Timepoint_H_Package.is_Leap_Year(m_y, m_m, m_d, m_h);
    begin
         return b;
    end;

    --Returns true if parameter year is a Leap year.
    MEMBER FUNCTION is_Leap_Year(year pls_integer) return pls_integer is
    b pls_integer := D_Timepoint_H_Package.is_Leap_Year(m_y, m_m, m_d, m_h, year);
    begin
         return b;
    end;

    --Returns the number of days in the month of the Timepoint object.
    MEMBER FUNCTION days_in_month return pls_integer is
    d pls_integer := D_Timepoint_H_Package.days_in_month(m_y, m_m, m_d, m_h);
    begin
         return d;
    end;

    --Assigns the value of a Timestamp object to the Timepoint object.
    MEMBER PROCEDURE f_ass_timestamp(ts D_Timestamp) is
    -- m_y, m_m, m_d, m_h IN OUT argument
    begin
         D_Timepoint_H_Package.f_ass_timestamp(m_y, m_m, m_d, m_h, ts.m_Date.m_Year, ts.m_Date.m_Month, ts.m_Date.m_Day, ts.m_Time.m_Hour, ts.m_Time.m_Minute, ts.m_Time.m_Second, ts.m_Time.m_100thSec, ts.m_Time.m_tzHour, ts.m_Time.m_tzMinute);
    end;

    --Assigns the value of another Timepoint to the Timepoint object.
    MEMBER PROCEDURE f_ass_timepoint(tp D_Timepoint_H) is
    -- m_y, m_m, m_d, m_h IN OUT argument
    begin
         D_Timepoint_H_Package.f_ass_timepoint(m_y, m_m, m_d, m_h, tp.m_y, tp.m_m, tp.m_d, tp.m_h);
    end;

    --Adds an Interval to the Timepoint object.
    MEMBER PROCEDURE f_add_interval(i D_Interval) is
    -- m_y, m_m, m_d, m_h IN OUT argument
    begin
         D_Timepoint_H_Package.f_add_interval(m_y, m_m, m_d, m_h, i.m_Value);
    end;

    --Subtracts an Interval from the Timepoint object.
    MEMBER PROCEDURE f_sub_interval(i D_Interval) is
    -- m_y, m_m, m_d, m_h IN OUT argument
    begin
         D_Timepoint_H_Package.f_sub_interval(m_y, m_m, m_d, m_h, i.m_Value);
    end;

    --Increments the Timepoint object by one granule (Prefix operator).
    MEMBER PROCEDURE f_incr is
    -- m_y, m_m, m_d, m_h IN OUT argument
    begin
         D_Timepoint_H_Package.f_incr(m_y, m_m, m_d, m_h);
    end;

    --Decrements the Timepoint object by one granule (Prefix operator).
    MEMBER PROCEDURE f_decr is
    -- m_y, m_m, m_d, m_h IN OUT argument
    begin
         D_Timepoint_H_Package.f_decr(m_y, m_m, m_d, m_h);
    end;

    --Returns a Timepoint object representing the sum of an Timepoint object plus a Interval object.
    MEMBER FUNCTION f_add(tp D_Timepoint_H, i D_Interval) return D_Timepoint_H is
    y pls_integer := 0;
    m pls_integer := 0;
    d pls_integer := 0;
    h pls_integer := 0;
    begin
         D_Timepoint_H_Package.f_add(m_y, m_m, m_d, m_h, tp.m_y, tp.m_m, tp.m_d, tp.m_h, i.m_Value, y, m, d, h);
         return D_Timepoint_H(y, m, d, h);
    end;

    --Returns a Timepoint object representing the subtraction of an Interval object from a Timepoint object.
    MEMBER FUNCTION f_sub(tp D_Timepoint_H, i D_Interval) return D_Timepoint_H is
    y pls_integer := 0;
    m pls_integer := 0;
    d pls_integer := 0;
    h pls_integer := 0;
    begin
         D_Timepoint_H_Package.f_sub(m_y, m_m, m_d, m_h, tp.m_y, tp.m_m, tp.m_d, tp.m_h, i.m_Value, y, m, d, y);
         return D_Timepoint_H(y, m, d, h);
    end;

    --Returns a Period object representing the intersection between two Timepoints.
    MEMBER FUNCTION intersects(tp1 D_Timepoint_H, tp2 D_Timepoint_H) return REF D_Period_H is
    b_y pls_integer := 0;
    e_y pls_integer := 0;
    b_m pls_integer := 0;
    e_m pls_integer := 0;
    b_d pls_integer := 0;
    e_d pls_integer := 0;
    b_h pls_integer := 0;
    e_h pls_integer := 0;
    per REF D_Period_H;
    begin
         D_Timepoint_H_Package.intersects(m_y, m_m, m_d, m_h, tp1.m_y, tp1.m_m, tp1.m_d, tp1.m_h, tp2.m_y, tp2.m_m, tp2.m_d, tp2.m_h, b_y, b_m, b_d, b_h, e_y, e_m, e_d, e_h);
         INSERT INTO periods_h p
         VALUES (D_Period_H(D_Timepoint_H(b_y, b_m, b_d, b_h), D_Timepoint_H(e_y, e_m, e_d, e_h)))
         RETURNING REF(p) INTO per;
         return per;
    end;

    --Returns a Period object representing the intersection between a Timepoint and a Period.
    MEMBER FUNCTION intersects(tp D_Timepoint_H, p_h REF D_Period_H) return REF D_Period_H is
    b_y pls_integer := 0;
    e_y pls_integer := 0;
    b_m pls_integer := 0;
    e_m pls_integer := 0;
    b_d pls_integer := 0;
    e_d pls_integer := 0;
    b_h pls_integer := 0;
    e_h pls_integer := 0;
    p D_Period_H;
    per REF D_Period_H;
    begin
         SELECT DEREF(p_h) INTO p FROM DUAL;
         D_Timepoint_H_Package.intersects(m_y, m_m, m_d, m_h, tp.m_y, tp.m_m, tp.m_d, tp.m_h, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, b_y, b_m, b_d, b_h, e_y, e_m, e_d, e_h);
         INSERT INTO periods_h ps
         VALUES (D_Period_H(D_Timepoint_H(b_y, b_m, b_d, b_h), D_Timepoint_H(e_y, e_m, e_d, e_h)))
         RETURNING REF(ps) INTO per;
         return per;
    end;

    --Returns a Temporal Element object representing the intersection between a Timepoint and a Temporal Element.
    MEMBER FUNCTION intersects(tp D_Timepoint_H, te REF D_Temp_Element_H) return REF D_Temp_Element_H is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_H;
    TE_h REF D_Temp_Element_H;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         str := D_Timepoint_H_Package.intersects(m_y, m_m, m_d, m_h, tp.m_y, tp.m_m, tp.m_d, tp.m_h, te1.to_string());
         INSERT INTO temp_elements_h t
         VALUES (D_Temp_Element_H(return_temporal_element_h(str)))
         RETURNING REF(t) INTO TE_h;
         return TE_h;
    end;

    --Returns true if the Timepoints have the same value.
    MEMBER FUNCTION f_eq(tp1 D_Timepoint_H, tp2 D_Timepoint_H) return pls_integer is
    b pls_integer := D_Timepoint_H_Package.f_eq(m_y, m_m, m_d, m_h, tp1.m_y, tp1.m_m, tp1.m_d, tp1.m_h, tp2.m_y, tp2.m_m, tp2.m_d, tp2.m_h);
    begin
         return b;
    end;

    --Returns true if the Timepoints have different value.
    MEMBER FUNCTION f_n_eq(tp1 D_Timepoint_H, tp2 D_Timepoint_H) return pls_integer is
    b pls_integer := D_Timepoint_H_Package.f_n_eq(m_y, m_m, m_d, m_h, tp1.m_y, tp1.m_m, tp1.m_d, tp1.m_h, tp2.m_y, tp2.m_m, tp2.m_d, tp2.m_h);
    begin
         return b;
    end;

    --Returns true if the first Timepoint is less than the second.
    MEMBER FUNCTION f_l(tp1 D_Timepoint_H, tp2 D_Timepoint_H) return pls_integer is
    b pls_integer := D_Timepoint_H_Package.f_l(m_y, m_m, m_d, m_h, tp1.m_y, tp1.m_m, tp1.m_d, tp1.m_h, tp2.m_y, tp2.m_m, tp2.m_d, tp2.m_h);
    begin
         return b;
    end;

    --Returns true if the first Timepoint is less or equal to the second.
    MEMBER FUNCTION f_l_e(tp1 D_Timepoint_H, tp2 D_Timepoint_H) return pls_integer is
    b pls_integer := D_Timepoint_H_Package.f_l_e(m_y, m_m, m_d, m_h, tp1.m_y, tp1.m_m, tp1.m_d, tp1.m_h, tp2.m_y, tp2.m_m, tp2.m_d, tp2.m_h);
    begin
         return b;
    end;

    --Returns true if the first Timepoint is greater than the second.
    MEMBER FUNCTION f_b(tp1 D_Timepoint_H, tp2 D_Timepoint_H) return pls_integer is
    b pls_integer := D_Timepoint_H_Package.f_b(m_y, m_m, m_d, m_h, tp1.m_y, tp1.m_m, tp1.m_d, tp1.m_h, tp2.m_y, tp2.m_m, tp2.m_d, tp2.m_h);
    begin
         return b;
    end;

    --Returns true if the first Timepoint is greater or equal to the second.
    MEMBER FUNCTION f_b_e(tp1 D_Timepoint_H, tp2 D_Timepoint_H) return pls_integer is
    b pls_integer := D_Timepoint_H_Package.f_b_e(m_y, m_m, m_d, m_h, tp1.m_y, tp1.m_m, tp1.m_d, tp1.m_h, tp2.m_y, tp2.m_m, tp2.m_d, tp2.m_h);
    begin
         return b;
    end;

    --Returns the Interval between two Timepoints.
    MEMBER FUNCTION f_diff(tp1 D_Timepoint_H, tp2 D_Timepoint_H) return D_Interval is
    i_Value double precision := 0;
    begin
         D_Timepoint_H_Package.f_diff(m_y, m_m, m_d, m_h, tp1.m_y, tp1.m_m, tp1.m_d, tp1.m_h, tp2.m_y, tp2.m_m, tp2.m_d, tp2.m_h, i_Value);
         return D_Interval(i_Value);
    end;

    --Returns true if the Timepoint is equal to the Timestamp.
    MEMBER FUNCTION f_eq(tp D_Timepoint_H, ts D_Timestamp) return pls_integer is
    b pls_integer := D_Timepoint_H_Package.f_eq(m_y, m_m, m_d, m_h, tp.m_y, tp.m_m, tp.m_d, tp.m_h, ts.m_Date.m_Year, ts.m_Date.m_Month, ts.m_Date.m_Day, ts.m_Time.m_Hour, ts.m_Time.m_Minute, ts.m_Time.m_Second, ts.m_Time.m_100thSec, ts.m_Time.m_tzHour, ts.m_Time.m_tzMinute);
    begin
         return b;
    end;

    --Returns true if the Timepoint is different from the Timestamp.
    MEMBER FUNCTION f_n_eq(tp D_Timepoint_H, ts D_Timestamp) return pls_integer is
    b pls_integer := D_Timepoint_H_Package.f_n_eq(m_y, m_m, m_d, m_h, tp.m_y, tp.m_m, tp.m_d, tp.m_h, ts.m_Date.m_Year, ts.m_Date.m_Month, ts.m_Date.m_Day, ts.m_Time.m_Hour, ts.m_Time.m_Minute, ts.m_Time.m_Second, ts.m_Time.m_100thSec, ts.m_Time.m_tzHour, ts.m_Time.m_tzMinute);
    begin
         return b;
    end;

    --Returns true if the Timepoint is less than the Timestamp.
    MEMBER FUNCTION f_l(tp D_Timepoint_H, ts D_Timestamp) return pls_integer is
    b pls_integer := D_Timepoint_H_Package.f_l(m_y, m_m, m_d, m_h, tp.m_y, tp.m_m, tp.m_d, tp.m_h, ts.m_Date.m_Year, ts.m_Date.m_Month, ts.m_Date.m_Day, ts.m_Time.m_Hour, ts.m_Time.m_Minute, ts.m_Time.m_Second, ts.m_Time.m_100thSec, ts.m_Time.m_tzHour, ts.m_Time.m_tzMinute);
    begin
         return b;
    end;

    --Returns true if the Timepoint is less or equal to the Timestamp.
    MEMBER FUNCTION f_l_e(tp D_Timepoint_H, ts D_Timestamp) return pls_integer is
    b pls_integer := D_Timepoint_H_Package.f_l_e(m_y, m_m, m_d, m_h, tp.m_y, tp.m_m, tp.m_d, tp.m_h, ts.m_Date.m_Year, ts.m_Date.m_Month, ts.m_Date.m_Day, ts.m_Time.m_Hour, ts.m_Time.m_Minute, ts.m_Time.m_Second, ts.m_Time.m_100thSec, ts.m_Time.m_tzHour, ts.m_Time.m_tzMinute);
    begin
         return b;
    end;

    --Returns true if the Timepoint is greater than the Timestamp.
    MEMBER FUNCTION f_b(tp D_Timepoint_H, ts D_Timestamp) return pls_integer is
    b pls_integer := D_Timepoint_H_Package.f_b(m_y, m_m, m_d, m_h, tp.m_y, tp.m_m, tp.m_d, tp.m_h, ts.m_Date.m_Year, ts.m_Date.m_Month, ts.m_Date.m_Day, ts.m_Time.m_Hour, ts.m_Time.m_Minute, ts.m_Time.m_Second, ts.m_Time.m_100thSec, ts.m_Time.m_tzHour, ts.m_Time.m_tzMinute);
    begin
         return b;
    end;

    --Returns true if the Timepoint is greater or equal to the Timestamp.
    MEMBER FUNCTION f_b_e(tp D_Timepoint_H, ts D_Timestamp) return pls_integer is
    b pls_integer := D_Timepoint_H_Package.f_b_e(m_y, m_m, m_d, m_h, tp.m_y, tp.m_m, tp.m_d, tp.m_h, ts.m_Date.m_Year, ts.m_Date.m_Month, ts.m_Date.m_Day, ts.m_Time.m_Hour, ts.m_Time.m_Minute, ts.m_Time.m_Second, ts.m_Time.m_100thSec, ts.m_Time.m_tzHour, ts.m_Time.m_tzMinute);
    begin
         return b;
    end;

    --Returns true if two Timepoints overlap.
    MEMBER FUNCTION f_overlaps(tp1 D_Timepoint_H, tp2 D_Timepoint_H) return pls_integer is
    b pls_integer := D_Timepoint_H_Package.f_overlaps(m_y, m_m, m_d, m_h, tp1.m_y, tp1.m_m, tp1.m_d, tp1.m_h, tp2.m_y, tp2.m_m, tp2.m_d, tp2.m_h);
    begin
         return b;
    end;

    --Returns true if the first Timepoint precedes the second Timepoint.
    MEMBER FUNCTION f_precedes(tp1 D_Timepoint_H, tp2 D_Timepoint_H) return pls_integer is
    b pls_integer := D_Timepoint_H_Package.f_precedes(m_y, m_m, m_d, m_h, tp1.m_y, tp1.m_m, tp1.m_d, tp1.m_h, tp2.m_y, tp2.m_m, tp2.m_d, tp2.m_h);
    begin
         return b;
    end;

    --Returns true if the first Timepoint meets the second Timepoint.
    MEMBER FUNCTION f_meets(tp1 D_Timepoint_H, tp2 D_Timepoint_H) return pls_integer is
    b pls_integer := D_Timepoint_H_Package.f_meets(m_y, m_m, m_d, m_h, tp1.m_y, tp1.m_m, tp1.m_d, tp1.m_h, tp2.m_y, tp2.m_m, tp2.m_d, tp2.m_h);
    begin
         return b;
    end;

    --Returns true if the first Timepoint is equal to the second Timepoint.
    MEMBER FUNCTION f_equal(tp1 D_Timepoint_H, tp2 D_Timepoint_H) return pls_integer is
    b pls_integer := D_Timepoint_H_Package.f_equal(m_y, m_m, m_d, m_h, tp1.m_y, tp1.m_m, tp1.m_d, tp1.m_h, tp2.m_y, tp2.m_m, tp2.m_d, tp2.m_h);
    begin
         return b;
    end;

    --Returns true if the first Timepoint contains the second Timepoint.
    MEMBER FUNCTION f_contains(tp1 D_Timepoint_H, tp2 D_Timepoint_H) return pls_integer is
    b pls_integer := D_Timepoint_H_Package.f_contains(m_y, m_m, m_d, m_h, tp1.m_y, tp1.m_m, tp1.m_d, tp1.m_h, tp2.m_y, tp2.m_m, tp2.m_d, tp2.m_h);
    begin
         return b;
    end;

    --Returns true if the Timepoint overlaps the Period.
    MEMBER FUNCTION f_overlaps(tp D_Timepoint_H, p_h REF D_Period_H) return pls_integer is
    p D_Period_H;
    b pls_integer := 0;
    begin
         SELECT DEREF(p_h) INTO p FROM DUAL;
         b := D_Timepoint_H_Package.f_overlaps(m_y, m_m, m_d, m_h, tp.m_y, tp.m_m, tp.m_d, tp.m_h, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h);
         return b;
    end;

    --Returns true if the Timepoint precedes the Period.
    MEMBER FUNCTION f_precedes(tp D_Timepoint_H, p_h REF D_Period_H) return pls_integer is
    p D_Period_H;
    b pls_integer := 0;
    begin
         SELECT DEREF(p_h) INTO p FROM DUAL;
         b := D_Timepoint_H_Package.f_precedes(m_y, m_m, m_d, m_h, tp.m_y, tp.m_m, tp.m_d, tp.m_h, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h);
         return b;
    end;

    --Returns true if the Timepoint meets the Period.
    MEMBER FUNCTION f_meets(tp D_Timepoint_H, p_h REF D_Period_H) return pls_integer is
    p D_Period_H;
    b pls_integer := 0;
    begin
         SELECT DEREF(p_h) INTO p FROM DUAL;
         b := D_Timepoint_H_Package.f_meets(m_y, m_m, m_d, m_h, tp.m_y, tp.m_m, tp.m_d, tp.m_h, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h);
         return b;
    end;

    --Returns true if the Timepoint is equal to the Period.
    MEMBER FUNCTION f_equal(tp D_Timepoint_H, p_h REF D_Period_H) return pls_integer is
    p D_Period_H;
    b pls_integer := 0;
    begin
         SELECT DEREF(p_h) INTO p FROM DUAL;
         b := D_Timepoint_H_Package.f_equal(m_y, m_m, m_d, m_h, tp.m_y, tp.m_m, tp.m_d, tp.m_h, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h);
         return b;
    end;

    --Returns true if the Timepoint contains the Period.
    MEMBER FUNCTION f_contains(tp D_Timepoint_H, p_h REF D_Period_H) return pls_integer is
    p D_Period_H;
    b pls_integer := 0;
    begin
         SELECT DEREF(p_h) INTO p FROM DUAL;
         b := D_Timepoint_H_Package.f_contains(m_y, m_m, m_d, m_h, tp.m_y, tp.m_m, tp.m_d, tp.m_h, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h);
         return b;
    end;

    --Returns true if the Timepoint overlaps the Temporal Element.
    MEMBER FUNCTION f_overlaps(tp D_Timepoint_H, te REF D_Temp_Element_H) return pls_integer is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_H;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         return D_Timepoint_H_Package.f_overlaps(m_y, m_m, m_d, m_h, tp.m_y, tp.m_m, tp.m_d, tp.m_h, te1.to_string());
    end;

    --Returns true if the Timepoint precedes the Temporal Element.
    MEMBER FUNCTION f_precedes(tp D_Timepoint_H, te REF D_Temp_Element_H) return pls_integer is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_H;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         return D_Timepoint_H_Package.f_precedes(m_y, m_m, m_d, m_h, tp.m_y, tp.m_m, tp.m_d, tp.m_h, te1.to_string());
    end;

    --Returns true if the Timepoint meets the Temporal Element.
    MEMBER FUNCTION f_meets(tp D_Timepoint_H, te REF D_Temp_Element_H) return pls_integer is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_H;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         return D_Timepoint_H_Package.f_meets(m_y, m_m, m_d, m_h, tp.m_y, tp.m_m, tp.m_d, tp.m_h, te1.to_string());
    end;

    --Returns true if the Timepoint is equal to the Temporal Element.
    MEMBER FUNCTION f_equal(tp D_Timepoint_H, te REF D_Temp_Element_H) return pls_integer is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_H;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         return D_Timepoint_H_Package.f_equal(m_y, m_m, m_d, m_h, tp.m_y, tp.m_m, tp.m_d, tp.m_h, te1.to_string());
    end;

    --Returns true if the Timepoint contains the Temporal Element.
    MEMBER FUNCTION f_contains(tp D_Timepoint_H, te REF D_Temp_Element_H) return pls_integer is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_H;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         return D_Timepoint_H_Package.f_contains(m_y, m_m, m_d, m_h, tp.m_y, tp.m_m, tp.m_d, tp.m_h, te1.to_string());
    end;

    --Returns true if the Period constructed using the first two Timepoints overlaps the Period constructed using the other two Timepoints.
    MEMBER FUNCTION f_overlaps(tp1 D_Timepoint_H, tp2 D_Timepoint_H, tp3 D_Timepoint_H, tp4 D_Timepoint_H) return pls_integer is
    b pls_integer := D_Timepoint_H_Package.f_overlaps(m_y, m_m, m_d, m_h, tp1.m_y, tp1.m_m, tp1.m_d, tp1.m_h, tp2.m_y, tp2.m_m, tp2.m_d, tp2.m_h, tp3.m_y, tp3.m_m, tp3.m_d, tp3.m_h, tp4.m_y, tp4.m_m, tp4.m_d, tp4.m_h);
    begin
         return b;
    end;

end;
/

-- Type body D_TIMEPOINT_MIN

CREATE OR REPLACE
type body D_Timepoint_Min is

    --Changes the status of the Timepoint object
    MEMBER PROCEDURE change_status(special_value pls_integer, special_hours pls_integer, year pls_integer) is
    begin
    -- m_y, m_m, m_d, m_h, m_min IN OUT argument
         D_Timepoint_Min_Package.change_status(m_y, m_m, m_d, m_h, m_min, special_value, special_hours, year);
    end;

    --Returns the year for the Timepoint object.
    MEMBER FUNCTION year return pls_integer is
    y pls_integer := D_Timepoint_Min_Package.year(m_y, m_m, m_d, m_h, m_min);
    begin
         return y;
    end;

    --Returns the month for the Timepoint object .
    MEMBER FUNCTION month return pls_integer is
    m pls_integer := D_Timepoint_Min_Package.month(m_y, m_m, m_d, m_h, m_min);
    begin
         return m;
    end;

    --Returns the day for the Timepoint object.
    MEMBER FUNCTION day return pls_integer is
    d pls_integer := D_Timepoint_Min_Package.day(m_y, m_m, m_d, m_h, m_min);
    begin
         return d;
    end;

    --Returns the hour for the Timepoint object.
    MEMBER FUNCTION hour return pls_integer is
    h pls_integer := D_Timepoint_Min_Package.hour(m_y, m_m, m_d, m_h, m_min);
    begin
         return h;
    end;

    --Returns the minute for the Timepoint object.
    MEMBER FUNCTION minute return pls_integer is
    m pls_integer := D_Timepoint_Min_Package.minute(m_y, m_m, m_d, m_h, m_min);
    begin
         return m;
    end;

    --Returns the Granularity of the Timepoint object.
    MEMBER FUNCTION get_granularity return pls_integer is
    g pls_integer := D_Timepoint_Min_Package.get_granularity(m_y, m_m, m_d, m_h, m_min);
    begin
         return g;
    end;

    --Returns a long number equal to the number of seconds since the begin of the calendar, representing the value of the Timepoint object.
    MEMBER FUNCTION get_Abs_Date return double precision is
    g double precision := D_Timepoint_Min_Package.get_Abs_Date(m_y, m_m, m_d, m_h, m_min);
    begin
         return g;
    end;

    --Sets the year for the Timepoint object.
    MEMBER PROCEDURE set_year(year pls_integer) is
    begin
    -- m_y, m_m, m_d, m_h, m_min IN OUT argument
         D_Timepoint_Min_Package.set_year(m_y, m_m, m_d, m_h, m_min, year);
    end;

    --Sets the month for the Timepoint object.
    MEMBER PROCEDURE set_month(month pls_integer) is
    begin
    -- m_y, m_m, m_d, m_h, m_min IN OUT argument
         D_Timepoint_Min_Package.set_month(m_y, m_m, m_d, m_h, m_min, month);
    end;

    --Sets the day for the Timepoint object.
    MEMBER PROCEDURE set_day(day pls_integer) is
    begin
    -- m_y, m_m, m_d, m_h, m_min IN OUT argument
         D_Timepoint_Min_Package.set_day(m_y, m_m, m_d, m_h, m_min, day);
    end;

    --Sets the hour for the Timepoint object.
    MEMBER PROCEDURE set_hour(hour pls_integer) is
    begin
    -- m_y, m_m, m_d, m_h, m_min IN OUT argument
         D_Timepoint_Min_Package.set_hour(m_y, m_m, m_d, m_h, m_min, hour);
    end;

    --Sets the minute for the Timepoint object.
    MEMBER PROCEDURE set_minute(minute pls_integer) is
    begin
    -- m_y, m_m, m_d, m_h, m_min IN OUT argument
         D_Timepoint_Min_Package.set_minute(m_y, m_m, m_d, m_h, m_min, minute);
    end;

    --Sets the value of the Timepoint object using a long number representing the number of seconds since the begin of the calendar.
    MEMBER PROCEDURE set_Abs_Date(d double precision) is
    begin
    -- m_y, m_m, m_d, m_h, m_min IN OUT argument
         D_Timepoint_Min_Package.set_Abs_Date(m_y, m_m, m_d, m_h, m_min, d);
    end;

    --Converts the Timepoint object to a Period object.
    MEMBER FUNCTION to_period return REF D_Period_Min is
    b_y pls_integer := 0;
    e_y pls_integer := 0;
    b_m pls_integer := 0;
    e_m pls_integer := 0;
    b_d pls_integer := 0;
    e_d pls_integer := 0;
    b_h pls_integer := 0;
    e_h pls_integer := 0;
    b_min pls_integer := 0;
    e_min pls_integer := 0;
    per REF D_Period_Min;
    begin
         D_Timepoint_Min_Package.to_period(m_y, m_m, m_d, m_h, m_min, b_y, b_m, b_d, b_h, b_min, e_y, e_m, e_d, e_h, e_min);
         INSERT INTO periods_min p
         VALUES (D_Period_Min(D_Timepoint_Min(b_y, b_m, b_d, b_h, b_min), D_Timepoint_Min(e_y, e_m, e_d, e_h, e_min)))
         RETURNING REF(p) INTO per;
         return per;
    end;

    --Converts the Timepoint object to a Temporal Element object.
    MEMBER FUNCTION to_temporal_element return REF D_Temp_Element_Min is
    str Varchar2(32766) := '';
    TE_min REF D_Temp_Element_Min;
    begin
         str := D_Timepoint_Min_Package.to_temporal_element(m_y, m_m, m_d, m_h, m_min);
         INSERT INTO temp_elements_min t
         VALUES (D_Temp_Element_Min(return_temporal_element_min(str)))
         RETURNING REF(t) INTO TE_min;
         return TE_min;
    end;

    --Creates a string for the Timepoint object in ISO 8601 format.
    MEMBER FUNCTION to_string return Varchar2 is
    s Varchar2(50) := D_Timepoint_Min_Package.to_string(m_y, m_m, m_d, m_h, m_min);
    begin
         return s;
    end;

    --Returns true if the year of the Timepoint object is a Leap year.
    MEMBER FUNCTION is_Leap_Year return pls_integer is
    b pls_integer := D_Timepoint_Min_Package.is_Leap_Year(m_y, m_m, m_d, m_h, m_min);
    begin
         return b;
    end;

    --Returns true if parameter year is a Leap year.
    MEMBER FUNCTION is_Leap_Year(year pls_integer) return pls_integer is
    b pls_integer := D_Timepoint_Min_Package.is_Leap_Year(m_y, m_m, m_d, m_h, m_min, year);
    begin
         return b;
    end;

    --Returns the number of days in the month of the Timepoint object.
    MEMBER FUNCTION days_in_month return pls_integer is
    d pls_integer := D_Timepoint_Min_Package.days_in_month(m_y, m_m, m_d, m_h, m_min);
    begin
         return d;
    end;

    --Assigns the value of a Timestamp object to the Timepoint object.
    MEMBER PROCEDURE f_ass_timestamp(ts D_Timestamp) is
    -- m_y, m_m, m_d, m_h, m_min IN OUT argument
    begin
         D_Timepoint_Min_Package.f_ass_timestamp(m_y, m_m, m_d, m_h, m_min, ts.m_Date.m_Year, ts.m_Date.m_Month, ts.m_Date.m_Day, ts.m_Time.m_Hour, ts.m_Time.m_Minute, ts.m_Time.m_Second, ts.m_Time.m_100thSec, ts.m_Time.m_tzHour, ts.m_Time.m_tzMinute);
    end;

    --Assigns the value of another Timepoint to the Timepoint object.
    MEMBER PROCEDURE f_ass_timepoint(tp D_Timepoint_Min) is
    -- m_y, m_m, m_d, m_h, m_min IN OUT argument
    begin
         D_Timepoint_Min_Package.f_ass_timepoint(m_y, m_m, m_d, m_h, m_min, tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min);
    end;

    --Adds an Interval to the Timepoint object.
    MEMBER PROCEDURE f_add_interval(i D_Interval) is
    -- m_y, m_m, m_d, m_h, m_min IN OUT argument
    begin
         D_Timepoint_Min_Package.f_add_interval(m_y, m_m, m_d, m_h, m_min, i.m_Value);
    end;

    --Subtracts an Interval from the Timepoint object.
    MEMBER PROCEDURE f_sub_interval(i D_Interval) is
    -- m_y, m_m, m_d, m_h, m_min IN OUT argument
    begin
         D_Timepoint_Min_Package.f_sub_interval(m_y, m_m, m_d, m_h, m_min, i.m_Value);
    end;

    --Increments the Timepoint object by one granule (Prefix operator).
    MEMBER PROCEDURE f_incr is
    -- m_y, m_m, m_d, m_h, m_min IN OUT argument
    begin
         D_Timepoint_Min_Package.f_incr(m_y, m_m, m_d, m_h, m_min);
    end;

    --Decrements the Timepoint object by one granule (Prefix operator).
    MEMBER PROCEDURE f_decr is
    -- m_y, m_m, m_d, m_h, m_min IN OUT argument
    begin
         D_Timepoint_Min_Package.f_decr(m_y, m_m, m_d, m_h, m_min);
    end;

    --Returns a Timepoint object representing the sum of an Timepoint object plus a Interval object.
    MEMBER FUNCTION f_add(tp D_Timepoint_Min, i D_Interval) return D_Timepoint_Min is
    y pls_integer := 0;
    m pls_integer := 0;
    d pls_integer := 0;
    h pls_integer := 0;
    minute pls_integer := 0;
    begin
         D_Timepoint_Min_Package.f_add(m_y, m_m, m_d, m_h, m_min, tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min, i.m_Value, y, m, d, h, minute);
         return D_Timepoint_Min(y, m, d, h, minute);
    end;

    --Returns a Timepoint object representing the subtraction of an Interval object from a Timepoint object.
    MEMBER FUNCTION f_sub(tp D_Timepoint_Min, i D_Interval) return D_Timepoint_Min is
    y pls_integer := 0;
    m pls_integer := 0;
    d pls_integer := 0;
    h pls_integer := 0;
    minute pls_integer := 0;
    begin
         D_Timepoint_Min_Package.f_sub(m_y, m_m, m_d, m_h, m_min, tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min, i.m_Value, y, m, d, y, minute);
         return D_Timepoint_Min(y, m, d, h, minute);
    end;

    --Returns a Period object representing the intersection between two Timepoints.
    MEMBER FUNCTION intersects(tp1 D_Timepoint_Min, tp2 D_Timepoint_Min) return REF D_Period_Min is
    b_y pls_integer := 0;
    e_y pls_integer := 0;
    b_m pls_integer := 0;
    e_m pls_integer := 0;
    b_d pls_integer := 0;
    e_d pls_integer := 0;
    b_h pls_integer := 0;
    e_h pls_integer := 0;
    b_min pls_integer := 0;
    e_min pls_integer := 0;
    per REF D_Period_Min;
    begin
         D_Timepoint_Min_Package.intersects(m_y, m_m, m_d, m_h, m_min, tp1.m_y, tp1.m_m, tp1.m_d, tp1.m_h, tp1.m_min, tp2.m_y, tp2.m_m, tp2.m_d, tp2.m_h, tp2.m_min, b_y, b_m, b_d, b_h, b_min, e_y, e_m, e_d, e_h, e_min);
         INSERT INTO periods_min p
         VALUES (D_Period_Min(D_Timepoint_Min(b_y, b_m, b_d, b_h, b_min), D_Timepoint_Min(e_y, e_m, e_d, e_h, e_min)))
         RETURNING REF(p) INTO per;
         return per;
    end;

    --Returns a Period object representing the intersection between a Timepoint and a Period.
    MEMBER FUNCTION intersects(tp D_Timepoint_Min, p_min REF D_Period_Min) return REF D_Period_Min is
    b_y pls_integer := 0;
    e_y pls_integer := 0;
    b_m pls_integer := 0;
    e_m pls_integer := 0;
    b_d pls_integer := 0;
    e_d pls_integer := 0;
    b_h pls_integer := 0;
    e_h pls_integer := 0;
    b_min pls_integer := 0;
    e_min pls_integer := 0;
    p D_Period_Min;
    per REF D_Period_Min;
    begin
         SELECT DEREF(p_min) INTO p FROM DUAL;
         D_Timepoint_Min_Package.intersects(m_y, m_m, m_d, m_h, m_min, tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.b.m_min, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, p.e.m_min, b_y, b_m, b_d, b_h, b_min, e_y, e_m, e_d, e_h, e_min);
         INSERT INTO periods_min ps
         VALUES (D_Period_Min(D_Timepoint_Min(b_y, b_m, b_d, b_h, b_min), D_Timepoint_Min(e_y, e_m, e_d, e_h, e_min)))
         RETURNING REF(ps) INTO per;
         return per;
    end;

    --Returns a Temporal Element object representing the intersection between a Timepoint and a Temporal Element.
    MEMBER FUNCTION intersects(tp D_Timepoint_Min, te REF D_Temp_Element_Min) return REF D_Temp_Element_Min is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_Min;
    TE_min REF D_Temp_Element_Min;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         str := D_Timepoint_Min_Package.intersects(m_y, m_m, m_d, m_h, m_min, tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min, te1.to_string());
         INSERT INTO temp_elements_min t
         VALUES (D_Temp_Element_Min(return_temporal_element_min(str)))
         RETURNING REF(t) INTO TE_min;
         return TE_min;
    end;

    --Returns true if the Timepoints have the same value.
    MEMBER FUNCTION f_eq(tp1 D_Timepoint_Min, tp2 D_Timepoint_Min) return pls_integer is
    b pls_integer := D_Timepoint_Min_Package.f_eq(m_y, m_m, m_d, m_h, m_min, tp1.m_y, tp1.m_m, tp1.m_d, tp1.m_h, tp1.m_min, tp2.m_y, tp2.m_m, tp2.m_d, tp2.m_h, tp2.m_min);
    begin
         return b;
    end;

    --Returns true if the Timepoints have different value.
    MEMBER FUNCTION f_n_eq(tp1 D_Timepoint_Min, tp2 D_Timepoint_Min) return pls_integer is
    b pls_integer := D_Timepoint_Min_Package.f_n_eq(m_y, m_m, m_d, m_h, m_min, tp1.m_y, tp1.m_m, tp1.m_d, tp1.m_h, tp1.m_min, tp2.m_y, tp2.m_m, tp2.m_d, tp2.m_h, tp2.m_min);
    begin
         return b;
    end;

    --Returns true if the first Timepoint is less than the second.
    MEMBER FUNCTION f_l(tp1 D_Timepoint_Min, tp2 D_Timepoint_Min) return pls_integer is
    b pls_integer := D_Timepoint_Min_Package.f_l(m_y, m_m, m_d, m_h, m_min, tp1.m_y, tp1.m_m, tp1.m_d, tp1.m_h, tp1.m_min, tp2.m_y, tp2.m_m, tp2.m_d, tp2.m_h, tp2.m_min);
    begin
         return b;
    end;

    --Returns true if the first Timepoint is less or equal to the second.
    MEMBER FUNCTION f_l_e(tp1 D_Timepoint_Min, tp2 D_Timepoint_Min) return pls_integer is
    b pls_integer := D_Timepoint_Min_Package.f_l_e(m_y, m_m, m_d, m_h, m_min, tp1.m_y, tp1.m_m, tp1.m_d, tp1.m_h, tp1.m_min, tp2.m_y, tp2.m_m, tp2.m_d, tp2.m_h, tp2.m_min);
    begin
         return b;
    end;

    --Returns true if the first Timepoint is greater than the second.
    MEMBER FUNCTION f_b(tp1 D_Timepoint_Min, tp2 D_Timepoint_Min) return pls_integer is
    b pls_integer := D_Timepoint_Min_Package.f_b(m_y, m_m, m_d, m_h, m_min, tp1.m_y, tp1.m_m, tp1.m_d, tp1.m_h, tp1.m_min, tp2.m_y, tp2.m_m, tp2.m_d, tp2.m_h, tp2.m_min);
    begin
         return b;
    end;

    --Returns true if the first Timepoint is greater or equal to the second.
    MEMBER FUNCTION f_b_e(tp1 D_Timepoint_Min, tp2 D_Timepoint_Min) return pls_integer is
    b pls_integer := D_Timepoint_Min_Package.f_b_e(m_y, m_m, m_d, m_h, m_min, tp1.m_y, tp1.m_m, tp1.m_d, tp1.m_h, tp1.m_min, tp2.m_y, tp2.m_m, tp2.m_d, tp2.m_h, tp2.m_min);
    begin
         return b;
    end;

    --Returns the Interval between two Timepoints.
    MEMBER FUNCTION f_diff(tp1 D_Timepoint_Min, tp2 D_Timepoint_Min) return D_Interval is
    i_Value double precision := 0;
    begin
         D_Timepoint_Min_Package.f_diff(m_y, m_m, m_d, m_h, m_min, tp1.m_y, tp1.m_m, tp1.m_d, tp1.m_h, tp1.m_min, tp2.m_y, tp2.m_m, tp2.m_d, tp2.m_h, tp2.m_min, i_Value);
         return D_Interval(i_Value);
    end;

    --Returns true if the Timepoint is equal to the Timestamp.
    MEMBER FUNCTION f_eq(tp D_Timepoint_Min, ts D_Timestamp) return pls_integer is
    b pls_integer := D_Timepoint_Min_Package.f_eq(m_y, m_m, m_d, m_h, m_min, tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min, ts.m_Date.m_Year, ts.m_Date.m_Month, ts.m_Date.m_Day, ts.m_Time.m_Hour, ts.m_Time.m_Minute, ts.m_Time.m_Second, ts.m_Time.m_100thSec, ts.m_Time.m_tzHour, ts.m_Time.m_tzMinute);
    begin
         return b;
    end;

    --Returns true if the Timepoint is different from the Timestamp.
    MEMBER FUNCTION f_n_eq(tp D_Timepoint_Min, ts D_Timestamp) return pls_integer is
    b pls_integer := D_Timepoint_Min_Package.f_n_eq(m_y, m_m, m_d, m_h, m_min, tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min, ts.m_Date.m_Year, ts.m_Date.m_Month, ts.m_Date.m_Day, ts.m_Time.m_Hour, ts.m_Time.m_Minute, ts.m_Time.m_Second, ts.m_Time.m_100thSec, ts.m_Time.m_tzHour, ts.m_Time.m_tzMinute);
    begin
         return b;
    end;

    --Returns true if the Timepoint is less than the Timestamp.
    MEMBER FUNCTION f_l(tp D_Timepoint_Min, ts D_Timestamp) return pls_integer is
    b pls_integer := D_Timepoint_Min_Package.f_l(m_y, m_m, m_d, m_h, m_min, tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min, ts.m_Date.m_Year, ts.m_Date.m_Month, ts.m_Date.m_Day, ts.m_Time.m_Hour, ts.m_Time.m_Minute, ts.m_Time.m_Second, ts.m_Time.m_100thSec, ts.m_Time.m_tzHour, ts.m_Time.m_tzMinute);
    begin
         return b;
    end;

    --Returns true if the Timepoint is less or equal to the Timestamp.
    MEMBER FUNCTION f_l_e(tp D_Timepoint_Min, ts D_Timestamp) return pls_integer is
    b pls_integer := D_Timepoint_Min_Package.f_l_e(m_y, m_m, m_d, m_h, m_min, tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min, ts.m_Date.m_Year, ts.m_Date.m_Month, ts.m_Date.m_Day, ts.m_Time.m_Hour, ts.m_Time.m_Minute, ts.m_Time.m_Second, ts.m_Time.m_100thSec, ts.m_Time.m_tzHour, ts.m_Time.m_tzMinute);
    begin
         return b;
    end;

    --Returns true if the Timepoint is greater than the Timestamp.
    MEMBER FUNCTION f_b(tp D_Timepoint_Min, ts D_Timestamp) return pls_integer is
    b pls_integer := D_Timepoint_Min_Package.f_b(m_y, m_m, m_d, m_h, m_min, tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min, ts.m_Date.m_Year, ts.m_Date.m_Month, ts.m_Date.m_Day, ts.m_Time.m_Hour, ts.m_Time.m_Minute, ts.m_Time.m_Second, ts.m_Time.m_100thSec, ts.m_Time.m_tzHour, ts.m_Time.m_tzMinute);
    begin
         return b;
    end;

    --Returns true if the Timepoint is greater or equal to the Timestamp.
    MEMBER FUNCTION f_b_e(tp D_Timepoint_Min, ts D_Timestamp) return pls_integer is
    b pls_integer := D_Timepoint_Min_Package.f_b_e(m_y, m_m, m_d, m_h, m_min, tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min, ts.m_Date.m_Year, ts.m_Date.m_Month, ts.m_Date.m_Day, ts.m_Time.m_Hour, ts.m_Time.m_Minute, ts.m_Time.m_Second, ts.m_Time.m_100thSec, ts.m_Time.m_tzHour, ts.m_Time.m_tzMinute);
    begin
         return b;
    end;

    --Returns true if two Timepoints overlap.
    MEMBER FUNCTION f_overlaps(tp1 D_Timepoint_Min, tp2 D_Timepoint_Min) return pls_integer is
    b pls_integer := D_Timepoint_Min_Package.f_overlaps(m_y, m_m, m_d, m_h, m_min, tp1.m_y, tp1.m_m, tp1.m_d, tp1.m_h, tp1.m_min, tp2.m_y, tp2.m_m, tp2.m_d, tp2.m_h, tp2.m_min);
    begin
         return b;
    end;

    --Returns true if the first Timepoint precedes the second Timepoint.
    MEMBER FUNCTION f_precedes(tp1 D_Timepoint_Min, tp2 D_Timepoint_Min) return pls_integer is
    b pls_integer := D_Timepoint_Min_Package.f_precedes(m_y, m_m, m_d, m_h, m_min, tp1.m_y, tp1.m_m, tp1.m_d, tp1.m_h, tp1.m_min, tp2.m_y, tp2.m_m, tp2.m_d, tp2.m_h, tp2.m_min);
    begin
         return b;
    end;

    --Returns true if the first Timepoint meets the second Timepoint.
    MEMBER FUNCTION f_meets(tp1 D_Timepoint_Min, tp2 D_Timepoint_Min) return pls_integer is
    b pls_integer := D_Timepoint_Min_Package.f_meets(m_y, m_m, m_d, m_h, m_min, tp1.m_y, tp1.m_m, tp1.m_d, tp1.m_h, tp1.m_min, tp2.m_y, tp2.m_m, tp2.m_d, tp2.m_h, tp2.m_min);
    begin
         return b;
    end;

    --Returns true if the first Timepoint is equal to the second Timepoint.
    MEMBER FUNCTION f_equal(tp1 D_Timepoint_Min, tp2 D_Timepoint_Min) return pls_integer is
    b pls_integer := D_Timepoint_Min_Package.f_equal(m_y, m_m, m_d, m_h, m_min, tp1.m_y, tp1.m_m, tp1.m_d, tp1.m_h, tp1.m_min, tp2.m_y, tp2.m_m, tp2.m_d, tp2.m_h, tp2.m_min);
    begin
         return b;
    end;

    --Returns true if the first Timepoint contains the second Timepoint.
    MEMBER FUNCTION f_contains(tp1 D_Timepoint_Min, tp2 D_Timepoint_Min) return pls_integer is
    b pls_integer := D_Timepoint_Min_Package.f_contains(m_y, m_m, m_d, m_h, m_min, tp1.m_y, tp1.m_m, tp1.m_d, tp1.m_h, tp1.m_min, tp2.m_y, tp2.m_m, tp2.m_d, tp2.m_h, tp2.m_min);
    begin
         return b;
    end;

    --Returns true if the Timepoint overlaps the Period.
    MEMBER FUNCTION f_overlaps(tp D_Timepoint_Min, p_min REF D_Period_Min) return pls_integer is
    p D_Period_Min;
    b pls_integer := 0;
    begin
         SELECT DEREF(p_min) INTO p FROM DUAL;
         b := D_Timepoint_Min_Package.f_overlaps(m_y, m_m, m_d, m_h, m_min, tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.b.m_min, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, p.e.m_min);
         return b;
    end;

    --Returns true if the Timepoint precedes the Period.
    MEMBER FUNCTION f_precedes(tp D_Timepoint_Min, p_min REF D_Period_Min) return pls_integer is
    p D_Period_Min;
    b pls_integer := 0;
    begin
         SELECT DEREF(p_min) INTO p FROM DUAL;
         b := D_Timepoint_Min_Package.f_precedes(m_y, m_m, m_d, m_h, m_min, tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.b.m_min, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, p.e.m_min);
         return b;
    end;

    --Returns true if the Timepoint meets the Period.
    MEMBER FUNCTION f_meets(tp D_Timepoint_Min, p_min REF D_Period_Min) return pls_integer is
    p D_Period_Min;
    b pls_integer := 0;
    begin
         SELECT DEREF(p_min) INTO p FROM DUAL;
         b := D_Timepoint_Min_Package.f_meets(m_y, m_m, m_d, m_h, m_min, tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.b.m_min, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, p.e.m_min);
         return b;
    end;

    --Returns true if the Timepoint is equal to the Period.
    MEMBER FUNCTION f_equal(tp D_Timepoint_Min, p_min REF D_Period_Min) return pls_integer is
    p D_Period_Min;
    b pls_integer := 0;
    begin
         SELECT DEREF(p_min) INTO p FROM DUAL;
         b := D_Timepoint_Min_Package.f_equal(m_y, m_m, m_d, m_h, m_min, tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.b.m_min, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, p.e.m_min);
         return b;
    end;

    --Returns true if the Timepoint contains the Period.
    MEMBER FUNCTION f_contains(tp D_Timepoint_Min, p_min REF D_Period_Min) return pls_integer is
    p D_Period_Min;
    b pls_integer := 0;
    begin
         SELECT DEREF(p_min) INTO p FROM DUAL;
         b := D_Timepoint_Min_Package.f_contains(m_y, m_m, m_d, m_h, m_min, tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.b.m_min, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, p.e.m_min);
         return b;
    end;

    --Returns true if the Timepoint overlaps the Temporal Element.
    MEMBER FUNCTION f_overlaps(tp D_Timepoint_Min, te REF D_Temp_Element_Min) return pls_integer is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_Min;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         return D_Timepoint_Min_Package.f_overlaps(m_y, m_m, m_d, m_h, m_min, tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min, te1.to_string());
    end;

    --Returns true if the Timepoint precedes the Temporal Element.
    MEMBER FUNCTION f_precedes(tp D_Timepoint_Min, te REF D_Temp_Element_Min) return pls_integer is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_Min;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         return D_Timepoint_Min_Package.f_precedes(m_y, m_m, m_d, m_h, m_min, tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min, te1.to_string());
    end;

    --Returns true if the Timepoint meets the Temporal Element.
    MEMBER FUNCTION f_meets(tp D_Timepoint_Min, te REF D_Temp_Element_Min) return pls_integer is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_Min;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         return D_Timepoint_Min_Package.f_meets(m_y, m_m, m_d, m_h, m_min, tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min, te1.to_string());
    end;

    --Returns true if the Timepoint is equal to the Temporal Element.
    MEMBER FUNCTION f_equal(tp D_Timepoint_Min, te REF D_Temp_Element_Min) return pls_integer is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_Min;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         return D_Timepoint_Min_Package.f_equal(m_y, m_m, m_d, m_h, m_min, tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min, te1.to_string());
    end;

    --Returns true if the Timepoint contains the Temporal Element.
    MEMBER FUNCTION f_contains(tp D_Timepoint_Min, te REF D_Temp_Element_Min) return pls_integer is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_Min;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         return D_Timepoint_Min_Package.f_contains(m_y, m_m, m_d, m_h, m_min, tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min, te1.to_string());
    end;

    --Returns true if the Period constructed using the first two Timepoints overlaps the Period constructed using the other two Timepoints.
    MEMBER FUNCTION f_overlaps(tp1 D_Timepoint_Min, tp2 D_Timepoint_Min, tp3 D_Timepoint_Min, tp4 D_Timepoint_Min) return pls_integer is
    b pls_integer := D_Timepoint_Min_Package.f_overlaps(m_y, m_m, m_d, m_h, m_min, tp1.m_y, tp1.m_m, tp1.m_d, tp1.m_h, tp1.m_min, tp2.m_y, tp2.m_m, tp2.m_d, tp2.m_h, tp2.m_min, tp3.m_y, tp3.m_m, tp3.m_d, tp3.m_h, tp3.m_min, tp4.m_y, tp4.m_m, tp4.m_d, tp4.m_h, tp4.m_min);
    begin
         return b;
    end;

end;
/

-- Type body D_TIMEPOINT_SEC

CREATE OR REPLACE
type body D_Timepoint_Sec is

    --Changes the status of the Timepoint object
    MEMBER PROCEDURE change_status(special_value pls_integer, special_hours pls_integer, year pls_integer) is
    begin
    -- m_y, m_m, m_d, m_h, m_min, m_sec IN OUT argument
         D_Timepoint_Sec_Package.change_status(m_y, m_m, m_d, m_h, m_min, m_sec, special_value, special_hours, year);
    end;

    --Returns the year for the Timepoint object.
    MEMBER FUNCTION year return pls_integer is
    y pls_integer := D_Timepoint_Sec_Package.year(m_y, m_m, m_d, m_h, m_min, m_sec);
    begin
         return y;
    end;

    --Returns the month for the Timepoint object .
    MEMBER FUNCTION month return pls_integer is
    m pls_integer := D_Timepoint_Sec_Package.month(m_y, m_m, m_d, m_h, m_min, m_sec);
    begin
         return m;
    end;

    --Returns the day for the Timepoint object.
    MEMBER FUNCTION day return pls_integer is
    d pls_integer := D_Timepoint_Sec_Package.day(m_y, m_m, m_d, m_h, m_min, m_sec);
    begin
         return d;
    end;

    --Returns the hour for the Timepoint object.
    MEMBER FUNCTION hour return pls_integer is
    h pls_integer := D_Timepoint_Sec_Package.hour(m_y, m_m, m_d, m_h, m_min, m_sec);
    begin
         return h;
    end;

    --Returns the minute for the Timepoint object.
    MEMBER FUNCTION minute return pls_integer is
    m pls_integer := D_Timepoint_Sec_Package.minute(m_y, m_m, m_d, m_h, m_min, m_sec);
    begin
         return m;
    end;

    --Returns the second for the Timepoint object.
    MEMBER FUNCTION second return double precision is
    sec double precision := D_Timepoint_Sec_Package.second(m_y, m_m, m_d, m_h, m_min, m_sec);
    begin
         return sec;
    end;

    --Returns the Granularity of the Timepoint object.
    MEMBER FUNCTION get_granularity return pls_integer is
    g pls_integer := D_Timepoint_Sec_Package.get_granularity(m_y, m_m, m_d, m_h, m_min, m_sec);
    begin
         return g;
    end;

    --Returns a long number equal to the number of seconds since the begin of the calendar, representing the value of the Timepoint object.
    MEMBER FUNCTION get_Abs_Date return double precision is
    g double precision := D_Timepoint_Sec_Package.get_Abs_Date(m_y, m_m, m_d, m_h, m_min, m_sec);
    begin
         return g;
    end;

    --Sets the year for the Timepoint object.
    MEMBER PROCEDURE set_year(year pls_integer) is
    begin
    -- m_y, m_m, m_d, m_h, m_min, m_sec IN OUT argument
         D_Timepoint_Sec_Package.set_year(m_y, m_m, m_d, m_h, m_min, m_sec, year);
    end;

    --Sets the month for the Timepoint object.
    MEMBER PROCEDURE set_month(month pls_integer) is
    begin
    -- m_y, m_m, m_d, m_h, m_min, m_sec IN OUT argument
         D_Timepoint_Sec_Package.set_month(m_y, m_m, m_d, m_h, m_min, m_sec, month);
    end;

    --Sets the day for the Timepoint object.
    MEMBER PROCEDURE set_day(day pls_integer) is
    begin
    -- m_y, m_m, m_d, m_h, m_min, m_sec IN OUT argument
         D_Timepoint_Sec_Package.set_day(m_y, m_m, m_d, m_h, m_min, m_sec, day);
    end;

    --Sets the hour for the Timepoint object.
    MEMBER PROCEDURE set_hour(hour pls_integer) is
    begin
    -- m_y, m_m, m_d, m_h, m_min, m_sec IN OUT argument
         D_Timepoint_Sec_Package.set_hour(m_y, m_m, m_d, m_h, m_min, m_sec, hour);
    end;

    --Sets the minute for the Timepoint object.
    MEMBER PROCEDURE set_minute(minute pls_integer) is
    begin
    -- m_y, m_m, m_d, m_h, m_min, m_sec IN OUT argument
         D_Timepoint_Sec_Package.set_minute(m_y, m_m, m_d, m_h, m_min, m_sec, minute);
    end;

    --Sets the second for the Timepoint object.
    MEMBER PROCEDURE set_second(second double precision) is
    begin
    -- m_y, m_m, m_d, m_h, m_min, m_sec IN OUT argument
         D_Timepoint_Sec_Package.set_second(m_y, m_m, m_d, m_h, m_min, m_sec, second);
    end;

    --Sets the value of the Timepoint object using a long number representing the number of seconds since the begin of the calendar.
    MEMBER PROCEDURE set_Abs_Date(d double precision) is
    begin
    -- m_y, m_m, m_d, m_h, m_min, m_sec IN OUT argument
         D_Timepoint_Sec_Package.set_Abs_Date(m_y, m_m, m_d, m_h, m_min, m_sec, d);
    end;

    --Converts the Timepoint object to a Period object.
    MEMBER FUNCTION to_period return REF D_Period_Sec is
    b_y pls_integer := 0;
    e_y pls_integer := 0;
    b_m pls_integer := 0;
    e_m pls_integer := 0;
    b_d pls_integer := 0;
    e_d pls_integer := 0;
    b_h pls_integer := 0;
    e_h pls_integer := 0;
    b_min pls_integer := 0;
    e_min pls_integer := 0;
    b_sec double precision := 0;
    e_sec double precision := 0;
    per REF D_Period_Sec;
    begin
         D_Timepoint_Sec_Package.to_period(m_y, m_m, m_d, m_h, m_min, m_sec, b_y, b_m, b_d, b_h, b_min, b_sec, e_y, e_m, e_d, e_h, e_min, e_sec);
         INSERT INTO periods_sec p
         VALUES (D_Period_Sec(D_Timepoint_Sec(b_y, b_m, b_d, b_h, b_min, b_sec), D_Timepoint_Sec(e_y, e_m, e_d, e_h, e_min, e_sec)))
         RETURNING REF(p) INTO per;
         return per;
    end;

    --Converts the Timepoint object to a Temporal Element object.
    MEMBER FUNCTION to_temporal_element return REF D_Temp_Element_Sec is
    str Varchar2(32766) := '';
    TE_sec REF D_Temp_Element_Sec;
    begin
         str := D_Timepoint_Sec_Package.to_temporal_element(m_y, m_m, m_d, m_h, m_min, m_sec);
         INSERT INTO temp_elements_sec t
         VALUES (D_Temp_Element_Sec(return_temporal_element_sec(str)))
         RETURNING REF(t) INTO TE_sec;
         return TE_sec;
    end;

    --Creates a string for the Timepoint object in ISO 8601 format.
    MEMBER FUNCTION to_string return Varchar2 is
    s Varchar2(50) := D_Timepoint_Sec_Package.to_string(m_y, m_m, m_d, m_h, m_min, m_sec);
    begin
         return s;
    end;

    --Returns true if the year of the Timepoint object is a Leap year.
    MEMBER FUNCTION is_Leap_Year return pls_integer is
    b pls_integer := D_Timepoint_Sec_Package.is_Leap_Year(m_y, m_m, m_d, m_h, m_min, m_sec);
    begin
         return b;
    end;

    --Returns true if parameter year is a Leap year.
    MEMBER FUNCTION is_Leap_Year(year pls_integer) return pls_integer is
    b pls_integer := D_Timepoint_Sec_Package.is_Leap_Year(m_y, m_m, m_d, m_h, m_min, m_sec, year);
    begin
         return b;
    end;

    --Returns the number of days in the month of the Timepoint object.
    MEMBER FUNCTION days_in_month return pls_integer is
    d pls_integer := D_Timepoint_Sec_Package.days_in_month(m_y, m_m, m_d, m_h, m_min, m_sec);
    begin
         return d;
    end;

    --Assigns the value of a Timestamp object to the Timepoint object.
    MEMBER PROCEDURE f_ass_timestamp(ts D_Timestamp) is
    -- m_y, m_m, m_d, m_h, m_min, m_sec IN OUT argument
    begin
         D_Timepoint_Sec_Package.f_ass_timestamp(m_y, m_m, m_d, m_h, m_min, m_sec, ts.m_Date.m_Year, ts.m_Date.m_Month, ts.m_Date.m_Day, ts.m_Time.m_Hour, ts.m_Time.m_Minute, ts.m_Time.m_Second, ts.m_Time.m_100thSec, ts.m_Time.m_tzHour, ts.m_Time.m_tzMinute);
    end;

    --Assigns the value of another Timepoint to the Timepoint object.
    MEMBER PROCEDURE f_ass_timepoint(tp D_Timepoint_Sec) is
    -- m_y, m_m, m_d, m_h, m_min, m_sec IN OUT argument
    begin
         D_Timepoint_Sec_Package.f_ass_timepoint(m_y, m_m, m_d, m_h, m_min, m_sec, tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min, tp.m_sec);
    end;

    --Adds an Interval to the Timepoint object.
    MEMBER PROCEDURE f_add_interval(i D_Interval) is
    -- m_y, m_m, m_d, m_h, m_min, m_sec IN OUT argument
    begin
         D_Timepoint_Sec_Package.f_add_interval(m_y, m_m, m_d, m_h, m_min, m_sec, i.m_Value);
    end;

    --Subtracts an Interval from the Timepoint object.
    MEMBER PROCEDURE f_sub_interval(i D_Interval) is
    -- m_y, m_m, m_d, m_h, m_min, m_sec IN OUT argument
    begin
         D_Timepoint_Sec_Package.f_sub_interval(m_y, m_m, m_d, m_h, m_min, m_sec, i.m_Value);
    end;

    --Increments the Timepoint object by one granule.
    MEMBER PROCEDURE f_incr is
    -- m_y, m_m, m_d, m_h, m_min, m_sec IN OUT argument
    begin
         D_Timepoint_Sec_Package.f_incr(m_y, m_m, m_d, m_h, m_min, m_sec);
    end;

    --Decrements the Timepoint object by one granule.
    MEMBER PROCEDURE f_decr is
    -- m_y, m_m, m_d, m_h, m_min, m_sec IN OUT argument
    begin
         D_Timepoint_Sec_Package.f_decr(m_y, m_m, m_d, m_h, m_min, m_sec);
    end;

    --Returns a Timepoint object representing the sum of an Timepoint object plus a Interval object.
    MEMBER FUNCTION f_add(tp D_Timepoint_Sec, i D_Interval) return D_Timepoint_Sec is
    y pls_integer := 0;
    m pls_integer := 0;
    d pls_integer := 0;
    h pls_integer := 0;
    minute pls_integer := 0;
    second pls_integer := 0;
    begin
         D_Timepoint_Sec_Package.f_add(m_y, m_m, m_d, m_h, m_min, m_sec, tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min, tp.m_sec, i.m_Value, y, m, d, h, minute, second);
         return D_Timepoint_Sec(y, m, d, h, minute, second);
    end;

    --Returns a Timepoint object representing the subtraction of an Interval object from a Timepoint object.
    MEMBER FUNCTION f_sub(tp D_Timepoint_Sec, i D_Interval) return D_Timepoint_Sec is
    y pls_integer := 0;
    m pls_integer := 0;
    d pls_integer := 0;
    h pls_integer := 0;
    minute pls_integer := 0;
    second pls_integer := 0;
    begin
         D_Timepoint_Sec_Package.f_sub(m_y, m_m, m_d, m_h, m_min, m_sec, tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min, tp.m_sec, i.m_Value, y, m, d, y, minute, second);
         return D_Timepoint_Sec(y, m, d, h, minute, second);
    end;

    --Returns a Period object representing the intersection between two Timepoints.
    MEMBER FUNCTION intersects(tp1 D_Timepoint_Sec, tp2 D_Timepoint_Sec) return REF D_Period_Sec is
    b_y pls_integer := 0;
    e_y pls_integer := 0;
    b_m pls_integer := 0;
    e_m pls_integer := 0;
    b_d pls_integer := 0;
    e_d pls_integer := 0;
    b_h pls_integer := 0;
    e_h pls_integer := 0;
    b_min pls_integer := 0;
    e_min pls_integer := 0;
    b_sec double precision := 0;
    e_sec double precision := 0;
    per REF D_Period_Sec;
    begin
         D_Timepoint_Sec_Package.intersects(m_y, m_m, m_d, m_h, m_min, m_sec, tp1.m_y, tp1.m_m, tp1.m_d, tp1.m_h, tp1.m_min, tp1.m_sec, tp2.m_y, tp2.m_m, tp2.m_d, tp2.m_h, tp2.m_min, tp2.m_sec, b_y, b_m, b_d, b_h, b_min, b_sec, e_y, e_m, e_d, e_h, e_min, e_sec);
         INSERT INTO periods_sec p
         VALUES (D_Period_Sec(D_Timepoint_Sec(b_y, b_m, b_d, b_h, b_min, b_sec), D_Timepoint_Sec(e_y, e_m, e_d, e_h, e_min, e_sec)))
         RETURNING REF(p) INTO per;
         return per;
    end;

    --Returns a Period object representing the intersection between a Timepoint and a Period.
    MEMBER FUNCTION intersects(tp D_Timepoint_Sec, p_sec REF D_Period_Sec) return REF D_Period_Sec is
    b_y pls_integer := 0;
    e_y pls_integer := 0;
    b_m pls_integer := 0;
    e_m pls_integer := 0;
    b_d pls_integer := 0;
    e_d pls_integer := 0;
    b_h pls_integer := 0;
    e_h pls_integer := 0;
    b_min pls_integer := 0;
    e_min pls_integer := 0;
    b_sec double precision := 0;
    e_sec double precision := 0;
    p D_Period_Sec;
    per REF D_Period_Sec;
    begin
         SELECT DEREF(p_sec) INTO p FROM DUAL;
         D_Timepoint_Sec_Package.intersects(m_y, m_m, m_d, m_h, m_min, m_sec, tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min, tp.m_sec, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.b.m_min, p.b.m_sec, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, p.e.m_min, p.e.m_sec, b_y, b_m, b_d, b_h, b_min, b_sec, e_y, e_m, e_d, e_h, e_min, e_sec);
         INSERT INTO periods_sec ps
         VALUES (D_Period_Sec(D_Timepoint_Sec(b_y, b_m, b_d, b_h, b_min, b_sec), D_Timepoint_Sec(e_y, e_m, e_d, e_h, e_min, e_sec)))
         RETURNING REF(ps) INTO per;
         return per;
    end;

    --Returns a Temporal Element object representing the intersection between a Timepoint and a Temporal Element.
    MEMBER FUNCTION intersects(tp D_Timepoint_Sec, te REF D_Temp_Element_Sec) return REF D_Temp_Element_Sec is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_Sec;
    TE_sec REF D_Temp_Element_Sec;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         str := D_Timepoint_Sec_Package.intersects(m_y, m_m, m_d, m_h, m_min, m_sec, tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min, tp.m_sec, te1.to_string());
         INSERT INTO temp_elements_sec t
         VALUES (D_Temp_Element_Sec(return_temporal_element_sec(str)))
         RETURNING REF(t) INTO TE_sec;
         return TE_sec;
    end;

    --Returns true if the Timepoints have the same value.
    MEMBER FUNCTION f_eq(tp1 D_Timepoint_Sec, tp2 D_Timepoint_Sec) return pls_integer is
    b pls_integer := D_Timepoint_Sec_Package.f_eq(m_y, m_m, m_d, m_h, m_min, m_sec, tp1.m_y, tp1.m_m, tp1.m_d, tp1.m_h, tp1.m_min, tp1.m_sec, tp2.m_y, tp2.m_m, tp2.m_d, tp2.m_h, tp2.m_min, tp2.m_sec);
    begin
         return b;
    end;

    --Returns true if the Timepoints have different value.
    MEMBER FUNCTION f_n_eq(tp1 D_Timepoint_Sec, tp2 D_Timepoint_Sec) return pls_integer is
    b pls_integer := D_Timepoint_Sec_Package.f_n_eq(m_y, m_m, m_d, m_h, m_min, m_sec, tp1.m_y, tp1.m_m, tp1.m_d, tp1.m_h, tp1.m_min, tp1.m_sec, tp2.m_y, tp2.m_m, tp2.m_d, tp2.m_h, tp2.m_min, tp2.m_sec);
    begin
         return b;
    end;

    --Returns true if the first Timepoint is less than the second.
    MEMBER FUNCTION f_l(tp1 D_Timepoint_Sec, tp2 D_Timepoint_Sec) return pls_integer is
    b pls_integer := D_Timepoint_Sec_Package.f_l(m_y, m_m, m_d, m_h, m_min, m_sec, tp1.m_y, tp1.m_m, tp1.m_d, tp1.m_h, tp1.m_min, tp1.m_sec, tp2.m_y, tp2.m_m, tp2.m_d, tp2.m_h, tp2.m_min, tp2.m_sec);
    begin
         return b;
    end;

    --Returns true if the first Timepoint is less or equal to the second.
    MEMBER FUNCTION f_l_e(tp1 D_Timepoint_Sec, tp2 D_Timepoint_Sec) return pls_integer is
    b pls_integer := D_Timepoint_Sec_Package.f_l_e(m_y, m_m, m_d, m_h, m_min, m_sec, tp1.m_y, tp1.m_m, tp1.m_d, tp1.m_h, tp1.m_min, tp1.m_sec, tp2.m_y, tp2.m_m, tp2.m_d, tp2.m_h, tp2.m_min, tp2.m_sec);
    begin
         return b;
    end;

    --Returns true if the first Timepoint is greater than the second.
    MEMBER FUNCTION f_b(tp1 D_Timepoint_Sec, tp2 D_Timepoint_Sec) return pls_integer is
    b pls_integer := D_Timepoint_Sec_Package.f_b(m_y, m_m, m_d, m_h, m_min, m_sec, tp1.m_y, tp1.m_m, tp1.m_d, tp1.m_h, tp1.m_min, tp1.m_sec, tp2.m_y, tp2.m_m, tp2.m_d, tp2.m_h, tp2.m_min, tp2.m_sec);
    begin
         return b;
    end;

    --Returns true if the first Timepoint is greater or equal to the second.
    MEMBER FUNCTION f_b_e(tp1 D_Timepoint_Sec, tp2 D_Timepoint_Sec) return pls_integer is
    b pls_integer := D_Timepoint_Sec_Package.f_b_e(m_y, m_m, m_d, m_h, m_min, m_sec, tp1.m_y, tp1.m_m, tp1.m_d, tp1.m_h, tp1.m_min, tp1.m_sec, tp2.m_y, tp2.m_m, tp2.m_d, tp2.m_h, tp2.m_min, tp2.m_sec);
    begin
         return b;
    end;

    --Returns the Interval between two Timepoints.
    MEMBER FUNCTION f_diff(tp1 D_Timepoint_Sec, tp2 D_Timepoint_Sec) return D_Interval is
    i_Value double precision := 0;
    begin
         D_Timepoint_Sec_Package.f_diff(m_y, m_m, m_d, m_h, m_min, m_sec, tp1.m_y, tp1.m_m, tp1.m_d, tp1.m_h, tp1.m_min, tp1.m_sec, tp2.m_y, tp2.m_m, tp2.m_d, tp2.m_h, tp2.m_min, tp2.m_sec, i_Value);
         return D_Interval(i_Value);
    end;

    --Returns true if the Timepoint is equal to the Timestamp.
    MEMBER FUNCTION f_eq(tp D_Timepoint_Sec, ts D_Timestamp) return pls_integer is
    b pls_integer := D_Timepoint_Sec_Package.f_eq(m_y, m_m, m_d, m_h, m_min, m_sec, tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min, tp.m_sec, ts.m_Date.m_Year, ts.m_Date.m_Month, ts.m_Date.m_Day, ts.m_Time.m_Hour, ts.m_Time.m_Minute, ts.m_Time.m_Second, ts.m_Time.m_100thSec, ts.m_Time.m_tzHour, ts.m_Time.m_tzMinute);
    begin
         return b;
    end;

    --Returns true if the Timepoint is different from the Timestamp.
    MEMBER FUNCTION f_n_eq(tp D_Timepoint_Sec, ts D_Timestamp) return pls_integer is
    b pls_integer := D_Timepoint_Sec_Package.f_n_eq(m_y, m_m, m_d, m_h, m_min, m_sec, tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min, tp.m_sec, ts.m_Date.m_Year, ts.m_Date.m_Month, ts.m_Date.m_Day, ts.m_Time.m_Hour, ts.m_Time.m_Minute, ts.m_Time.m_Second, ts.m_Time.m_100thSec, ts.m_Time.m_tzHour, ts.m_Time.m_tzMinute);
    begin
         return b;
    end;

    --Returns true if the Timepoint is less than the Timestamp.
    MEMBER FUNCTION f_l(tp D_Timepoint_Sec, ts D_Timestamp) return pls_integer is
    b pls_integer := D_Timepoint_Sec_Package.f_l(m_y, m_m, m_d, m_h, m_min, m_sec, tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min, tp.m_sec, ts.m_Date.m_Year, ts.m_Date.m_Month, ts.m_Date.m_Day, ts.m_Time.m_Hour, ts.m_Time.m_Minute, ts.m_Time.m_Second, ts.m_Time.m_100thSec, ts.m_Time.m_tzHour, ts.m_Time.m_tzMinute);
    begin
         return b;
    end;

    --Returns true if the Timepoint is less or equal to the Timestamp.
    MEMBER FUNCTION f_l_e(tp D_Timepoint_Sec, ts D_Timestamp) return pls_integer is
    b pls_integer := D_Timepoint_Sec_Package.f_l_e(m_y, m_m, m_d, m_h, m_min, m_sec, tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min, tp.m_sec, ts.m_Date.m_Year, ts.m_Date.m_Month, ts.m_Date.m_Day, ts.m_Time.m_Hour, ts.m_Time.m_Minute, ts.m_Time.m_Second, ts.m_Time.m_100thSec, ts.m_Time.m_tzHour, ts.m_Time.m_tzMinute);
    begin
         return b;
    end;

    --Returns true if the Timepoint is greater than the Timestamp.
    MEMBER FUNCTION f_b(tp D_Timepoint_Sec, ts D_Timestamp) return pls_integer is
    b pls_integer := D_Timepoint_Sec_Package.f_b(m_y, m_m, m_d, m_h, m_min, m_sec, tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min, tp.m_sec, ts.m_Date.m_Year, ts.m_Date.m_Month, ts.m_Date.m_Day, ts.m_Time.m_Hour, ts.m_Time.m_Minute, ts.m_Time.m_Second, ts.m_Time.m_100thSec, ts.m_Time.m_tzHour, ts.m_Time.m_tzMinute);
    begin
         return b;
    end;

    --Returns true if the Timepoint is greater or equal to the Timestamp.
    MEMBER FUNCTION f_b_e(tp D_Timepoint_Sec, ts D_Timestamp) return pls_integer is
    b pls_integer := D_Timepoint_Sec_Package.f_b_e(m_y, m_m, m_d, m_h, m_min, m_sec, tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min, tp.m_sec, ts.m_Date.m_Year, ts.m_Date.m_Month, ts.m_Date.m_Day, ts.m_Time.m_Hour, ts.m_Time.m_Minute, ts.m_Time.m_Second, ts.m_Time.m_100thSec, ts.m_Time.m_tzHour, ts.m_Time.m_tzMinute);
    begin
         return b;
    end;

    --Returns true if two Timepoints overlap.
    MEMBER FUNCTION f_overlaps(tp1 D_Timepoint_Sec, tp2 D_Timepoint_Sec) return pls_integer is
    b pls_integer := D_Timepoint_Sec_Package.f_overlaps(m_y, m_m, m_d, m_h, m_min, m_sec, tp1.m_y, tp1.m_m, tp1.m_d, tp1.m_h, tp1.m_min, tp1.m_sec, tp2.m_y, tp2.m_m, tp2.m_d, tp2.m_h, tp2.m_min, tp2.m_sec);
    begin
         return b;
    end;

    --Returns true if the first Timepoint precedes the second Timepoint.
    MEMBER FUNCTION f_precedes(tp1 D_Timepoint_Sec, tp2 D_Timepoint_Sec) return pls_integer is
    b pls_integer := D_Timepoint_Sec_Package.f_precedes(m_y, m_m, m_d, m_h, m_min, m_sec, tp1.m_y, tp1.m_m, tp1.m_d, tp1.m_h, tp1.m_min, tp1.m_sec, tp2.m_y, tp2.m_m, tp2.m_d, tp2.m_h, tp2.m_min, tp2.m_sec);
    begin
         return b;
    end;

    --Returns true if the first Timepoint meets the second Timepoint.
    MEMBER FUNCTION f_meets(tp1 D_Timepoint_Sec, tp2 D_Timepoint_Sec) return pls_integer is
    b pls_integer := D_Timepoint_Sec_Package.f_meets(m_y, m_m, m_d, m_h, m_min, m_sec, tp1.m_y, tp1.m_m, tp1.m_d, tp1.m_h, tp1.m_min, tp1.m_sec, tp2.m_y, tp2.m_m, tp2.m_d, tp2.m_h, tp2.m_min, tp2.m_sec);
    begin
         return b;
    end;

    --Returns true if the first Timepoint is equal to the second Timepoint.
    MEMBER FUNCTION f_equal(tp1 D_Timepoint_Sec, tp2 D_Timepoint_Sec) return pls_integer is
    b pls_integer := D_Timepoint_Sec_Package.f_equal(m_y, m_m, m_d, m_h, m_min, m_sec, tp1.m_y, tp1.m_m, tp1.m_d, tp1.m_h, tp1.m_min, tp1.m_sec, tp2.m_y, tp2.m_m, tp2.m_d, tp2.m_h, tp2.m_min, tp2.m_sec);
    begin
         return b;
    end;

    --Returns true if the first Timepoint contains the second Timepoint.
    MEMBER FUNCTION f_contains(tp1 D_Timepoint_Sec, tp2 D_Timepoint_Sec) return pls_integer is
    b pls_integer := D_Timepoint_Sec_Package.f_contains(m_y, m_m, m_d, m_h, m_min, m_sec, tp1.m_y, tp1.m_m, tp1.m_d, tp1.m_h, tp1.m_min, tp1.m_sec, tp2.m_y, tp2.m_m, tp2.m_d, tp2.m_h, tp2.m_min, tp2.m_sec);
    begin
         return b;
    end;

    --Returns true if the Timepoint overlaps the Period.
    MEMBER FUNCTION f_overlaps(tp D_Timepoint_Sec, p_sec REF D_Period_Sec) return pls_integer is
    p D_Period_Sec;
    b pls_integer := 0;
    begin
         SELECT DEREF(p_sec) INTO p FROM DUAL;
         b := D_Timepoint_Sec_Package.f_overlaps(m_y, m_m, m_d, m_h, m_min, m_sec, tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min, tp.m_sec, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.b.m_min, p.b.m_sec, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, p.e.m_min, p.e.m_sec);
         return b;
    end;

    --Returns true if the Timepoint precedes the Period.
    MEMBER FUNCTION f_precedes(tp D_Timepoint_Sec, p_sec REF D_Period_Sec) return pls_integer is
    p D_Period_Sec;
    b pls_integer := 0;
    begin
         SELECT DEREF(p_sec) INTO p FROM DUAL;
         b := D_Timepoint_Sec_Package.f_precedes(m_y, m_m, m_d, m_h, m_min, m_sec, tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min, tp.m_sec, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.b.m_min, p.b.m_sec, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, p.e.m_min, p.e.m_sec);
         return b;
    end;

    --Returns true if the Timepoint meets the Period.
    MEMBER FUNCTION f_meets(tp D_Timepoint_Sec, p_sec REF D_Period_Sec) return pls_integer is
    p D_Period_Sec;
    b pls_integer := 0;
    begin
         SELECT DEREF(p_sec) INTO p FROM DUAL;
         b := D_Timepoint_Sec_Package.f_meets(m_y, m_m, m_d, m_h, m_min, m_sec, tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min, tp.m_sec, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.b.m_min, p.b.m_sec, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, p.e.m_min, p.e.m_sec);
         return b;
    end;

    --Returns true if the Timepoint is equal to the Period.
    MEMBER FUNCTION f_equal(tp D_Timepoint_Sec, p_sec REF D_Period_Sec) return pls_integer is
    p D_Period_Sec;
    b pls_integer := 0;
    begin
         SELECT DEREF(p_sec) INTO p FROM DUAL;
         b := D_Timepoint_Sec_Package.f_equal(m_y, m_m, m_d, m_h, m_min, m_sec, tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min, tp.m_sec, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.b.m_min, p.b.m_sec, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, p.e.m_min, p.e.m_sec);
         return b;
    end;

    --Returns true if the Timepoint contains the Period.
    MEMBER FUNCTION f_contains(tp D_Timepoint_Sec, p_sec REF D_Period_Sec) return pls_integer is
    p D_Period_Sec;
    b pls_integer := 0;
    begin
         SELECT DEREF(p_sec) INTO p FROM DUAL;
         b := D_Timepoint_Sec_Package.f_contains(m_y, m_m, m_d, m_h, m_min, m_sec, tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min, tp.m_sec, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.b.m_min, p.b.m_sec, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, p.e.m_min, p.e.m_sec);
         return b;
    end;

    --Returns true if the Timepoint overlaps the Temporal Element.
    MEMBER FUNCTION f_overlaps(tp D_Timepoint_Sec, te REF D_Temp_Element_Sec) return pls_integer is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_Sec;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         return D_Timepoint_Sec_Package.f_overlaps(m_y, m_m, m_d, m_h, m_min, m_sec, tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min, tp.m_sec, te1.to_string());
    end;

    --Returns true if the Timepoint precedes the Temporal Element.
    MEMBER FUNCTION f_precedes(tp D_Timepoint_Sec, te REF D_Temp_Element_Sec) return pls_integer is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_Sec;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         return D_Timepoint_Sec_Package.f_precedes(m_y, m_m, m_d, m_h, m_min, m_sec, tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min, tp.m_sec, te1.to_string());
    end;

    --Returns true if the Timepoint meets the Temporal Element.
    MEMBER FUNCTION f_meets(tp D_Timepoint_Sec, te REF D_Temp_Element_Sec) return pls_integer is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_Sec;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         return D_Timepoint_Sec_Package.f_meets(m_y, m_m, m_d, m_h, m_min, m_sec, tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min, tp.m_sec, te1.to_string());
    end;

    --Returns true if the Timepoint is equal to the Temporal Element.
    MEMBER FUNCTION f_equal(tp D_Timepoint_Sec, te REF D_Temp_Element_Sec) return pls_integer is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_Sec;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         return D_Timepoint_Sec_Package.f_equal(m_y, m_m, m_d, m_h, m_min, m_sec, tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min, tp.m_sec, te1.to_string());
    end;

    --Returns true if the Timepoint contains the Temporal Element.
    MEMBER FUNCTION f_contains(tp D_Timepoint_Sec, te REF D_Temp_Element_Sec) return pls_integer is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_Sec;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         return D_Timepoint_Sec_Package.f_contains(m_y, m_m, m_d, m_h, m_min, m_sec, tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min, tp.m_sec, te1.to_string());
    end;

    --Returns true if the Period constructed using the first two Timepoints overlaps the Period constructed using the other two Timepoints.
    MEMBER FUNCTION f_overlaps(tp1 D_Timepoint_Sec, tp2 D_Timepoint_Sec, tp3 D_Timepoint_Sec, tp4 D_Timepoint_Sec) return pls_integer is
    b pls_integer := D_Timepoint_Sec_Package.f_overlaps(m_y, m_m, m_d, m_h, m_min, m_sec, tp1.m_y, tp1.m_m, tp1.m_d, tp1.m_h, tp1.m_min, tp1.m_sec, tp2.m_y, tp2.m_m, tp2.m_d, tp2.m_h, tp2.m_min, tp2.m_sec, tp3.m_y, tp3.m_m, tp3.m_d, tp3.m_h, tp3.m_min, tp3.m_sec, tp4.m_y, tp4.m_m, tp4.m_d, tp4.m_h, tp4.m_min, tp4.m_sec);
    begin
         return b;
    end;

end;
/

-- Type body D_PERIOD_Y

CREATE OR REPLACE
type body D_Period_Y is

    --Changes the status of the Timepoint object
    MEMBER PROCEDURE change_status(special_value pls_integer) is
    begin
    -- b.m_y, e.m_y IN OUT argument
         D_Period_Y_Package.change_status(b.m_y, e.m_y, special_value);
    end;

    --Returns the begin Timepoint of the Period object.
    MEMBER FUNCTION f_begin return D_Timepoint_Y is
    b_y pls_integer := 0;
    begin
         D_Period_Y_Package.f_begin(b.m_y, e.m_y, b_y);
         return D_Timepoint_Y(b_y);
    end;

    --Returns the end Timepoint of the Period object.
    MEMBER FUNCTION f_end return D_Timepoint_Y is
    e_y pls_integer := 0;
    begin
         D_Period_Y_Package.f_end(b.m_y, e.m_y, e_y);
         return D_Timepoint_Y(e_y);
    end;

    --Sets the begin Timepoint of the Period object.
    MEMBER PROCEDURE set_begin(tp D_Timepoint_Y) is
    -- b.m_y, e.m_y IN OUT argument
    begin
         D_Period_Y_Package.set_begin(b.m_y, e.m_y, tp.m_y);
    end;

    --Sets the end Timepoint of the Period object.
    MEMBER PROCEDURE set_end(tp D_Timepoint_Y) is
    -- b.m_y, e.m_y IN OUT argument
    begin
         D_Period_Y_Package.set_end(b.m_y, e.m_y, tp.m_y);
    end;

    --Returns the Granularity of the Period object.
    MEMBER FUNCTION get_granularity return pls_integer is
    g pls_integer := D_Period_Y_Package.get_granularity(b.m_y, e.m_y);
    begin
         return g;
    end;

    --Returns an Interval object representing the duration of the Period.
    MEMBER FUNCTION duration return D_Interval is
    i_Value double precision := 0;
    begin
        D_Period_Y_Package.duration(b.m_y, e.m_y, i_Value);
        return D_Interval(i_Value);
    end;

    --Creates a string for the Timepoint object in ISO 8601 format.
    MEMBER FUNCTION to_string return Varchar2 is
    s Varchar2(50) := D_Period_Y_Package.to_string(b.m_y, e.m_y);
    begin
         return s;
    end;

    --Converts the Period object to a Temporal Element object.
    MEMBER FUNCTION to_temporal_element return REF D_Temp_Element_Y is
    str Varchar2(32766) := '';
    TE_y REF D_Temp_Element_Y;
    begin
         str := D_Period_Y_Package.to_temporal_element(b.m_y, e.m_y);
         INSERT INTO temp_elements_y t
         VALUES (D_Temp_Element_Y(return_temporal_element_y(str)))
         RETURNING REF(t) INTO TE_y;
         return TE_y;
    end;

    --Assigns the value of another Timepoint to the Timepoint object.
    MEMBER PROCEDURE f_ass_period(p D_Period_Y) is
    -- b.m_y, e.m_y IN OUT argument
    begin
        D_Period_Y_Package.f_ass_period(b.m_y, e.m_y, p.b.m_y, p.e.m_y);
    end;

    --Adds an Interval to the Timepoint object.
    MEMBER PROCEDURE f_add_interval(i D_Interval) is
    -- b.m_y, e.m_y IN OUT argument
    begin
         D_Period_Y_Package.f_add_interval(b.m_y, e.m_y, i.m_Value);
    end;

    --Subtracts an Interval from the Timepoint object.
    MEMBER PROCEDURE f_sub_interval(i D_Interval) is
    -- b.m_y, e.m_y IN OUT argument
    begin
         D_Period_Y_Package.f_sub_interval(b.m_y, e.m_y, i.m_Value);
    end;

    --Adds the interval to begin and end Timepoints of the Period object.
    MEMBER FUNCTION f_add(p D_Period_Y, i D_Interval) return D_Period_Y is
    b_y pls_integer := 0;
    e_y pls_integer := 0;
    begin
         D_Period_Y_Package.f_add(b.m_y, e.m_y, p.b.m_y, p.e.m_y, i.m_Value, b_y, e_y);
         return D_Period_Y(D_Timepoint_Y(b_y), D_Timepoint_Y(e_y));
    end;

    --Subtracts the interval to begin and end Timepoints of the Period object.
    MEMBER FUNCTION f_sub(p D_Period_Y, i D_Interval) return D_Period_Y  is
    b_y pls_integer := 0;
    e_y pls_integer := 0;
    begin
         D_Period_Y_Package.f_sub(b.m_y, e.m_y, p.b.m_y, p.e.m_y, i.m_Value, b_y, e_y);
         return D_Period_Y(D_Timepoint_Y(b_y), D_Timepoint_Y(e_y));
    end;

    --Constructs a Temporal Element object adding two Periods.
    MEMBER FUNCTION f_add(p1 D_Period_Y, p2 D_Period_Y) return REF D_Temp_Element_Y is
    str Varchar2(32766) := '';
    TE_y REF D_Temp_Element_Y;
    begin
         str := D_Period_Y_Package.f_add(b.m_y, e.m_y, p1.b.m_y, p1.e.m_y, p2.b.m_y, p2.e.m_y);
         INSERT INTO temp_elements_y t
         VALUES (D_Temp_Element_Y(return_temporal_element_y(str)))
         RETURNING REF(t) INTO TE_y;
         return TE_y;
    end;

    --Constructs a Temporal Element object subtracting two Periods.
    MEMBER FUNCTION f_sub(p1 D_Period_Y, p2 D_Period_Y) return REF D_Temp_Element_Y is
    str Varchar2(32766) := '';
    TE_y REF D_Temp_Element_Y;
    begin
         str := D_Period_Y_Package.f_sub(b.m_y, e.m_y, p1.b.m_y, p1.e.m_y, p2.b.m_y, p2.e.m_y);
         INSERT INTO temp_elements_y t
         VALUES (D_Temp_Element_Y(return_temporal_element_y(str)))
         RETURNING REF(t) INTO TE_y;
         return TE_y;
    end;

    --Constructs a Temporal Element object adding a Period to a Temporal Element.
    MEMBER FUNCTION f_add(p D_Period_Y, te REF D_Temp_Element_Y) return REF D_Temp_Element_Y is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_Y;
    TE_y REF D_Temp_Element_Y;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         str := D_Period_Y_Package.f_add(b.m_y, e.m_y, p.b.m_y, p.e.m_y, te1.to_string());
         INSERT INTO temp_elements_y t
         VALUES (D_Temp_Element_Y(return_temporal_element_y(str)))
         RETURNING REF(t) INTO TE_y;
         return TE_y;
    end;

    --Constructs a Temporal Element object subtracting a Temporal Element from a Period.
    MEMBER FUNCTION f_sub(p D_Period_Y, te REF D_Temp_Element_Y) return REF D_Temp_Element_Y is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_Y;
    TE_y REF D_Temp_Element_Y;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         str := D_Period_Y_Package.f_sub(b.m_y, e.m_y, p.b.m_y, p.e.m_y, te1.to_string());
         INSERT INTO temp_elements_y t
         VALUES (D_Temp_Element_Y(return_temporal_element_y(str)))
         RETURNING REF(t) INTO TE_y;
         return TE_y;
    end;

    --Returns a Period object representing the intersection between a Period and a Timepoint.
    MEMBER FUNCTION intersects(p D_Period_Y, tp D_Timepoint_Y) return D_Period_Y is
    b_y pls_integer := 0;
    e_y pls_integer := 0;
    begin
         D_Period_Y_Package.intersects(b.m_y, e.m_y, p.b.m_y, p.e.m_y, tp.m_y, b_y, e_y);
         return D_Period_Y(D_Timepoint_Y(b_y), D_Timepoint_Y(e_y));
    end;

    --Returns a Period object representing the intersection between two Periods.
    MEMBER FUNCTION intersects(p1 D_Period_Y, p2 D_Period_Y) return D_Period_Y is
    b_y pls_integer := 0;
    e_y pls_integer := 0;
    begin
         D_Period_Y_Package.intersects(b.m_y, e.m_y, p1.b.m_y, p1.e.m_y, p2.b.m_y, p2.e.m_y, b_y, e_y);
         return D_Period_Y(D_Timepoint_Y(b_y), D_Timepoint_Y(e_y));
    end;

    --Returns a Temporal Element object representing the intersection between a Period and a Temporal Element.
    MEMBER FUNCTION intersects(p D_Period_Y, te REF D_Temp_Element_Y) return REF D_Temp_Element_Y is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_Y;
    TE_y REF D_Temp_Element_Y;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         str := D_Period_Y_Package.intersects(b.m_y, e.m_y, p.b.m_y, p.e.m_y, te1.to_string());
         INSERT INTO temp_elements_y t
         VALUES (D_Temp_Element_Y(return_temporal_element_y(str)))
         RETURNING REF(t) INTO TE_y;
         return TE_y;
    end;

    --Returns true if the Periods have the same value.
    MEMBER FUNCTION f_eq(p1 D_Period_Y, p2 D_Period_Y) return pls_integer is
    i pls_integer := D_Period_Y_Package.f_eq(b.m_y, e.m_y, p1.b.m_y, p1.e.m_y, p2.b.m_y, p2.e.m_y);
    begin
         return i;
    end;

    --Returns true if the Periods have different value.
    MEMBER FUNCTION f_n_eq(p1 D_Period_Y, p2 D_Period_Y) return pls_integer is
    i pls_integer := D_Period_Y_Package.f_n_eq(b.m_y, e.m_y, p1.b.m_y, p1.e.m_y, p2.b.m_y, p2.e.m_y);
    begin
         return i;
    end;

    --Returns true if the begin Timepoint of the first Period precedes the begin Timepoint of the second Period.
    MEMBER FUNCTION f_l(p1 D_Period_Y, p2 D_Period_Y) return pls_integer is
    i pls_integer := D_Period_Y_Package.f_l(b.m_y, e.m_y, p1.b.m_y, p1.e.m_y, p2.b.m_y, p2.e.m_y);
    begin
         return i;
    end;

    --Returns true if the begin Timepoint of the first Period precedes or is equal to the begin Timepoint of the second Period.
    MEMBER FUNCTION f_l_e(p1 D_Period_Y, p2 D_Period_Y) return pls_integer is
    i pls_integer := D_Period_Y_Package.f_l_e(b.m_y, e.m_y, p1.b.m_y, p1.e.m_y, p2.b.m_y, p2.e.m_y);
    begin
         return i;
    end;

    --Returns true if the begin Timepoint of the first Period follows the begin Timepoint of the second Period.
    MEMBER FUNCTION f_b(p1 D_Period_Y, p2 D_Period_Y) return pls_integer is
    i pls_integer := D_Period_Y_Package.f_b(b.m_y, e.m_y, p1.b.m_y, p1.e.m_y, p2.b.m_y, p2.e.m_y);
    begin
         return i;
    end;

    --Returns true if the begin Timepoint of the first Period follows or is equal to the begin Timepoint of the second Period.
    MEMBER FUNCTION f_b_e(p1 D_Period_Y, p2 D_Period_Y) return pls_integer is
    i pls_integer := D_Period_Y_Package.f_b_e(b.m_y, e.m_y, p1.b.m_y, p1.e.m_y, p2.b.m_y, p2.e.m_y);
    begin
         return i;
    end;

    --Returns true if the Period overlaps the Timepoint.
    MEMBER FUNCTION f_overlaps(p D_Period_Y, tp D_Timepoint_Y) return pls_integer is
    i pls_integer := D_Period_Y_Package.f_overlaps(b.m_y, e.m_y, p.b.m_y, p.e.m_y, tp.m_y);
    begin
         return i;
    end;

    --Returns true if the Period precedes the Timepoint.
    MEMBER FUNCTION f_precedes(p D_Period_Y, tp D_Timepoint_Y) return pls_integer is
    i pls_integer := D_Period_Y_Package.f_precedes(b.m_y, e.m_y, p.b.m_y, p.e.m_y, tp.m_y);
    begin
         return i;
    end;

    --Returns true if the Period meets the Timepoint.
    MEMBER FUNCTION f_meets(p D_Period_Y, tp D_Timepoint_Y) return pls_integer is
    i pls_integer := D_Period_Y_Package.f_meets(b.m_y, e.m_y, p.b.m_y, p.e.m_y, tp.m_y);
    begin
         return i;
    end;

    --Returns true if the Period is equal to Timepoint.
    MEMBER FUNCTION f_equal(p D_Period_Y, tp D_Timepoint_Y) return pls_integer is
    i pls_integer := D_Period_Y_Package.f_equal(b.m_y, e.m_y, p.b.m_y, p.e.m_y, tp.m_y);
    begin
         return i;
    end;

    --Returns true if the Period contains the Timepoint.
    MEMBER FUNCTION f_contains(p D_Period_Y, tp D_Timepoint_Y) return pls_integer is
    i pls_integer := D_Period_Y_Package.f_contains(b.m_y, e.m_y, p.b.m_y, p.e.m_y, tp.m_y);
    begin
         return i;
    end;

    --Returns true if two Periods overlap.
    MEMBER FUNCTION f_overlaps(p1 D_Period_Y, p2 D_Period_Y) return pls_integer is
    i pls_integer := D_Period_Y_Package.f_overlaps(b.m_y, e.m_y, p1.b.m_y, p1.e.m_y, p2.b.m_y, p2.e.m_y);
    begin
         return i;
    end;

    --Returns true if the first Period precedes the second Period.
    MEMBER FUNCTION f_precedes(p1 D_Period_Y, p2 D_Period_Y) return pls_integer is
    i pls_integer := D_Period_Y_Package.f_precedes(b.m_y, e.m_y, p1.b.m_y, p1.e.m_y, p2.b.m_y, p2.e.m_y);
    begin
         return i;
    end;

    --Returns true if the first Period meets the second Period.
    MEMBER FUNCTION f_meets(p1 D_Period_Y, p2 D_Period_Y) return pls_integer is
    i pls_integer := D_Period_Y_Package.f_meets(b.m_y, e.m_y, p1.b.m_y, p1.e.m_y, p2.b.m_y, p2.e.m_y);
    begin
         return i;
    end;

    --Returns true if the first Period is equal to the second Period.
    MEMBER FUNCTION f_equal(p1 D_Period_Y, p2 D_Period_Y) return pls_integer is
    i pls_integer := D_Period_Y_Package.f_equal(b.m_y, e.m_y, p1.b.m_y, p1.e.m_y, p2.b.m_y, p2.e.m_y);
    begin
         return i;
    end;

    --Returns true if the first Period contains the second Period.
    MEMBER FUNCTION f_contains(p1 D_Period_Y, p2 D_Period_Y) return pls_integer is
    i pls_integer := D_Period_Y_Package.f_contains(b.m_y, e.m_y, p1.b.m_y, p1.e.m_y, p2.b.m_y, p2.e.m_y);
    begin
         return i;
    end;

    --Returns true if the Period overlaps the Temporal Element.
    MEMBER FUNCTION f_overlaps(p D_Period_Y, te REF D_Temp_Element_Y) return pls_integer is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_Y;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         return D_Period_Y_Package.f_overlaps(b.m_y, e.m_y, p.b.m_y, p.e.m_y, te1.to_string());
    end;

    --Returns true if the Period precedes the Temporal Element.
    MEMBER FUNCTION f_precedes(p D_Period_Y, te REF D_Temp_Element_Y) return pls_integer is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_Y;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         return D_Period_Y_Package.f_precedes(b.m_y, e.m_y, p.b.m_y, p.e.m_y, te1.to_string());
    end;

    --Returns true if the Period meets the Temporal Element.
    MEMBER FUNCTION f_meets(p D_Period_Y, te REF D_Temp_Element_Y) return pls_integer is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_Y;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         return D_Period_Y_Package.f_meets(b.m_y, e.m_y, p.b.m_y, p.e.m_y, te1.to_string());
    end;

    --Returns true if the Period is equal to the Temporal Element.
    MEMBER FUNCTION f_equal(p D_Period_Y, te REF D_Temp_Element_Y) return pls_integer is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_Y;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         return D_Period_Y_Package.f_equal(b.m_y, e.m_y, p.b.m_y, p.e.m_y, te1.to_string());
    end;

    --Returns true if the Timepoint contains the Temporal Element.
    MEMBER FUNCTION f_contains(p D_Period_Y, te REF D_Temp_Element_Y) return pls_integer is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_Y;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         return D_Period_Y_Package.f_contains(b.m_y, e.m_y, p.b.m_y, p.e.m_y, te1.to_string());
    end;

end;
/

-- Type body D_PERIOD_M

CREATE OR REPLACE
type body D_Period_M is

    --Changes the status of the Timepoint object
    MEMBER PROCEDURE change_status(special_value pls_integer) is
    begin
    -- b.m_y, b.m_m, e.m_y, e.m_m IN OUT argument
         D_Period_M_Package.change_status(b.m_y, b.m_m, e.m_y, e.m_m, special_value);
    end;

    --Returns the begin Timepoint of the Period object.
    MEMBER FUNCTION f_begin return D_Timepoint_M is
    b_y pls_integer := 0;
    b_m pls_integer := 0;
    begin
         D_Period_M_Package.f_begin(b.m_y, b.m_m, e.m_y, e.m_m, b_y, b_m);
         return D_Timepoint_M(b_y, b_m);
    end;

    --Returns the end Timepoint of the Period object.
    MEMBER FUNCTION f_end return D_Timepoint_M is
    e_y pls_integer := 0;
    e_m pls_integer := 0;
    begin
         D_Period_M_Package.f_end(b.m_y, b.m_m, e.m_y, e.m_m, e_y, e_m);
         return D_Timepoint_M(e_y, e_m);
    end;

    --Sets the begin Timepoint of the Period object.
    MEMBER PROCEDURE set_begin(tp D_Timepoint_M) is
    -- b.m_y, b.m_m, e.m_y, e.m_m IN OUT argument
    begin
         D_Period_M_Package.set_begin(b.m_y, b.m_m, e.m_y, e.m_m, tp.m_y, tp.m_m);
    end;

    --Sets the end Timepoint of the Period object.
    MEMBER PROCEDURE set_end(tp D_Timepoint_M) is
    -- b.m_y, b.m_m, e.m_y, e.m_m IN OUT argument
    begin
         D_Period_M_Package.set_end(b.m_y, b.m_m, e.m_y, e.m_m, tp.m_y, tp.m_m);
    end;

    --Returns the Granularity of the Period object.
    MEMBER FUNCTION get_granularity return pls_integer is
    g pls_integer := D_Period_M_Package.get_granularity(b.m_y, b.m_m, e.m_y, e.m_m);
    begin
         return g;
    end;

    --Returns an Interval object representing the duration of the Period.
    MEMBER FUNCTION duration return D_Interval is
    i_Value double precision := 0;
    begin
        D_Period_M_Package.duration(b.m_y, b.m_m, e.m_y, e.m_m, i_Value);
        return D_Interval(i_Value);
    end;

    --Creates a string for the Timepoint object in ISO 8601 format.
    MEMBER FUNCTION to_string return Varchar2 is
    s Varchar2(50) := D_Period_M_Package.to_string(b.m_y, b.m_m, e.m_y, e.m_m);
    begin
         return s;
    end;

    --Converts the Period object to a Temporal Element object.
    MEMBER FUNCTION to_temporal_element return REF D_Temp_Element_M is
    str Varchar2(32766) := '';
    TE_m REF D_Temp_Element_M;
    begin
         str := D_Period_M_Package.to_temporal_element(b.m_y, b.m_m, e.m_y, e.m_m);
         INSERT INTO temp_elements_m t
         VALUES (D_Temp_Element_M(return_temporal_element_m(str)))
         RETURNING REF(t) INTO TE_m;
         return TE_m;
    end;

    --Assigns the value of another Timepoint to the Timepoint object.
    MEMBER PROCEDURE f_ass_period(p D_Period_M) is
    -- b.m_y, b.m_m, e.m_y, e.m_m IN OUT argument
    begin
        D_Period_M_Package.f_ass_period(b.m_y, b.m_m, e.m_y, e.m_m, p.b.m_y, p.b.m_m, p.e.m_y, p.e.m_m);
    end;

    --Adds an Interval to the Timepoint object.
    MEMBER PROCEDURE f_add_interval(i D_Interval) is
    -- b.m_y, b.m_m, b.m_m, e.m_y, e.m_m IN OUT argument
    begin
         D_Period_M_Package.f_add_interval(b.m_y, b.m_m, e.m_y, e.m_m, i.m_Value);
    end;

    --Subtracts an Interval from the Timepoint object.
    MEMBER PROCEDURE f_sub_interval(i D_Interval) is
    -- b.m_y, b.m_m, e.m_y, e.m_m IN OUT argument
    begin
         D_Period_M_Package.f_sub_interval(b.m_y, b.m_m, e.m_y, e.m_m, i.m_Value);
    end;

    --Adds the interval to begin and end Timepoints of the Period object.
    MEMBER FUNCTION f_add(p D_Period_M, i D_Interval) return D_Period_M is
    b_y pls_integer := 0;
    b_m pls_integer := 0;
    e_y pls_integer := 0;
    e_m pls_integer := 0;
    begin
         D_Period_M_Package.f_add(b.m_y, b.m_m, e.m_y, e.m_m, p.b.m_y, p.b.m_m, p.e.m_y, p.e.m_m, i.m_Value, b_y, b_m, e_y, e_m);
         return D_Period_M(D_Timepoint_M(b_y, b_m), D_Timepoint_M(e_y, e_m));
    end;

    --Subtracts the interval to begin and end Timepoints of the Period object.
    MEMBER FUNCTION f_sub(p D_Period_M, i D_Interval) return D_Period_M  is
    b_y pls_integer := 0;
    b_m pls_integer := 0;
    e_y pls_integer := 0;
    e_m pls_integer := 0;
    begin
         D_Period_M_Package.f_sub(b.m_y, b.m_m, e.m_y, e.m_m, p.b.m_y, p.b.m_m, p.e.m_y, p.e.m_m, i.m_Value, b_y, b_m, e_y, e_m);
         return D_Period_M(D_Timepoint_M(b_y, b_m), D_Timepoint_M(e_y, e_m));
    end;

    --Constructs a Temporal Element object adding two Periods.
    MEMBER FUNCTION f_add(p1 D_Period_M, p2 D_Period_M) return REF D_Temp_Element_M is
    str Varchar2(32766) := '';
    TE_m REF D_Temp_Element_M;
    begin
         str := D_Period_M_Package.f_add(b.m_y, b.m_m, e.m_y, e.m_m, p1.b.m_y, p1.b.m_m, p1.e.m_y, p1.e.m_m, p2.b.m_y, p2.b.m_m, p2.e.m_y, p2.e.m_m);
         INSERT INTO temp_elements_m t
         VALUES (D_Temp_Element_M(return_temporal_element_m(str)))
         RETURNING REF(t) INTO TE_m;
         return TE_m;
    end;

    --Constructs a Temporal Element object subtracting two Periods.
    MEMBER FUNCTION f_sub(p1 D_Period_M, p2 D_Period_M) return REF D_Temp_Element_M is
    str Varchar2(32766) := '';
    TE_m REF D_Temp_Element_M;
    begin
         str := D_Period_M_Package.f_sub(b.m_y, b.m_m, e.m_y, e.m_m, p1.b.m_y, p1.b.m_m, p1.e.m_y, p1.e.m_m, p2.b.m_y, p2.b.m_m, p2.e.m_y, p2.e.m_m);
         INSERT INTO temp_elements_m t
         VALUES (D_Temp_Element_M(return_temporal_element_m(str)))
         RETURNING REF(t) INTO TE_m;
         return TE_m;
    end;

    --Constructs a Temporal Element object adding a Period to a Temporal Element.
    MEMBER FUNCTION f_add(p D_Period_M, te REF D_Temp_Element_M) return REF D_Temp_Element_M is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_M;
    TE_m REF D_Temp_Element_M;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         str := D_Period_M_Package.f_add(b.m_y, b.m_m, e.m_y, e.m_m, p.b.m_y, p.b.m_m, p.e.m_y, p.e.m_m, te1.to_string());
         INSERT INTO temp_elements_m t
         VALUES (D_Temp_Element_M(return_temporal_element_m(str)))
         RETURNING REF(t) INTO TE_m;
         return TE_m;
    end;

    --Constructs a Temporal Element object subtracting a Temporal Element from a Period.
    MEMBER FUNCTION f_sub(p D_Period_M, te REF D_Temp_Element_M) return REF D_Temp_Element_M is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_M;
    TE_m REF D_Temp_Element_M;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         str := D_Period_M_Package.f_sub(b.m_y, b.m_m, e.m_y, e.m_m, p.b.m_y, p.b.m_m, p.e.m_y, p.e.m_m, te1.to_string());
         INSERT INTO temp_elements_m t
         VALUES (D_Temp_Element_M(return_temporal_element_m(str)))
         RETURNING REF(t) INTO TE_m;
         return TE_m;
    end;

    --Returns a Period object representing the intersection between a Period and a Timepoint.
    MEMBER FUNCTION intersects(p D_Period_M, tp D_Timepoint_M) return D_Period_M is
    b_y pls_integer := 0;
    b_m pls_integer := 0;
    e_y pls_integer := 0;
    e_m pls_integer := 0;
    begin
         D_Period_M_Package.intersects(b.m_y, b.m_m, e.m_y, e.m_m, p.b.m_y, p.b.m_m, p.e.m_y, p.e.m_m, tp.m_y, tp.m_m, b_y, b_m, e_y, e_m);
         return D_Period_M(D_Timepoint_M(b_y, b_m), D_Timepoint_M(e_y, e_m));
    end;

    --Returns a Period object representing the intersection between two Periods.
    MEMBER FUNCTION intersects(p1 D_Period_M, p2 D_Period_M) return D_Period_M is
    b_y pls_integer := 0;
    b_m pls_integer := 0;
    e_y pls_integer := 0;
    e_m pls_integer := 0;
    begin
         D_Period_M_Package.intersects(b.m_y, b.m_m, e.m_y, e.m_m, p1.b.m_y, p1.b.m_m, p1.e.m_y, p1.e.m_m, p2.b.m_y, p2.b.m_m, p2.e.m_y, p2.e.m_m, b_y, b_m, e_y, e_m);
         return D_Period_M(D_Timepoint_M(b_y, b_m), D_Timepoint_M(e_y, e_m));
    end;

    --Returns a Temporal Element object representing the intersection between a Period and a Temporal Element.
    MEMBER FUNCTION intersects(p D_Period_M, te REF D_Temp_Element_M) return REF D_Temp_Element_M is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_M;
    TE_m REF D_Temp_Element_M;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         str := D_Period_M_Package.intersects(b.m_y, b.m_m, e.m_y, e.m_m, p.b.m_y, p.b.m_m, p.e.m_y, p.e.m_m, te1.to_string());
         INSERT INTO temp_elements_m t
         VALUES (D_Temp_Element_M(return_temporal_element_m(str)))
         RETURNING REF(t) INTO TE_m;
         return TE_m;
    end;

    --Returns true if the Periods have the same value.
    MEMBER FUNCTION f_eq(p1 D_Period_M, p2 D_Period_M) return pls_integer is
    i pls_integer := D_Period_M_Package.f_eq(b.m_y, b.m_m, e.m_y, e.m_m, p1.b.m_y, p1.b.m_m, p1.e.m_y, p1.e.m_m, p2.b.m_y, p2.b.m_m, p2.e.m_y, p2.e.m_m);
    begin
         return i;
    end;

    --Returns true if the Periods have different value.
    MEMBER FUNCTION f_n_eq(p1 D_Period_M, p2 D_Period_M) return pls_integer is
    i pls_integer := D_Period_M_Package.f_n_eq(b.m_y, b.m_m, e.m_y, e.m_m, p1.b.m_y, p1.b.m_m, p1.e.m_y, p1.e.m_m, p2.b.m_y, p2.b.m_m, p2.e.m_y, p2.e.m_m);
    begin
         return i;
    end;

    --Returns true if the begin Timepoint of the first Period precedes the begin Timepoint of the second Period.
    MEMBER FUNCTION f_l(p1 D_Period_M, p2 D_Period_M) return pls_integer is
    i pls_integer := D_Period_M_Package.f_l(b.m_y, b.m_m, e.m_y, e.m_m, p1.b.m_y, p1.b.m_m, p1.e.m_y, p1.e.m_m, p2.b.m_y, p2.b.m_m, p2.e.m_y, p2.e.m_m);
    begin
         return i;
    end;

    --Returns true if the begin Timepoint of the first Period precedes or is equal to the begin Timepoint of the second Period.
    MEMBER FUNCTION f_l_e(p1 D_Period_M, p2 D_Period_M) return pls_integer is
    i pls_integer := D_Period_M_Package.f_l_e(b.m_y, b.m_m, e.m_y, e.m_m, p1.b.m_y, p1.b.m_m, p1.e.m_y, p1.e.m_m, p2.b.m_y, p2.b.m_m, p2.e.m_y, p2.e.m_m);
    begin
         return i;
    end;

    --Returns true if the begin Timepoint of the first Period follows the begin Timepoint of the second Period.
    MEMBER FUNCTION f_b(p1 D_Period_M, p2 D_Period_M) return pls_integer is
    i pls_integer := D_Period_M_Package.f_b(b.m_y, b.m_m, e.m_y, e.m_m, p1.b.m_y, p1.b.m_m, p1.e.m_y, p1.e.m_m, p2.b.m_y, p2.b.m_m, p2.e.m_y, p2.e.m_m);
    begin
         return i;
    end;

    --Returns true if the begin Timepoint of the first Period follows or is equal to the begin Timepoint of the second Period.
    MEMBER FUNCTION f_b_e(p1 D_Period_M, p2 D_Period_M) return pls_integer is
    i pls_integer := D_Period_M_Package.f_b_e(b.m_y, b.m_m, e.m_y, e.m_m, p1.b.m_y, p1.b.m_m, p1.e.m_y, p1.e.m_m, p2.b.m_y, p2.b.m_m, p2.e.m_y, p2.e.m_m);
    begin
         return i;
    end;

    --Returns true if the Period overlaps the Timepoint.
    MEMBER FUNCTION f_overlaps(p D_Period_M, tp D_Timepoint_M) return pls_integer is
    i pls_integer := D_Period_M_Package.f_overlaps(b.m_y, b.m_m, e.m_y, e.m_m, p.b.m_y, p.b.m_m, p.e.m_y, p.e.m_m, tp.m_y, tp.m_m);
    begin
         return i;
    end;

    --Returns true if the Period precedes the Timepoint.
    MEMBER FUNCTION f_precedes(p D_Period_M, tp D_Timepoint_M) return pls_integer is
    i pls_integer := D_Period_M_Package.f_precedes(b.m_y, b.m_m, e.m_y, e.m_m, p.b.m_y, p.b.m_m, p.e.m_y, p.e.m_m, tp.m_y, tp.m_m);
    begin
         return i;
    end;

    --Returns true if the Period meets the Timepoint.
    MEMBER FUNCTION f_meets(p D_Period_M, tp D_Timepoint_M) return pls_integer is
    i pls_integer := D_Period_M_Package.f_meets(b.m_y, b.m_m, e.m_y, e.m_m, p.b.m_y, p.b.m_m, p.e.m_y, p.e.m_m, tp.m_y, tp.m_m);
    begin
         return i;
    end;

    --Returns true if the Period is equal to Timepoint.
    MEMBER FUNCTION f_equal(p D_Period_M, tp D_Timepoint_M) return pls_integer is
    i pls_integer := D_Period_M_Package.f_equal(b.m_y, b.m_m, e.m_y, e.m_m, p.b.m_y, p.b.m_m, p.e.m_y, p.e.m_m, tp.m_y, tp.m_m);
    begin
         return i;
    end;

    --Returns true if the Period contains the Timepoint.
    MEMBER FUNCTION f_contains(p D_Period_M, tp D_Timepoint_M) return pls_integer is
    i pls_integer := D_Period_M_Package.f_contains(b.m_y, b.m_m, e.m_y, e.m_m, p.b.m_y, p.b.m_m, p.e.m_y, p.e.m_m, tp.m_y, tp.m_m);
    begin
         return i;
    end;

    --Returns true if two Periods overlap.
    MEMBER FUNCTION f_overlaps(p1 D_Period_M, p2 D_Period_M) return pls_integer is
    i pls_integer := D_Period_M_Package.f_overlaps(b.m_y, b.m_m, e.m_y, e.m_m, p1.b.m_y, p1.b.m_m, p1.e.m_y, p1.e.m_m, p2.b.m_y, p2.b.m_m, p2.e.m_y, p2.e.m_m);
    begin
         return i;
    end;

    --Returns true if the first Period precedes the second Period.
    MEMBER FUNCTION f_precedes(p1 D_Period_M, p2 D_Period_M) return pls_integer is
    i pls_integer := D_Period_M_Package.f_precedes(b.m_y, b.m_m, e.m_y, e.m_m, p1.b.m_y, p1.b.m_m, p1.e.m_y, p1.e.m_m, p2.b.m_y, p2.b.m_m, p2.e.m_y, p2.e.m_m);
    begin
         return i;
    end;

    --Returns true if the first Period meets the second Period.
    MEMBER FUNCTION f_meets(p1 D_Period_M, p2 D_Period_M) return pls_integer is
    i pls_integer := D_Period_M_Package.f_meets(b.m_y, b.m_m, e.m_y, e.m_m, p1.b.m_y, p1.b.m_m, p1.e.m_y, p1.e.m_m, p2.b.m_y, p2.b.m_m, p2.e.m_y, p2.e.m_m);
    begin
         return i;
    end;

    --Returns true if the first Period is equal to the second Period.
    MEMBER FUNCTION f_equal(p1 D_Period_M, p2 D_Period_M) return pls_integer is
    i pls_integer := D_Period_M_Package.f_equal(b.m_y, b.m_m, e.m_y, e.m_m, p1.b.m_y, p1.b.m_m, p1.e.m_y, p1.e.m_m, p2.b.m_y, p2.b.m_m, p2.e.m_y, p2.e.m_m);
    begin
         return i;
    end;

    --Returns true if the first Period contains the second Period.
    MEMBER FUNCTION f_contains(p1 D_Period_M, p2 D_Period_M) return pls_integer is
    i pls_integer := D_Period_M_Package.f_contains(b.m_y, b.m_m, e.m_y, e.m_m, p1.b.m_y, p1.b.m_m, p1.e.m_y, p1.e.m_m, p2.b.m_y, p2.b.m_m, p2.e.m_y, p2.e.m_m);
    begin
         return i;
    end;

    --Returns true if the Period overlaps the Temporal Element.
    MEMBER FUNCTION f_overlaps(p D_Period_M, te REF D_Temp_Element_M) return pls_integer is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_M;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         return D_Period_M_Package.f_overlaps(b.m_y, b.m_m, e.m_y, e.m_m, p.b.m_y, p.b.m_m, p.e.m_y, p.e.m_m, te1.to_string());
    end;

    --Returns true if the Period precedes the Temporal Element.
    MEMBER FUNCTION f_precedes(p D_Period_M, te REF D_Temp_Element_M) return pls_integer is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_M;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         return D_Period_M_Package.f_precedes(b.m_y, b.m_m, e.m_y, e.m_m, p.b.m_y, p.b.m_m, p.e.m_y, p.e.m_m, te1.to_string());
    end;

    --Returns true if the Period meets the Temporal Element.
    MEMBER FUNCTION f_meets(p D_Period_M, te REF D_Temp_Element_M) return pls_integer is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_M;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         return D_Period_M_Package.f_meets(b.m_y, b.m_m, e.m_y, e.m_m, p.b.m_y, p.b.m_m, p.e.m_y, p.e.m_m, te1.to_string());
    end;

    --Returns true if the Period is equal to the Temporal Element.
    MEMBER FUNCTION f_equal(p D_Period_M, te REF D_Temp_Element_M) return pls_integer is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_M;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         return D_Period_M_Package.f_equal(b.m_y, b.m_m, e.m_y, e.m_m, p.b.m_y, p.b.m_m, p.e.m_y, p.e.m_m, te1.to_string());
    end;

    --Returns true if the Timepoint contains the Temporal Element.
    MEMBER FUNCTION f_contains(p D_Period_M, te REF D_Temp_Element_M) return pls_integer is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_M;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         return D_Period_M_Package.f_contains(b.m_y, b.m_m, e.m_y, e.m_m, p.b.m_y, p.b.m_m, p.e.m_y, p.e.m_m, te1.to_string());
    end;

end;
/

-- Type body D_PERIOD_D

CREATE OR REPLACE
type body D_Period_D is

    --Changes the status of the Timepoint object
    MEMBER PROCEDURE change_status(special_value pls_integer) is
    begin
    -- b.m_y, b.m_m, b.m_d, e.m_y, e.m_m, e.m_d IN OUT argument
         D_Period_D_Package.change_status(b.m_y, b.m_m, b.m_d, e.m_y, e.m_m, e.m_d, special_value);
    end;

    --Returns the begin Timepoint of the Period object.
    MEMBER FUNCTION f_begin return D_Timepoint_D is
    b_y pls_integer := 0;
    b_m pls_integer := 0;
    b_d pls_integer := 0;
    begin
         D_Period_D_Package.f_begin(b.m_y, b.m_m, b.m_d, e.m_y, e.m_m, e.m_d, b_y, b_m, b_d);
         return D_Timepoint_D(b_y, b_m, b_d);
    end;

    --Returns the end Timepoint of the Period object.
    MEMBER FUNCTION f_end return D_Timepoint_D is
    e_y pls_integer := 0;
    e_m pls_integer := 0;
    e_d pls_integer := 0;
    begin
         D_Period_D_Package.f_end(b.m_y, b.m_m, b.m_d, e.m_y, e.m_m, e.m_d, e_y, e_m, e_d);
         return D_Timepoint_D(e_y, e_m, e_d);
    end;

    --Sets the begin Timepoint of the Period object.
    MEMBER PROCEDURE set_begin(tp D_Timepoint_D) is
    -- b.m_y, b.m_m, b.m_d, e.m_y, e.m_m, e.m_d IN OUT argument
    begin
         D_Period_D_Package.set_begin(b.m_y, b.m_m, b.m_d, e.m_y, e.m_m, e.m_d, tp.m_y, tp.m_m, tp.m_d);
    end;

    --Sets the end Timepoint of the Period object.
    MEMBER PROCEDURE set_end(tp D_Timepoint_D) is
    -- b.m_y, b.m_m, b.m_d, e.m_y, e.m_m, e.m_d IN OUT argument
    begin
         D_Period_D_Package.set_end(b.m_y, b.m_m, b.m_d, e.m_y, e.m_m, e.m_d, tp.m_y, tp.m_m, tp.m_d);
    end;

    --Returns the Granularity of the Period object.
    MEMBER FUNCTION get_granularity return pls_integer is
    g pls_integer := D_Period_D_Package.get_granularity(b.m_y, b.m_m, b.m_d, e.m_y, e.m_m, e.m_d);
    begin
         return g;
    end;

    --Returns an Interval object representing the duration of the Period.
    MEMBER FUNCTION duration return D_Interval is
    i_Value double precision := 0;
    begin
        D_Period_D_Package.duration(b.m_y, b.m_m, b.m_d, e.m_y, e.m_m, e.m_d, i_Value);
        return D_Interval(i_Value);
    end;

    --Creates a string for the Timepoint object in ISO 8601 format.
    MEMBER FUNCTION to_string return Varchar2 is
    s Varchar2(50) := D_Period_D_Package.to_string(b.m_y, b.m_m, b.m_d, e.m_y, e.m_m, e.m_d);
    begin
         return s;
    end;

    --Converts the Period object to a Temporal Element object.
    MEMBER FUNCTION to_temporal_element return REF D_Temp_Element_D is
    str Varchar2(32766) := '';
    TE_d REF D_Temp_Element_D;
    begin
         str := D_Period_D_Package.to_temporal_element(b.m_y, b.m_m, b.m_d, e.m_y, e.m_m, e.m_d);
         INSERT INTO temp_elements_d t
         VALUES (D_Temp_Element_D(return_temporal_element_d(str)))
         RETURNING REF(t) INTO TE_d;
         return TE_d;
    end;

    --Assigns the value of another Timepoint to the Timepoint object.
    MEMBER PROCEDURE f_ass_period(p D_Period_D) is
    -- b.m_y, b.m_m, b.m_d, e.m_y, e.m_m, e.m_d IN OUT argument
    begin
        D_Period_D_Package.f_ass_period(b.m_y, b.m_m, b.m_d, e.m_y, e.m_m, e.m_d, p.b.m_y, p.b.m_m, p.b.m_d, p.e.m_y, p.e.m_m, p.e.m_d);
    end;

    --Adds an Interval to the Timepoint object.
    MEMBER PROCEDURE f_add_interval(i D_Interval) is
    -- b.m_y, b.m_m, b.m_d, b.m_m, e.m_y, e.m_m, e.m_d IN OUT argument
    begin
         D_Period_D_Package.f_add_interval(b.m_y, b.m_m, b.m_d, e.m_y, e.m_m, e.m_d, i.m_Value);
    end;

    --Subtracts an Interval from the Timepoint object.
    MEMBER PROCEDURE f_sub_interval(i D_Interval) is
    -- b.m_y, b.m_m, b.m_d, e.m_y, e.m_m, e.m_d IN OUT argument
    begin
         D_Period_D_Package.f_sub_interval(b.m_y, b.m_m, b.m_d, e.m_y, e.m_m, e.m_d, i.m_Value);
    end;

    --Adds the interval to begin and end Timepoints of the Period object.
    MEMBER FUNCTION f_add(p D_Period_D, i D_Interval) return D_Period_D is
    b_y pls_integer := 0;
    b_m pls_integer := 0;
    b_d pls_integer := 0;
    e_y pls_integer := 0;
    e_m pls_integer := 0;
    e_d pls_integer := 0;
    begin
         D_Period_D_Package.f_add(b.m_y, b.m_m, b.m_d, e.m_y, e.m_m, e.m_d, p.b.m_y, p.b.m_m, p.b.m_d, p.e.m_y, p.e.m_m, p.e.m_d, i.m_Value, b_y, b_m, b_d, e_y, e_m, e_d);
         return D_Period_D(D_Timepoint_D(b_y, b_m, b_d), D_Timepoint_D(e_y, e_m, e_d));
    end;

    --Subtracts the interval to begin and end Timepoints of the Period object.
    MEMBER FUNCTION f_sub(p D_Period_D, i D_Interval) return D_Period_D  is
    b_y pls_integer := 0;
    b_m pls_integer := 0;
    b_d pls_integer := 0;
    e_y pls_integer := 0;
    e_m pls_integer := 0;
    e_d pls_integer := 0;
    begin
         D_Period_D_Package.f_sub(b.m_y, b.m_m, b.m_d, e.m_y, e.m_m, e.m_d, p.b.m_y, p.b.m_m, p.b.m_d, p.e.m_y, p.e.m_m, p.e.m_d, i.m_Value, b_y, b_m, b_d, e_y, e_m, e_d);
         return D_Period_D(D_Timepoint_D(b_y, b_m, b_d), D_Timepoint_D(e_y, e_m, e_d));
    end;

    --Constructs a Temporal Element object adding two Periods.
    MEMBER FUNCTION f_add(p1 D_Period_D, p2 D_Period_D) return REF D_Temp_Element_D is
    str Varchar2(32766) := '';
    TE_d REF D_Temp_Element_D;
    begin
         str := D_Period_D_Package.f_add(b.m_y, b.m_m, b.m_d, e.m_y, e.m_m, e.m_d, p1.b.m_y, p1.b.m_m, p1.b.m_d, p1.e.m_y, p1.e.m_m, p1.e.m_d, p2.b.m_y, p2.b.m_m, p2.b.m_d, p2.e.m_y, p2.e.m_m, p2.e.m_d);
         INSERT INTO temp_elements_d t
         VALUES (D_Temp_Element_D(return_temporal_element_d(str)))
         RETURNING REF(t) INTO TE_d;
         return TE_d;
    end;

    --Constructs a Temporal Element object subtracting two Periods.
    MEMBER FUNCTION f_sub(p1 D_Period_D, p2 D_Period_D) return REF D_Temp_Element_D is
    str Varchar2(32766) := '';
    TE_d REF D_Temp_Element_D;
    begin
         str := D_Period_D_Package.f_sub(b.m_y, b.m_m, b.m_d, e.m_y, e.m_m, e.m_d, p1.b.m_y, p1.b.m_m, p1.b.m_d, p1.e.m_y, p1.e.m_m, p1.e.m_d, p2.b.m_y, p2.b.m_m, p2.b.m_d, p2.e.m_y, p2.e.m_m, p2.e.m_d);
         INSERT INTO temp_elements_d t
         VALUES (D_Temp_Element_D(return_temporal_element_d(str)))
         RETURNING REF(t) INTO TE_d;
         return TE_d;
    end;

    --Constructs a Temporal Element object adding a Period to a Temporal Element.
    MEMBER FUNCTION f_add(p D_Period_D, te REF D_Temp_Element_D) return REF D_Temp_Element_D is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_D;
    TE_d REF D_Temp_Element_D;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         str := D_Period_D_Package.f_add(b.m_y, b.m_m, b.m_d, e.m_y, e.m_m, e.m_d, p.b.m_y, p.b.m_m, p.b.m_d, p.e.m_y, p.e.m_m, p.e.m_d, te1.to_string());
         INSERT INTO temp_elements_d t
         VALUES (D_Temp_Element_D(return_temporal_element_d(str)))
         RETURNING REF(t) INTO TE_d;
         return TE_d;
    end;

    --Constructs a Temporal Element object subtracting a Temporal Element from a Period.
    MEMBER FUNCTION f_sub(p D_Period_D, te REF D_Temp_Element_D) return REF D_Temp_Element_D is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_D;
    TE_d REF D_Temp_Element_D;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         str := D_Period_D_Package.f_sub(b.m_y, b.m_m, b.m_d, e.m_y, e.m_m, e.m_d, p.b.m_y, p.b.m_m, p.b.m_d, p.e.m_y, p.e.m_m, p.e.m_d, te1.to_string());
         INSERT INTO temp_elements_d t
         VALUES (D_Temp_Element_D(return_temporal_element_d(str)))
         RETURNING REF(t) INTO TE_d;
         return TE_d;
    end;

    --Returns a Period object representing the intersection between a Period and a Timepoint.
    MEMBER FUNCTION intersects(p D_Period_D, tp D_Timepoint_D) return D_Period_D is
    b_y pls_integer := 0;
    b_m pls_integer := 0;
    b_d pls_integer := 0;
    e_y pls_integer := 0;
    e_m pls_integer := 0;
    e_d pls_integer := 0;
    begin
         D_Period_D_Package.intersects(b.m_y, b.m_m, b.m_d, e.m_y, e.m_m, e.m_d, p.b.m_y, p.b.m_m, p.b.m_d, p.e.m_y, p.e.m_m, p.e.m_d, tp.m_y, tp.m_m, tp.m_d, b_y, b_m, b_d, e_y, e_m, e_d);
         return D_Period_D(D_Timepoint_D(b_y, b_m, b_d), D_Timepoint_D(e_y, e_m, e_d));
    end;

    --Returns a Period object representing the intersection between two Periods.
    MEMBER FUNCTION intersects(p1 D_Period_D, p2 D_Period_D) return D_Period_D is
    b_y pls_integer := 0;
    b_m pls_integer := 0;
    b_d pls_integer := 0;
    e_y pls_integer := 0;
    e_m pls_integer := 0;
    e_d pls_integer := 0;
    begin
         D_Period_D_Package.intersects(b.m_y, b.m_m, b.m_d, e.m_y, e.m_m, e.m_d, p1.b.m_y, p1.b.m_m, p1.b.m_d, p1.e.m_y, p1.e.m_m, p1.e.m_d, p2.b.m_y, p2.b.m_m, p2.b.m_d, p2.e.m_y, p2.e.m_m, p2.e.m_d, b_y, b_m, b_d, e_y, e_m, e_d);
         return D_Period_D(D_Timepoint_D(b_y, b_m, b_d), D_Timepoint_D(e_y, e_m, e_d));
    end;

    --Returns a Temporal Element object representing the intersection between a Period and a Temporal Element.
    MEMBER FUNCTION intersects(p D_Period_D, te REF D_Temp_Element_D) return REF D_Temp_Element_D is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_D;
    TE_d REF D_Temp_Element_D;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         str := D_Period_D_Package.intersects(b.m_y, b.m_m, b.m_d, e.m_y, e.m_m, e.m_d, p.b.m_y, p.b.m_m, p.b.m_d, p.e.m_y, p.e.m_m, p.e.m_d, te1.to_string());
         INSERT INTO temp_elements_d t
         VALUES (D_Temp_Element_D(return_temporal_element_d(str)))
         RETURNING REF(t) INTO TE_d;
         return TE_d;
    end;

    --Returns true if the Periods have the same value.
    MEMBER FUNCTION f_eq(p1 D_Period_D, p2 D_Period_D) return pls_integer is
    i pls_integer := D_Period_D_Package.f_eq(b.m_y, b.m_m, b.m_d, e.m_y, e.m_m, e.m_d, p1.b.m_y, p1.b.m_m, p1.b.m_d, p1.e.m_y, p1.e.m_m, p1.e.m_d, p2.b.m_y, p2.b.m_m, p2.b.m_d, p2.e.m_y, p2.e.m_m, p2.e.m_d);
    begin
         return i;
    end;

    --Returns true if the Periods have different value.
    MEMBER FUNCTION f_n_eq(p1 D_Period_D, p2 D_Period_D) return pls_integer is
    i pls_integer := D_Period_D_Package.f_n_eq(b.m_y, b.m_m, b.m_d, e.m_y, e.m_m, e.m_d, p1.b.m_y, p1.b.m_m, p1.b.m_d, p1.e.m_y, p1.e.m_m, p1.e.m_d, p2.b.m_y, p2.b.m_m, p2.b.m_d, p2.e.m_y, p2.e.m_m, p2.e.m_d);
    begin
         return i;
    end;

    --Returns true if the begin Timepoint of the first Period precedes the begin Timepoint of the second Period.
    MEMBER FUNCTION f_l(p1 D_Period_D, p2 D_Period_D) return pls_integer is
    i pls_integer := D_Period_D_Package.f_l(b.m_y, b.m_m, b.m_d, e.m_y, e.m_m, e.m_d, p1.b.m_y, p1.b.m_m, p1.b.m_d, p1.e.m_y, p1.e.m_m, p1.e.m_d, p2.b.m_y, p2.b.m_m, p2.b.m_d, p2.e.m_y, p2.e.m_m, p2.e.m_d);
    begin
         return i;
    end;

    --Returns true if the begin Timepoint of the first Period precedes or is equal to the begin Timepoint of the second Period.
    MEMBER FUNCTION f_l_e(p1 D_Period_D, p2 D_Period_D) return pls_integer is
    i pls_integer := D_Period_D_Package.f_l_e(b.m_y, b.m_m, b.m_d, e.m_y, e.m_m, e.m_d, p1.b.m_y, p1.b.m_m, p1.b.m_d, p1.e.m_y, p1.e.m_m, p1.e.m_d, p2.b.m_y, p2.b.m_m, p2.b.m_d, p2.e.m_y, p2.e.m_m, p2.e.m_d);
    begin
         return i;
    end;

    --Returns true if the begin Timepoint of the first Period follows the begin Timepoint of the second Period.
    MEMBER FUNCTION f_b(p1 D_Period_D, p2 D_Period_D) return pls_integer is
    i pls_integer := D_Period_D_Package.f_b(b.m_y, b.m_m, b.m_d, e.m_y, e.m_m, e.m_d, p1.b.m_y, p1.b.m_m, p1.b.m_d, p1.e.m_y, p1.e.m_m, p1.e.m_d, p2.b.m_y, p2.b.m_m, p2.b.m_d, p2.e.m_y, p2.e.m_m, p2.e.m_d);
    begin
         return i;
    end;

    --Returns true if the begin Timepoint of the first Period follows or is equal to the begin Timepoint of the second Period.
    MEMBER FUNCTION f_b_e(p1 D_Period_D, p2 D_Period_D) return pls_integer is
    i pls_integer := D_Period_D_Package.f_b_e(b.m_y, b.m_m, b.m_d, e.m_y, e.m_m, e.m_d, p1.b.m_y, p1.b.m_m, p1.b.m_d, p1.e.m_y, p1.e.m_m, p1.e.m_d, p2.b.m_y, p2.b.m_m, p2.b.m_d, p2.e.m_y, p2.e.m_m, p2.e.m_d);
    begin
         return i;
    end;

    --Returns true if the Period overlaps the Timepoint.
    MEMBER FUNCTION f_overlaps(p D_Period_D, tp D_Timepoint_D) return pls_integer is
    i pls_integer := D_Period_D_Package.f_overlaps(b.m_y, b.m_m, b.m_d, e.m_y, e.m_m, e.m_d, p.b.m_y, p.b.m_m, p.b.m_d, p.e.m_y, p.e.m_m, p.e.m_d, tp.m_y, tp.m_m, tp.m_d);
    begin
         return i;
    end;

    --Returns true if the Period precedes the Timepoint.
    MEMBER FUNCTION f_precedes(p D_Period_D, tp D_Timepoint_D) return pls_integer is
    i pls_integer := D_Period_D_Package.f_precedes(b.m_y, b.m_m, b.m_d, e.m_y, e.m_m, e.m_d, p.b.m_y, p.b.m_m, p.b.m_d, p.e.m_y, p.e.m_m, p.e.m_d, tp.m_y, tp.m_m, tp.m_d);
    begin
         return i;
    end;

    --Returns true if the Period meets the Timepoint.
    MEMBER FUNCTION f_meets(p D_Period_D, tp D_Timepoint_D) return pls_integer is
    i pls_integer := D_Period_D_Package.f_meets(b.m_y, b.m_m, b.m_d, e.m_y, e.m_m, e.m_d, p.b.m_y, p.b.m_m, p.b.m_d, p.e.m_y, p.e.m_m, p.e.m_d, tp.m_y, tp.m_m, tp.m_d);
    begin
         return i;
    end;

    --Returns true if the Period is equal to Timepoint.
    MEMBER FUNCTION f_equal(p D_Period_D, tp D_Timepoint_D) return pls_integer is
    i pls_integer := D_Period_D_Package.f_equal(b.m_y, b.m_m, b.m_d, e.m_y, e.m_m, e.m_d, p.b.m_y, p.b.m_m, p.b.m_d, p.e.m_y, p.e.m_m, p.e.m_d, tp.m_y, tp.m_m, tp.m_d);
    begin
         return i;
    end;

    --Returns true if the Period contains the Timepoint.
    MEMBER FUNCTION f_contains(p D_Period_D, tp D_Timepoint_D) return pls_integer is
    i pls_integer := D_Period_D_Package.f_contains(b.m_y, b.m_m, b.m_d, e.m_y, e.m_m, e.m_d, p.b.m_y, p.b.m_m, p.b.m_d, p.e.m_y, p.e.m_m, p.e.m_d, tp.m_y, tp.m_m, tp.m_d);
    begin
         return i;
    end;

    --Returns true if two Periods overlap.
    MEMBER FUNCTION f_overlaps(p1 D_Period_D, p2 D_Period_D) return pls_integer is
    i pls_integer := D_Period_D_Package.f_overlaps(b.m_y, b.m_m, b.m_d, e.m_y, e.m_m, e.m_d, p1.b.m_y, p1.b.m_m, p1.b.m_d, p1.e.m_y, p1.e.m_m, p1.e.m_d, p2.b.m_y, p2.b.m_m, p2.b.m_d, p2.e.m_y, p2.e.m_m, p2.e.m_d);
    begin
         return i;
    end;

    --Returns true if the first Period precedes the second Period.
    MEMBER FUNCTION f_precedes(p1 D_Period_D, p2 D_Period_D) return pls_integer is
    i pls_integer := D_Period_D_Package.f_precedes(b.m_y, b.m_m, b.m_d, e.m_y, e.m_m, e.m_d, p1.b.m_y, p1.b.m_m, p1.b.m_d, p1.e.m_y, p1.e.m_m, p1.e.m_d, p2.b.m_y, p2.b.m_m, p2.b.m_d, p2.e.m_y, p2.e.m_m, p2.e.m_d);
    begin
         return i;
    end;

    --Returns true if the first Period meets the second Period.
    MEMBER FUNCTION f_meets(p1 D_Period_D, p2 D_Period_D) return pls_integer is
    i pls_integer := D_Period_D_Package.f_meets(b.m_y, b.m_m, b.m_d, e.m_y, e.m_m, e.m_d, p1.b.m_y, p1.b.m_m, p1.b.m_d, p1.e.m_y, p1.e.m_m, p1.e.m_d, p2.b.m_y, p2.b.m_m, p2.b.m_d, p2.e.m_y, p2.e.m_m, p2.e.m_d);
    begin
         return i;
    end;

    --Returns true if the first Period is equal to the second Period.
    MEMBER FUNCTION f_equal(p1 D_Period_D, p2 D_Period_D) return pls_integer is
    i pls_integer := D_Period_D_Package.f_equal(b.m_y, b.m_m, b.m_d, e.m_y, e.m_m, e.m_d, p1.b.m_y, p1.b.m_m, p1.b.m_d, p1.e.m_y, p1.e.m_m, p1.e.m_d, p2.b.m_y, p2.b.m_m, p2.b.m_d, p2.e.m_y, p2.e.m_m, p2.e.m_d);
    begin
         return i;
    end;

    --Returns true if the first Period contains the second Period.
    MEMBER FUNCTION f_contains(p1 D_Period_D, p2 D_Period_D) return pls_integer is
    i pls_integer := D_Period_D_Package.f_contains(b.m_y, b.m_m, b.m_d, e.m_y, e.m_m, e.m_d, p1.b.m_y, p1.b.m_m, p1.b.m_d, p1.e.m_y, p1.e.m_m, p1.e.m_d, p2.b.m_y, p2.b.m_m, p2.b.m_d, p2.e.m_y, p2.e.m_m, p2.e.m_d);
    begin
         return i;
    end;

    --Returns true if the Period overlaps the Temporal Element.
    MEMBER FUNCTION f_overlaps(p D_Period_D, te REF D_Temp_Element_D) return pls_integer is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_D;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         return D_Period_D_Package.f_overlaps(b.m_y, b.m_m, b.m_d, e.m_y, e.m_m, e.m_d, p.b.m_y, p.b.m_m, p.b.m_d, p.e.m_y, p.e.m_m, p.e.m_d, te1.to_string());
    end;

    --Returns true if the Period precedes the Temporal Element.
    MEMBER FUNCTION f_precedes(p D_Period_D, te REF D_Temp_Element_D) return pls_integer is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_D;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         return D_Period_D_Package.f_precedes(b.m_y, b.m_m, b.m_d, e.m_y, e.m_m, e.m_d, p.b.m_y, p.b.m_m, p.b.m_d, p.e.m_y, p.e.m_m, p.e.m_d, te1.to_string());
    end;

    --Returns true if the Period meets the Temporal Element.
    MEMBER FUNCTION f_meets(p D_Period_D, te REF D_Temp_Element_D) return pls_integer is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_D;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         return D_Period_D_Package.f_meets(b.m_y, b.m_m, b.m_d, e.m_y, e.m_m, e.m_d, p.b.m_y, p.b.m_m, p.b.m_d, p.e.m_y, p.e.m_m, p.e.m_d, te1.to_string());
    end;

    --Returns true if the Period is equal to the Temporal Element.
    MEMBER FUNCTION f_equal(p D_Period_D, te REF D_Temp_Element_D) return pls_integer is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_D;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         return D_Period_D_Package.f_equal(b.m_y, b.m_m, b.m_d, e.m_y, e.m_m, e.m_d, p.b.m_y, p.b.m_m, p.b.m_d, p.e.m_y, p.e.m_m, p.e.m_d, te1.to_string());
    end;

    --Returns true if the Timepoint contains the Temporal Element.
    MEMBER FUNCTION f_contains(p D_Period_D, te REF D_Temp_Element_D) return pls_integer is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_D;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         return D_Period_D_Package.f_contains(b.m_y, b.m_m, b.m_d, e.m_y, e.m_m, e.m_d, p.b.m_y, p.b.m_m, p.b.m_d, p.e.m_y, p.e.m_m, p.e.m_d, te1.to_string());
    end;

end;
/

-- Type body D_PERIOD_H

CREATE OR REPLACE
type body D_Period_H is

    --Changes the status of the Timepoint object
    MEMBER PROCEDURE change_status(special_value pls_integer) is
    begin
    -- b.m_y, b.m_m, b.m_d, b.m_h, e.m_y, e.m_m, e.m_d, e.m_h IN OUT argument
         D_Period_H_Package.change_status(b.m_y, b.m_m, b.m_d, b.m_h, e.m_y, e.m_m, e.m_d, e.m_h, special_value);
    end;

    --Returns the begin Timepoint of the Period object.
    MEMBER FUNCTION f_begin return D_Timepoint_H is
    b_y pls_integer := 0;
    b_m pls_integer := 0;
    b_d pls_integer := 0;
    b_h pls_integer := 0;
    begin
         D_Period_H_Package.f_begin(b.m_y, b.m_m, b.m_d, b.m_h, e.m_y, e.m_m, e.m_d, e.m_h, b_y, b_m, b_d, b_h);
         return D_Timepoint_H(b_y, b_m, b_d, b_h);
    end;

    --Returns the end Timepoint of the Period object.
    MEMBER FUNCTION f_end return D_Timepoint_H is
    e_y pls_integer := 0;
    e_m pls_integer := 0;
    e_d pls_integer := 0;
    e_h pls_integer := 0;
    begin
         D_Period_H_Package.f_end(b.m_y, b.m_m, b.m_d, b.m_h, e.m_y, e.m_m, e.m_d, e.m_h, e_y, e_m, e_d, e_h);
         return D_Timepoint_H(e_y, e_m, e_d, e_h);
    end;

    --Sets the begin Timepoint of the Period object.
    MEMBER PROCEDURE set_begin(tp D_Timepoint_H) is
    -- b.m_y, b.m_m, b.m_d, b.m_h, e.m_y, e.m_m, e.m_d, e.m_h IN OUT argument
    begin
         D_Period_H_Package.set_begin(b.m_y, b.m_m, b.m_d, b.m_h, e.m_y, e.m_m, e.m_d, e.m_h, tp.m_y, tp.m_m, tp.m_d, tp.m_h);
    end;

    --Sets the end Timepoint of the Period object.
    MEMBER PROCEDURE set_end(tp D_Timepoint_H) is
    -- b.m_y, b.m_m, b.m_d, b.m_h, e.m_y, e.m_m, e.m_d, e.m_h IN OUT argument
    begin
         D_Period_H_Package.set_end(b.m_y, b.m_m, b.m_d, b.m_h, e.m_y, e.m_m, e.m_d, e.m_h, tp.m_y, tp.m_m, tp.m_d, tp.m_h);
    end;

    --Returns the Granularity of the Period object.
    MEMBER FUNCTION get_granularity return pls_integer is
    g pls_integer := D_Period_H_Package.get_granularity(b.m_y, b.m_m, b.m_d, b.m_h, e.m_y, e.m_m, e.m_d, e.m_h);
    begin
         return g;
    end;

    --Returns an Interval object representing the duration of the Period.
    MEMBER FUNCTION duration return D_Interval is
    i_Value double precision := 0;
    begin
        D_Period_H_Package.duration(b.m_y, b.m_m, b.m_d, b.m_h, e.m_y, e.m_m, e.m_d, e.m_h, i_Value);
        return D_Interval(i_Value);
    end;

    --Creates a string for the Timepoint object in ISO 8601 format.
    MEMBER FUNCTION to_string return Varchar2 is
    s Varchar2(50) := D_Period_H_Package.to_string(b.m_y, b.m_m, b.m_d, b.m_h, e.m_y, e.m_m, e.m_d, e.m_h);
    begin
         return s;
    end;

    --Converts the Period object to a Temporal Element object.
    MEMBER FUNCTION to_temporal_element return REF D_Temp_Element_H is
    str Varchar2(32766) := '';
    TE_h REF D_Temp_Element_H;
    begin
         str := D_Period_H_Package.to_temporal_element(b.m_y, b.m_m, b.m_d, b.m_h, e.m_y, e.m_m, e.m_d, e.m_h);
         INSERT INTO temp_elements_h t
         VALUES (D_Temp_Element_H(return_temporal_element_h(str)))
         RETURNING REF(t) INTO TE_h;
         return TE_h;
    end;

    --Assigns the value of another Timepoint to the Timepoint object.
    MEMBER PROCEDURE f_ass_period(p D_Period_H) is
    -- b.m_y, b.m_m, b.m_d, b.m_h, e.m_y, e.m_m, e.m_d, e.m_h IN OUT argument
    begin
        D_Period_H_Package.f_ass_period(b.m_y, b.m_m, b.m_d, b.m_h, e.m_y, e.m_m, e.m_d, e.m_h, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h);
    end;

    --Adds an Interval to the Timepoint object.
    MEMBER PROCEDURE f_add_interval(i D_Interval) is
    -- b.m_y, b.m_m, b.m_d, b.m_h, b.m_m, e.m_y, e.m_m, e.m_d, e.m_h IN OUT argument
    begin
         D_Period_H_Package.f_add_interval(b.m_y, b.m_m, b.m_d, b.m_h, e.m_y, e.m_m, e.m_d, e.m_h, i.m_Value);
    end;

    --Subtracts an Interval from the Timepoint object.
    MEMBER PROCEDURE f_sub_interval(i D_Interval) is
    -- b.m_y, b.m_m, b.m_d, b.m_h, e.m_y, e.m_m, e.m_d, e.m_h IN OUT argument
    begin
         D_Period_H_Package.f_sub_interval(b.m_y, b.m_m, b.m_d, b.m_h, e.m_y, e.m_m, e.m_d, e.m_h, i.m_Value);
    end;

    --Adds the interval to begin and end Timepoints of the Period object.
    MEMBER FUNCTION f_add(p D_Period_H, i D_Interval) return D_Period_H is
    b_y pls_integer := 0;
    b_m pls_integer := 0;
    b_d pls_integer := 0;
    b_h pls_integer := 0;
    e_y pls_integer := 0;
    e_m pls_integer := 0;
    e_d pls_integer := 0;
    e_h pls_integer := 0;
    begin
         D_Period_H_Package.f_add(b.m_y, b.m_m, b.m_d, b.m_h, e.m_y, e.m_m, e.m_d, e.m_h, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, i.m_Value, b_y, b_m, b_d, b_h, e_y, e_m, e_d, e_h);
         return D_Period_H(D_Timepoint_H(b_y, b_m, b_d, b_h), D_Timepoint_H(e_y, e_m, e_d, e_h));
    end;

    --Subtracts the interval to begin and end Timepoints of the Period object.
    MEMBER FUNCTION f_sub(p D_Period_H, i D_Interval) return D_Period_H  is
    b_y pls_integer := 0;
    b_m pls_integer := 0;
    b_d pls_integer := 0;
    b_h pls_integer := 0;
    e_y pls_integer := 0;
    e_m pls_integer := 0;
    e_d pls_integer := 0;
    e_h pls_integer := 0;
    begin
         D_Period_H_Package.f_sub(b.m_y, b.m_m, b.m_d, b.m_h, e.m_y, e.m_m, e.m_d, e.m_h, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, i.m_Value, b_y, b_m, b_d, b_h, e_y, e_m, e_d, e_h);
         return D_Period_H(D_Timepoint_H(b_y, b_m, b_d, b_h), D_Timepoint_H(e_y, e_m, e_d, e_h));
    end;

    --Constructs a Temporal Element object adding two Periods.
    MEMBER FUNCTION f_add(p1 D_Period_H, p2 D_Period_H) return REF D_Temp_Element_H is
    str Varchar2(32766) := '';
    TE_h REF D_Temp_Element_H;
    begin
         str := D_Period_H_Package.f_add(b.m_y, b.m_m, b.m_d, b.m_h, e.m_y, e.m_m, e.m_d, e.m_h, p1.b.m_y, p1.b.m_m, p1.b.m_d, p1.b.m_h, p1.e.m_y, p1.e.m_m, p1.e.m_d, p1.e.m_h, p2.b.m_y, p2.b.m_m, p2.b.m_d, p2.b.m_h, p2.e.m_y, p2.e.m_m, p2.e.m_d, p2.e.m_h);
         INSERT INTO temp_elements_h t
         VALUES (D_Temp_Element_H(return_temporal_element_h(str)))
         RETURNING REF(t) INTO TE_h;
         return TE_h;
    end;

    --Constructs a Temporal Element object subtracting two Periods.
    MEMBER FUNCTION f_sub(p1 D_Period_H, p2 D_Period_H) return REF D_Temp_Element_H is
    str Varchar2(32766) := '';
    TE_h REF D_Temp_Element_H;
    begin
         str := D_Period_H_Package.f_sub(b.m_y, b.m_m, b.m_d, b.m_h, e.m_y, e.m_m, e.m_d, e.m_h, p1.b.m_y, p1.b.m_m, p1.b.m_d, p1.b.m_h, p1.e.m_y, p1.e.m_m, p1.e.m_d, p1.e.m_h, p2.b.m_y, p2.b.m_m, p2.b.m_d, p2.b.m_h, p2.e.m_y, p2.e.m_m, p2.e.m_d, p2.e.m_h);
         INSERT INTO temp_elements_h t
         VALUES (D_Temp_Element_H(return_temporal_element_h(str)))
         RETURNING REF(t) INTO TE_h;
         return TE_h;
    end;

    --Constructs a Temporal Element object adding a Period to a Temporal Element.
    MEMBER FUNCTION f_add(p D_Period_H, te REF D_Temp_Element_H) return REF D_Temp_Element_H is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_H;
    TE_h REF D_Temp_Element_H;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         str := D_Period_H_Package.f_add(b.m_y, b.m_m, b.m_d, b.m_h, e.m_y, e.m_m, e.m_d, e.m_h, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, te1.to_string());
         INSERT INTO temp_elements_h t
         VALUES (D_Temp_Element_H(return_temporal_element_h(str)))
         RETURNING REF(t) INTO TE_h;
         return TE_h;
    end;

    --Constructs a Temporal Element object subtracting a Temporal Element from a Period.
    MEMBER FUNCTION f_sub(p D_Period_H, te REF D_Temp_Element_H) return REF D_Temp_Element_H is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_H;
    TE_h REF D_Temp_Element_H;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         str := D_Period_H_Package.f_sub(b.m_y, b.m_m, b.m_d, b.m_h, e.m_y, e.m_m, e.m_d, e.m_h, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, te1.to_string());
         INSERT INTO temp_elements_h t
         VALUES (D_Temp_Element_H(return_temporal_element_h(str)))
         RETURNING REF(t) INTO TE_h;
         return TE_h;
    end;

    --Returns a Period object representing the intersection between a Period and a Timepoint.
    MEMBER FUNCTION intersects(p D_Period_H, tp D_Timepoint_H) return D_Period_H is
    b_y pls_integer := 0;
    b_m pls_integer := 0;
    b_d pls_integer := 0;
    b_h pls_integer := 0;
    e_y pls_integer := 0;
    e_m pls_integer := 0;
    e_d pls_integer := 0;
    e_h pls_integer := 0;
    begin
         D_Period_H_Package.intersects(b.m_y, b.m_m, b.m_d, b.m_h, e.m_y, e.m_m, e.m_d, e.m_h, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, tp.m_y, tp.m_m, tp.m_d, tp.m_h, b_y, b_m, b_d, b_h, e_y, e_m, e_d, e_h);
         return D_Period_H(D_Timepoint_H(b_y, b_m, b_d, b_h), D_Timepoint_H(e_y, e_m, e_d, e_h));
    end;

    --Returns a Period object representing the intersection between two Periods.
    MEMBER FUNCTION intersects(p1 D_Period_H, p2 D_Period_H) return D_Period_H is
    b_y pls_integer := 0;
    b_m pls_integer := 0;
    b_d pls_integer := 0;
    b_h pls_integer := 0;
    e_y pls_integer := 0;
    e_m pls_integer := 0;
    e_d pls_integer := 0;
    e_h pls_integer := 0;
    begin
         D_Period_H_Package.intersects(b.m_y, b.m_m, b.m_d, b.m_h, e.m_y, e.m_m, e.m_d, e.m_h, p1.b.m_y, p1.b.m_m, p1.b.m_d, p1.b.m_h, p1.e.m_y, p1.e.m_m, p1.e.m_d, p1.e.m_h, p2.b.m_y, p2.b.m_m, p2.b.m_d, p2.b.m_h, p2.e.m_y, p2.e.m_m, p2.e.m_d, p2.e.m_h, b_y, b_m, b_d, b_h, e_y, e_m, e_d, e_h);
         return D_Period_H(D_Timepoint_H(b_y, b_m, b_d, b_h), D_Timepoint_H(e_y, e_m, e_d, e_h));
    end;

    --Returns a Temporal Element object representing the intersection between a Period and a Temporal Element.
    MEMBER FUNCTION intersects(p D_Period_H, te REF D_Temp_Element_H) return REF D_Temp_Element_H is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_H;
    TE_h REF D_Temp_Element_H;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         str := D_Period_H_Package.intersects(b.m_y, b.m_m, b.m_d, b.m_h, e.m_y, e.m_m, e.m_d, e.m_h, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, te1.to_string());
         INSERT INTO temp_elements_h t
         VALUES (D_Temp_Element_H(return_temporal_element_h(str)))
         RETURNING REF(t) INTO TE_h;
         return TE_h;
    end;

    --Returns true if the Periods have the same value.
    MEMBER FUNCTION f_eq(p1 D_Period_H, p2 D_Period_H) return pls_integer is
    i pls_integer := D_Period_H_Package.f_eq(b.m_y, b.m_m, b.m_d, b.m_h, e.m_y, e.m_m, e.m_d, e.m_h, p1.b.m_y, p1.b.m_m, p1.b.m_d, p1.b.m_h, p1.e.m_y, p1.e.m_m, p1.e.m_d, p1.e.m_h, p2.b.m_y, p2.b.m_m, p2.b.m_d, p2.b.m_h, p2.e.m_y, p2.e.m_m, p2.e.m_d, p2.e.m_h);
    begin
         return i;
    end;

    --Returns true if the Periods have different value.
    MEMBER FUNCTION f_n_eq(p1 D_Period_H, p2 D_Period_H) return pls_integer is
    i pls_integer := D_Period_H_Package.f_n_eq(b.m_y, b.m_m, b.m_d, b.m_h, e.m_y, e.m_m, e.m_d, e.m_h, p1.b.m_y, p1.b.m_m, p1.b.m_d, p1.b.m_h, p1.e.m_y, p1.e.m_m, p1.e.m_d, p1.e.m_h, p2.b.m_y, p2.b.m_m, p2.b.m_d, p2.b.m_h, p2.e.m_y, p2.e.m_m, p2.e.m_d, p2.e.m_h);
    begin
         return i;
    end;

    --Returns true if the begin Timepoint of the first Period precedes the begin Timepoint of the second Period.
    MEMBER FUNCTION f_l(p1 D_Period_H, p2 D_Period_H) return pls_integer is
    i pls_integer := D_Period_H_Package.f_l(b.m_y, b.m_m, b.m_d, b.m_h, e.m_y, e.m_m, e.m_d, e.m_h, p1.b.m_y, p1.b.m_m, p1.b.m_d, p1.b.m_h, p1.e.m_y, p1.e.m_m, p1.e.m_d, p1.e.m_h, p2.b.m_y, p2.b.m_m, p2.b.m_d, p2.b.m_h, p2.e.m_y, p2.e.m_m, p2.e.m_d, p2.e.m_h);
    begin
         return i;
    end;

    --Returns true if the begin Timepoint of the first Period precedes or is equal to the begin Timepoint of the second Period.
    MEMBER FUNCTION f_l_e(p1 D_Period_H, p2 D_Period_H) return pls_integer is
    i pls_integer := D_Period_H_Package.f_l_e(b.m_y, b.m_m, b.m_d, b.m_h, e.m_y, e.m_m, e.m_d, e.m_h, p1.b.m_y, p1.b.m_m, p1.b.m_d, p1.b.m_h, p1.e.m_y, p1.e.m_m, p1.e.m_d, p1.e.m_h, p2.b.m_y, p2.b.m_m, p2.b.m_d, p2.b.m_h, p2.e.m_y, p2.e.m_m, p2.e.m_d, p2.e.m_h);
    begin
         return i;
    end;

    --Returns true if the begin Timepoint of the first Period follows the begin Timepoint of the second Period.
    MEMBER FUNCTION f_b(p1 D_Period_H, p2 D_Period_H) return pls_integer is
    i pls_integer := D_Period_H_Package.f_b(b.m_y, b.m_m, b.m_d, b.m_h, e.m_y, e.m_m, e.m_d, e.m_h, p1.b.m_y, p1.b.m_m, p1.b.m_d, p1.b.m_h, p1.e.m_y, p1.e.m_m, p1.e.m_d, p1.e.m_h, p2.b.m_y, p2.b.m_m, p2.b.m_d, p2.b.m_h, p2.e.m_y, p2.e.m_m, p2.e.m_d, p2.e.m_h);
    begin
         return i;
    end;

    --Returns true if the begin Timepoint of the first Period follows or is equal to the begin Timepoint of the second Period.
    MEMBER FUNCTION f_b_e(p1 D_Period_H, p2 D_Period_H) return pls_integer is
    i pls_integer := D_Period_H_Package.f_b_e(b.m_y, b.m_m, b.m_d, b.m_h, e.m_y, e.m_m, e.m_d, e.m_h, p1.b.m_y, p1.b.m_m, p1.b.m_d, p1.b.m_h, p1.e.m_y, p1.e.m_m, p1.e.m_d, p1.e.m_h, p2.b.m_y, p2.b.m_m, p2.b.m_d, p2.b.m_h, p2.e.m_y, p2.e.m_m, p2.e.m_d, p2.e.m_h);
    begin
         return i;
    end;

    --Returns true if the Period overlaps the Timepoint.
    MEMBER FUNCTION f_overlaps(p D_Period_H, tp D_Timepoint_H) return pls_integer is
    i pls_integer := D_Period_H_Package.f_overlaps(b.m_y, b.m_m, b.m_d, b.m_h, e.m_y, e.m_m, e.m_d, e.m_h, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, tp.m_y, tp.m_m, tp.m_d, tp.m_h);
    begin
         return i;
    end;

    --Returns true if the Period precedes the Timepoint.
    MEMBER FUNCTION f_precedes(p D_Period_H, tp D_Timepoint_H) return pls_integer is
    i pls_integer := D_Period_H_Package.f_precedes(b.m_y, b.m_m, b.m_d, b.m_h, e.m_y, e.m_m, e.m_d, e.m_h, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, tp.m_y, tp.m_m, tp.m_d, tp.m_h);
    begin
         return i;
    end;

    --Returns true if the Period meets the Timepoint.
    MEMBER FUNCTION f_meets(p D_Period_H, tp D_Timepoint_H) return pls_integer is
    i pls_integer := D_Period_H_Package.f_meets(b.m_y, b.m_m, b.m_d, b.m_h, e.m_y, e.m_m, e.m_d, e.m_h, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, tp.m_y, tp.m_m, tp.m_d, tp.m_h);
    begin
         return i;
    end;

    --Returns true if the Period is equal to Timepoint.
    MEMBER FUNCTION f_equal(p D_Period_H, tp D_Timepoint_H) return pls_integer is
    i pls_integer := D_Period_H_Package.f_equal(b.m_y, b.m_m, b.m_d, b.m_h, e.m_y, e.m_m, e.m_d, e.m_h, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, tp.m_y, tp.m_m, tp.m_d, tp.m_h);
    begin
         return i;
    end;

    --Returns true if the Period contains the Timepoint.
    MEMBER FUNCTION f_contains(p D_Period_H, tp D_Timepoint_H) return pls_integer is
    i pls_integer := D_Period_H_Package.f_contains(b.m_y, b.m_m, b.m_d, b.m_h, e.m_y, e.m_m, e.m_d, e.m_h, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, tp.m_y, tp.m_m, tp.m_d, tp.m_h);
    begin
         return i;
    end;

    --Returns true if two Periods overlap.
    MEMBER FUNCTION f_overlaps(p1 D_Period_H, p2 D_Period_H) return pls_integer is
    i pls_integer := D_Period_H_Package.f_overlaps(b.m_y, b.m_m, b.m_d, b.m_h, e.m_y, e.m_m, e.m_d, e.m_h, p1.b.m_y, p1.b.m_m, p1.b.m_d, p1.b.m_h, p1.e.m_y, p1.e.m_m, p1.e.m_d, p1.e.m_h, p2.b.m_y, p2.b.m_m, p2.b.m_d, p2.b.m_h, p2.e.m_y, p2.e.m_m, p2.e.m_d, p2.e.m_h);
    begin
         return i;
    end;

    --Returns true if the first Period precedes the second Period.
    MEMBER FUNCTION f_precedes(p1 D_Period_H, p2 D_Period_H) return pls_integer is
    i pls_integer := D_Period_H_Package.f_precedes(b.m_y, b.m_m, b.m_d, b.m_h, e.m_y, e.m_m, e.m_d, e.m_h, p1.b.m_y, p1.b.m_m, p1.b.m_d, p1.b.m_h, p1.e.m_y, p1.e.m_m, p1.e.m_d, p1.e.m_h, p2.b.m_y, p2.b.m_m, p2.b.m_d, p2.b.m_h, p2.e.m_y, p2.e.m_m, p2.e.m_d, p2.e.m_h);
    begin
         return i;
    end;

    --Returns true if the first Period meets the second Period.
    MEMBER FUNCTION f_meets(p1 D_Period_H, p2 D_Period_H) return pls_integer is
    i pls_integer := D_Period_H_Package.f_meets(b.m_y, b.m_m, b.m_d, b.m_h, e.m_y, e.m_m, e.m_d, e.m_h, p1.b.m_y, p1.b.m_m, p1.b.m_d, p1.b.m_h, p1.e.m_y, p1.e.m_m, p1.e.m_d, p1.e.m_h, p2.b.m_y, p2.b.m_m, p2.b.m_d, p2.b.m_h, p2.e.m_y, p2.e.m_m, p2.e.m_d, p2.e.m_h);
    begin
         return i;
    end;

    --Returns true if the first Period is equal to the second Period.
    MEMBER FUNCTION f_equal(p1 D_Period_H, p2 D_Period_H) return pls_integer is
    i pls_integer := D_Period_H_Package.f_equal(b.m_y, b.m_m, b.m_d, b.m_h, e.m_y, e.m_m, e.m_d, e.m_h, p1.b.m_y, p1.b.m_m, p1.b.m_d, p1.b.m_h, p1.e.m_y, p1.e.m_m, p1.e.m_d, p1.e.m_h, p2.b.m_y, p2.b.m_m, p2.b.m_d, p2.b.m_h, p2.e.m_y, p2.e.m_m, p2.e.m_d, p2.e.m_h);
    begin
         return i;
    end;

    --Returns true if the first Period contains the second Period.
    MEMBER FUNCTION f_contains(p1 D_Period_H, p2 D_Period_H) return pls_integer is
    i pls_integer := D_Period_H_Package.f_contains(b.m_y, b.m_m, b.m_d, b.m_h, e.m_y, e.m_m, e.m_d, e.m_h, p1.b.m_y, p1.b.m_m, p1.b.m_d, p1.b.m_h, p1.e.m_y, p1.e.m_m, p1.e.m_d, p1.e.m_h, p2.b.m_y, p2.b.m_m, p2.b.m_d, p2.b.m_h, p2.e.m_y, p2.e.m_m, p2.e.m_d, p2.e.m_h);
    begin
         return i;
    end;

    --Returns true if the Period overlaps the Temporal Element.
    MEMBER FUNCTION f_overlaps(p D_Period_H, te REF D_Temp_Element_H) return pls_integer is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_H;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         return D_Period_H_Package.f_overlaps(b.m_y, b.m_m, b.m_d, b.m_h, e.m_y, e.m_m, e.m_d, e.m_h, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, te1.to_string());
    end;

    --Returns true if the Period precedes the Temporal Element.
    MEMBER FUNCTION f_precedes(p D_Period_H, te REF D_Temp_Element_H) return pls_integer is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_H;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         return D_Period_H_Package.f_precedes(b.m_y, b.m_m, b.m_d, b.m_h, e.m_y, e.m_m, e.m_d, e.m_h, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, te1.to_string());
    end;

    --Returns true if the Period meets the Temporal Element.
    MEMBER FUNCTION f_meets(p D_Period_H, te REF D_Temp_Element_H) return pls_integer is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_H;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         return D_Period_H_Package.f_meets(b.m_y, b.m_m, b.m_d, b.m_h, e.m_y, e.m_m, e.m_d, e.m_h, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, te1.to_string());
    end;

    --Returns true if the Period is equal to the Temporal Element.
    MEMBER FUNCTION f_equal(p D_Period_H, te REF D_Temp_Element_H) return pls_integer is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_H;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         return D_Period_H_Package.f_equal(b.m_y, b.m_m, b.m_d, b.m_h, e.m_y, e.m_m, e.m_d, e.m_h, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, te1.to_string());
    end;

    --Returns true if the Timepoint contains the Temporal Element.
    MEMBER FUNCTION f_contains(p D_Period_H, te REF D_Temp_Element_H) return pls_integer is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_H;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         return D_Period_H_Package.f_contains(b.m_y, b.m_m, b.m_d, b.m_h, e.m_y, e.m_m, e.m_d, e.m_h, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, te1.to_string());
    end;

end;
/

-- Type body D_PERIOD_MIN

CREATE OR REPLACE
type body D_Period_Min is

    --Changes the status of the Timepoint object
    MEMBER PROCEDURE change_status(special_value pls_integer) is
    begin
    -- b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min IN OUT argument
         D_Period_Min_Package.change_status(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, special_value);
    end;

    --Returns the begin Timepoint of the Period object.
    MEMBER FUNCTION f_begin return D_Timepoint_Min is
    b_y pls_integer := 0;
    b_m pls_integer := 0;
    b_d pls_integer := 0;
    b_h pls_integer := 0;
    b_min pls_integer := 0;
    begin
         D_Period_Min_Package.f_begin(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, b_y, b_m, b_d, b_h, b_min);
         return D_Timepoint_Min(b_y, b_m, b_d, b_h, b_min);
    end;

    --Returns the end Timepoint of the Period object.
    MEMBER FUNCTION f_end return D_Timepoint_Min is
    e_y pls_integer := 0;
    e_m pls_integer := 0;
    e_d pls_integer := 0;
    e_h pls_integer := 0;
    e_min pls_integer := 0;
    begin
         D_Period_Min_Package.f_end(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, e_y, e_m, e_d, e_h, e_min);
         return D_Timepoint_Min(e_y, e_m, e_d, e_h, e_min);
    end;

    --Sets the begin Timepoint of the Period object.
    MEMBER PROCEDURE set_begin(tp D_Timepoint_Min) is
    -- b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min IN OUT argument
    begin
         D_Period_Min_Package.set_begin(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min);
    end;

    --Sets the end Timepoint of the Period object.
    MEMBER PROCEDURE set_end(tp D_Timepoint_Min) is
    -- b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min IN OUT argument
    begin
         D_Period_Min_Package.set_end(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min);
    end;

    --Returns the Granularity of the Period object.
    MEMBER FUNCTION get_granularity return pls_integer is
    g pls_integer := D_Period_Min_Package.get_granularity(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min);
    begin
         return g;
    end;

    --Returns an Interval object representing the duration of the Period.
    MEMBER FUNCTION duration return D_Interval is
    i_Value double precision := 0;
    begin
        D_Period_Min_Package.duration(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, i_Value);
        return D_Interval(i_Value);
    end;

    --Creates a string for the Timepoint object in ISO 8601 format.
    MEMBER FUNCTION to_string return Varchar2 is
    s Varchar2(50) := D_Period_Min_Package.to_string(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min);
    begin
         return s;
    end;

    --Converts the Period object to a Temporal Element object.
    MEMBER FUNCTION to_temporal_element return REF D_Temp_Element_Min is
    str Varchar2(32766) := '';
    TE_min REF D_Temp_Element_Min;
    begin
         str := D_Period_Min_Package.to_temporal_element(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min);
         INSERT INTO temp_elements_min t
         VALUES (D_Temp_Element_Min(return_temporal_element_min(str)))
         RETURNING REF(t) INTO TE_min;
         return TE_min;
    end;

    --Assigns the value of another Timepoint to the Timepoint object.
    MEMBER PROCEDURE f_ass_period(p D_Period_Min) is
    -- b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min IN OUT argument
    begin
        D_Period_Min_Package.f_ass_period(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.b.m_min, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, p.e.m_min);
    end;

    --Adds an Interval to the Timepoint object.
    MEMBER PROCEDURE f_add_interval(i D_Interval) is
    -- b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, b.m_m, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min IN OUT argument
    begin
         D_Period_Min_Package.f_add_interval(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, i.m_Value);
    end;

    --Subtracts an Interval from the Timepoint object.
    MEMBER PROCEDURE f_sub_interval(i D_Interval) is
    -- b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min IN OUT argument
    begin
         D_Period_Min_Package.f_sub_interval(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, i.m_Value);
    end;

    --Adds the interval to begin and end Timepoints of the Period object.
    MEMBER FUNCTION f_add(p D_Period_Min, i D_Interval) return D_Period_Min is
    b_y pls_integer := 0;
    b_m pls_integer := 0;
    b_d pls_integer := 0;
    b_h pls_integer := 0;
    b_min pls_integer := 0;
    e_y pls_integer := 0;
    e_m pls_integer := 0;
    e_d pls_integer := 0;
    e_h pls_integer := 0;
    e_min pls_integer := 0;
    begin
         D_Period_Min_Package.f_add(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.b.m_min, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, p.e.m_min, i.m_Value, b_y, b_m, b_d, b_h, b_min, e_y, e_m, e_d, e_h, e_min);
         return D_Period_Min(D_Timepoint_Min(b_y, b_m, b_d, b_h, b_min), D_Timepoint_Min(e_y, e_m, e_d, e_h, e_min));
    end;

    --Subtracts the interval to begin and end Timepoints of the Period object.
    MEMBER FUNCTION f_sub(p D_Period_Min, i D_Interval) return D_Period_Min  is
    b_y pls_integer := 0;
    b_m pls_integer := 0;
    b_d pls_integer := 0;
    b_h pls_integer := 0;
    b_min pls_integer := 0;
    e_y pls_integer := 0;
    e_m pls_integer := 0;
    e_d pls_integer := 0;
    e_h pls_integer := 0;
    e_min pls_integer := 0;
    begin
         D_Period_Min_Package.f_sub(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.b.m_min, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, p.e.m_min, i.m_Value, b_y, b_m, b_d, b_h, b_min, e_y, e_m, e_d, e_h, e_min);
         return D_Period_Min(D_Timepoint_Min(b_y, b_m, b_d, b_h, b_min), D_Timepoint_Min(e_y, e_m, e_d, e_h, e_min));
    end;

    --Constructs a Temporal Element object adding two Periods.
    MEMBER FUNCTION f_add(p1 D_Period_Min, p2 D_Period_Min) return REF D_Temp_Element_Min is
    str Varchar2(32766) := '';
    TE_min REF D_Temp_Element_Min;
    begin
         str := D_Period_Min_Package.f_add(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, p1.b.m_y, p1.b.m_m, p1.b.m_d, p1.b.m_h, p1.b.m_min, p1.e.m_y, p1.e.m_m, p1.e.m_d, p1.e.m_h, p1.e.m_min, p2.b.m_y, p2.b.m_m, p2.b.m_d, p2.b.m_h, p2.b.m_min, p2.e.m_y, p2.e.m_m, p2.e.m_d, p2.e.m_h, p2.e.m_min);
         INSERT INTO temp_elements_min t
         VALUES (D_Temp_Element_Min(return_temporal_element_min(str)))
         RETURNING REF(t) INTO TE_min;
         return TE_min;
    end;

    --Constructs a Temporal Element object subtracting two Periods.
    MEMBER FUNCTION f_sub(p1 D_Period_Min, p2 D_Period_Min) return REF D_Temp_Element_Min is
    str Varchar2(32766) := '';
    TE_min REF D_Temp_Element_Min;
    begin
         str := D_Period_Min_Package.f_sub(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, p1.b.m_y, p1.b.m_m, p1.b.m_d, p1.b.m_h, p1.b.m_min, p1.e.m_y, p1.e.m_m, p1.e.m_d, p1.e.m_h, p1.e.m_min, p2.b.m_y, p2.b.m_m, p2.b.m_d, p2.b.m_h, p2.b.m_min, p2.e.m_y, p2.e.m_m, p2.e.m_d, p2.e.m_h, p2.e.m_min);
         INSERT INTO temp_elements_min t
         VALUES (D_Temp_Element_Min(return_temporal_element_min(str)))
         RETURNING REF(t) INTO TE_min;
         return TE_min;
    end;

    --Constructs a Temporal Element object adding a Period to a Temporal Element.
    MEMBER FUNCTION f_add(p D_Period_Min, te REF D_Temp_Element_Min) return REF D_Temp_Element_Min is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_Min;
    TE_min REF D_Temp_Element_Min;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         str := D_Period_Min_Package.f_add(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.b.m_min, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, p.e.m_min, te1.to_string());
         INSERT INTO temp_elements_min t
         VALUES (D_Temp_Element_Min(return_temporal_element_min(str)))
         RETURNING REF(t) INTO TE_min;
         return TE_min;
    end;

    --Constructs a Temporal Element object subtracting a Temporal Element from a Period.
    MEMBER FUNCTION f_sub(p D_Period_Min, te REF D_Temp_Element_Min) return REF D_Temp_Element_Min is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_Min;
    TE_min REF D_Temp_Element_Min;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         str := D_Period_Min_Package.f_sub(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.b.m_min, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, p.e.m_min, te1.to_string());
         INSERT INTO temp_elements_min t
         VALUES (D_Temp_Element_Min(return_temporal_element_min(str)))
         RETURNING REF(t) INTO TE_min;
         return TE_min;
    end;

    --Returns a Period object representing the intersection between a Period and a Timepoint.
    MEMBER FUNCTION intersects(p D_Period_Min, tp D_Timepoint_Min) return D_Period_Min is
    b_y pls_integer := 0;
    b_m pls_integer := 0;
    b_d pls_integer := 0;
    b_h pls_integer := 0;
    b_min pls_integer := 0;
    e_y pls_integer := 0;
    e_m pls_integer := 0;
    e_d pls_integer := 0;
    e_h pls_integer := 0;
    e_min pls_integer := 0;
    begin
         D_Period_Min_Package.intersects(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.b.m_min, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, p.e.m_min, tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min, b_y, b_m, b_d, b_h, b_min, e_y, e_m, e_d, e_h, e_min);
         return D_Period_Min(D_Timepoint_Min(b_y, b_m, b_d, b_h, b_min), D_Timepoint_Min(e_y, e_m, e_d, e_h, e_min));
    end;

    --Returns a Period object representing the intersection between two Periods.
    MEMBER FUNCTION intersects(p1 D_Period_Min, p2 D_Period_Min) return D_Period_Min is
    b_y pls_integer := 0;
    b_m pls_integer := 0;
    b_d pls_integer := 0;
    b_h pls_integer := 0;
    b_min pls_integer := 0;
    e_y pls_integer := 0;
    e_m pls_integer := 0;
    e_d pls_integer := 0;
    e_h pls_integer := 0;
    e_min pls_integer := 0;
    begin
         D_Period_Min_Package.intersects(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, p1.b.m_y, p1.b.m_m, p1.b.m_d, p1.b.m_h, p1.b.m_min, p1.e.m_y, p1.e.m_m, p1.e.m_d, p1.e.m_h, p1.e.m_min, p2.b.m_y, p2.b.m_m, p2.b.m_d, p2.b.m_h, p2.b.m_min, p2.e.m_y, p2.e.m_m, p2.e.m_d, p2.e.m_h, p2.e.m_min, b_y, b_m, b_d, b_h, b_min, e_y, e_m, e_d, e_h, e_min);
         return D_Period_Min(D_Timepoint_Min(b_y, b_m, b_d, b_h, b_min), D_Timepoint_Min(e_y, e_m, e_d, e_h, e_min));
    end;

    --Returns a Temporal Element object representing the intersection between a Period and a Temporal Element.
    MEMBER FUNCTION intersects(p D_Period_Min, te REF D_Temp_Element_Min) return REF D_Temp_Element_Min is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_Min;
    TE_min REF D_Temp_Element_Min;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         str := D_Period_Min_Package.intersects(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.b.m_min, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, p.e.m_min, te1.to_string());
         INSERT INTO temp_elements_min t
         VALUES (D_Temp_Element_Min(return_temporal_element_min(str)))
         RETURNING REF(t) INTO TE_min;
         return TE_min;
    end;

    --Returns true if the Periods have the same value.
    MEMBER FUNCTION f_eq(p1 D_Period_Min, p2 D_Period_Min) return pls_integer is
    i pls_integer := D_Period_Min_Package.f_eq(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, p1.b.m_y, p1.b.m_m, p1.b.m_d, p1.b.m_h, p1.b.m_min, p1.e.m_y, p1.e.m_m, p1.e.m_d, p1.e.m_h, p1.e.m_min, p2.b.m_y, p2.b.m_m, p2.b.m_d, p2.b.m_h, p2.b.m_min, p2.e.m_y, p2.e.m_m, p2.e.m_d, p2.e.m_h, p2.e.m_min);
    begin
         return i;
    end;

    --Returns true if the Periods have different value.
    MEMBER FUNCTION f_n_eq(p1 D_Period_Min, p2 D_Period_Min) return pls_integer is
    i pls_integer := D_Period_Min_Package.f_n_eq(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, p1.b.m_y, p1.b.m_m, p1.b.m_d, p1.b.m_h, p1.b.m_min, p1.e.m_y, p1.e.m_m, p1.e.m_d, p1.e.m_h, p1.e.m_min, p2.b.m_y, p2.b.m_m, p2.b.m_d, p2.b.m_h, p2.b.m_min, p2.e.m_y, p2.e.m_m, p2.e.m_d, p2.e.m_h, p2.e.m_min);
    begin
         return i;
    end;

    --Returns true if the begin Timepoint of the first Period precedes the begin Timepoint of the second Period.
    MEMBER FUNCTION f_l(p1 D_Period_Min, p2 D_Period_Min) return pls_integer is
    i pls_integer := D_Period_Min_Package.f_l(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, p1.b.m_y, p1.b.m_m, p1.b.m_d, p1.b.m_h, p1.b.m_min, p1.e.m_y, p1.e.m_m, p1.e.m_d, p1.e.m_h, p1.e.m_min, p2.b.m_y, p2.b.m_m, p2.b.m_d, p2.b.m_h, p2.b.m_min, p2.e.m_y, p2.e.m_m, p2.e.m_d, p2.e.m_h, p2.e.m_min);
    begin
         return i;
    end;

    --Returns true if the begin Timepoint of the first Period precedes or is equal to the begin Timepoint of the second Period.
    MEMBER FUNCTION f_l_e(p1 D_Period_Min, p2 D_Period_Min) return pls_integer is
    i pls_integer := D_Period_Min_Package.f_l_e(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, p1.b.m_y, p1.b.m_m, p1.b.m_d, p1.b.m_h, p1.b.m_min, p1.e.m_y, p1.e.m_m, p1.e.m_d, p1.e.m_h, p1.e.m_min, p2.b.m_y, p2.b.m_m, p2.b.m_d, p2.b.m_h, p2.b.m_min, p2.e.m_y, p2.e.m_m, p2.e.m_d, p2.e.m_h, p2.e.m_min);
    begin
         return i;
    end;

    --Returns true if the begin Timepoint of the first Period follows the begin Timepoint of the second Period.
    MEMBER FUNCTION f_b(p1 D_Period_Min, p2 D_Period_Min) return pls_integer is
    i pls_integer := D_Period_Min_Package.f_b(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, p1.b.m_y, p1.b.m_m, p1.b.m_d, p1.b.m_h, p1.b.m_min, p1.e.m_y, p1.e.m_m, p1.e.m_d, p1.e.m_h, p1.e.m_min, p2.b.m_y, p2.b.m_m, p2.b.m_d, p2.b.m_h, p2.b.m_min, p2.e.m_y, p2.e.m_m, p2.e.m_d, p2.e.m_h, p2.e.m_min);
    begin
         return i;
    end;

    --Returns true if the begin Timepoint of the first Period follows or is equal to the begin Timepoint of the second Period.
    MEMBER FUNCTION f_b_e(p1 D_Period_Min, p2 D_Period_Min) return pls_integer is
    i pls_integer := D_Period_Min_Package.f_b_e(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, p1.b.m_y, p1.b.m_m, p1.b.m_d, p1.b.m_h, p1.b.m_min, p1.e.m_y, p1.e.m_m, p1.e.m_d, p1.e.m_h, p1.e.m_min, p2.b.m_y, p2.b.m_m, p2.b.m_d, p2.b.m_h, p2.b.m_min, p2.e.m_y, p2.e.m_m, p2.e.m_d, p2.e.m_h, p2.e.m_min);
    begin
         return i;
    end;

    --Returns true if the Period overlaps the Timepoint.
    MEMBER FUNCTION f_overlaps(p D_Period_Min, tp D_Timepoint_Min) return pls_integer is
    i pls_integer := D_Period_Min_Package.f_overlaps(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.b.m_min, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, p.e.m_min, tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min);
    begin
         return i;
    end;

    --Returns true if the Period precedes the Timepoint.
    MEMBER FUNCTION f_precedes(p D_Period_Min, tp D_Timepoint_Min) return pls_integer is
    i pls_integer := D_Period_Min_Package.f_precedes(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.b.m_min, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, p.e.m_min, tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min);
    begin
         return i;
    end;

    --Returns true if the Period meets the Timepoint.
    MEMBER FUNCTION f_meets(p D_Period_Min, tp D_Timepoint_Min) return pls_integer is
    i pls_integer := D_Period_Min_Package.f_meets(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.b.m_min, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, p.e.m_min, tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min);
    begin
         return i;
    end;

    --Returns true if the Period is equal to Timepoint.
    MEMBER FUNCTION f_equal(p D_Period_Min, tp D_Timepoint_Min) return pls_integer is
    i pls_integer := D_Period_Min_Package.f_equal(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.b.m_min, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, p.e.m_min, tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min);
    begin
         return i;
    end;

    --Returns true if the Period contains the Timepoint.
    MEMBER FUNCTION f_contains(p D_Period_Min, tp D_Timepoint_Min) return pls_integer is
    i pls_integer := D_Period_Min_Package.f_contains(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.b.m_min, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, p.e.m_min, tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min);
    begin
         return i;
    end;

    --Returns true if two Periods overlap.
    MEMBER FUNCTION f_overlaps(p1 D_Period_Min, p2 D_Period_Min) return pls_integer is
    i pls_integer := D_Period_Min_Package.f_overlaps(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, p1.b.m_y, p1.b.m_m, p1.b.m_d, p1.b.m_h, p1.b.m_min, p1.e.m_y, p1.e.m_m, p1.e.m_d, p1.e.m_h, p1.e.m_min, p2.b.m_y, p2.b.m_m, p2.b.m_d, p2.b.m_h, p2.b.m_min, p2.e.m_y, p2.e.m_m, p2.e.m_d, p2.e.m_h, p2.e.m_min);
    begin
         return i;
    end;

    --Returns true if the first Period precedes the second Period.
    MEMBER FUNCTION f_precedes(p1 D_Period_Min, p2 D_Period_Min) return pls_integer is
    i pls_integer := D_Period_Min_Package.f_precedes(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, p1.b.m_y, p1.b.m_m, p1.b.m_d, p1.b.m_h, p1.b.m_min, p1.e.m_y, p1.e.m_m, p1.e.m_d, p1.e.m_h, p1.e.m_min, p2.b.m_y, p2.b.m_m, p2.b.m_d, p2.b.m_h, p2.b.m_min, p2.e.m_y, p2.e.m_m, p2.e.m_d, p2.e.m_h, p2.e.m_min);
    begin
         return i;
    end;

    --Returns true if the first Period meets the second Period.
    MEMBER FUNCTION f_meets(p1 D_Period_Min, p2 D_Period_Min) return pls_integer is
    i pls_integer := D_Period_Min_Package.f_meets(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, p1.b.m_y, p1.b.m_m, p1.b.m_d, p1.b.m_h, p1.b.m_min, p1.e.m_y, p1.e.m_m, p1.e.m_d, p1.e.m_h, p1.e.m_min, p2.b.m_y, p2.b.m_m, p2.b.m_d, p2.b.m_h, p2.b.m_min, p2.e.m_y, p2.e.m_m, p2.e.m_d, p2.e.m_h, p2.e.m_min);
    begin
         return i;
    end;

    --Returns true if the first Period is equal to the second Period.
    MEMBER FUNCTION f_equal(p1 D_Period_Min, p2 D_Period_Min) return pls_integer is
    i pls_integer := D_Period_Min_Package.f_equal(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, p1.b.m_y, p1.b.m_m, p1.b.m_d, p1.b.m_h, p1.b.m_min, p1.e.m_y, p1.e.m_m, p1.e.m_d, p1.e.m_h, p1.e.m_min, p2.b.m_y, p2.b.m_m, p2.b.m_d, p2.b.m_h, p2.b.m_min, p2.e.m_y, p2.e.m_m, p2.e.m_d, p2.e.m_h, p2.e.m_min);
    begin
         return i;
    end;

    --Returns true if the first Period contains the second Period.
    MEMBER FUNCTION f_contains(p1 D_Period_Min, p2 D_Period_Min) return pls_integer is
    i pls_integer := D_Period_Min_Package.f_contains(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, p1.b.m_y, p1.b.m_m, p1.b.m_d, p1.b.m_h, p1.b.m_min, p1.e.m_y, p1.e.m_m, p1.e.m_d, p1.e.m_h, p1.e.m_min, p2.b.m_y, p2.b.m_m, p2.b.m_d, p2.b.m_h, p2.b.m_min, p2.e.m_y, p2.e.m_m, p2.e.m_d, p2.e.m_h, p2.e.m_min);
    begin
         return i;
    end;

    --Returns true if the Period overlaps the Temporal Element.
    MEMBER FUNCTION f_overlaps(p D_Period_Min, te REF D_Temp_Element_Min) return pls_integer is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_Min;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         return D_Period_Min_Package.f_overlaps(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.b.m_min, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, p.e.m_min, te1.to_string());
    end;

    --Returns true if the Period precedes the Temporal Element.
    MEMBER FUNCTION f_precedes(p D_Period_Min, te REF D_Temp_Element_Min) return pls_integer is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_Min;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         return D_Period_Min_Package.f_precedes(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.b.m_min, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, p.e.m_min, te1.to_string());
    end;

    --Returns true if the Period meets the Temporal Element.
    MEMBER FUNCTION f_meets(p D_Period_Min, te REF D_Temp_Element_Min) return pls_integer is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_Min;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         return D_Period_Min_Package.f_meets(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.b.m_min, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, p.e.m_min, te1.to_string());
    end;

    --Returns true if the Period is equal to the Temporal Element.
    MEMBER FUNCTION f_equal(p D_Period_Min, te REF D_Temp_Element_Min) return pls_integer is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_Min;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         return D_Period_Min_Package.f_equal(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.b.m_min, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, p.e.m_min, te1.to_string());
    end;

    --Returns true if the Timepoint contains the Temporal Element.
    MEMBER FUNCTION f_contains(p D_Period_Min, te REF D_Temp_Element_Min) return pls_integer is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_Min;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         return D_Period_Min_Package.f_contains(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.b.m_min, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, p.e.m_min, te1.to_string());
    end;

end;
/

-- Type body D_PERIOD_SEC

CREATE OR REPLACE
type body D_Period_Sec is

    --Changes the status of the Timepoint object
    MEMBER PROCEDURE change_status(special_value pls_integer) is
    begin
    -- b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, b.m_sec, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, e.m_sec IN OUT argument
         D_Period_Sec_Package.change_status(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, b.m_sec, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, e.m_sec, special_value);
    end;

    --Returns the begin Timepoint of the Period object.
    MEMBER FUNCTION f_begin return D_Timepoint_Sec is
    b_y pls_integer := 0;
    b_m pls_integer := 0;
    b_d pls_integer := 0;
    b_h pls_integer := 0;
    b_min pls_integer := 0;
    b_sec double precision := 0;
    begin
         D_Period_Sec_Package.f_begin(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, b.m_sec, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, e.m_sec, b_y, b_m, b_d, b_h, b_min, b_sec);
         return D_Timepoint_Sec(b_y, b_m, b_d, b_h, b_min, b_sec);
    end;

    --Returns the end Timepoint of the Period object.
    MEMBER FUNCTION f_end return D_Timepoint_Sec is
    e_y pls_integer := 0;
    e_m pls_integer := 0;
    e_d pls_integer := 0;
    e_h pls_integer := 0;
    e_min pls_integer := 0;
    e_sec double precision := 0;
    begin
         D_Period_Sec_Package.f_end(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, b.m_sec, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, e.m_sec, e_y, e_m, e_d, e_h, e_min, e_sec);
         return D_Timepoint_Sec(e_y, e_m, e_d, e_h, e_min, e_sec);
    end;

    --Sets the begin Timepoint of the Period object.
    MEMBER PROCEDURE set_begin(tp D_Timepoint_Sec) is
    -- b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, b.m_sec, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, e.m_sec IN OUT argument
    begin
         D_Period_Sec_Package.set_begin(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, b.m_sec, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, e.m_sec, tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min, tp.m_sec);
    end;

    --Sets the end Timepoint of the Period object.
    MEMBER PROCEDURE set_end(tp D_Timepoint_Sec) is
    -- b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, b.m_sec, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, e.m_sec IN OUT argument
    begin
         D_Period_Sec_Package.set_end(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, b.m_sec, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, e.m_sec, tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min, tp.m_sec);
    end;

    --Returns the Granularity of the Period object.
    MEMBER FUNCTION get_granularity return pls_integer is
    g pls_integer := D_Period_Sec_Package.get_granularity(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, b.m_sec, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, e.m_sec);
    begin
         return g;
    end;

    --Returns an Interval object representing the duration of the Period.
    MEMBER FUNCTION duration return D_Interval is
    i_Value double precision := 0;
    begin
        D_Period_Sec_Package.duration(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, b.m_sec, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, e.m_sec, i_Value);
        return D_Interval(i_Value);
    end;

    --Creates a string for the Timepoint object in ISO 8601 format.
    MEMBER FUNCTION to_string return Varchar2 is
    s Varchar2(50) := D_Period_Sec_Package.to_string(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, b.m_sec, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, e.m_sec);
    begin
         return s;
    end;

    --Converts the Period object to a Temporal Element object.
    MEMBER FUNCTION to_temporal_element return REF D_Temp_Element_Sec is
    str Varchar2(32766) := '';
    TE_sec REF D_Temp_Element_Sec;
    begin
         str := D_Period_Sec_Package.to_temporal_element(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, b.m_sec, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, e.m_sec);
         INSERT INTO temp_elements_sec t
         VALUES (D_Temp_Element_Sec(return_temporal_element_sec(str)))
         RETURNING REF(t) INTO TE_sec;
         return TE_sec;
    end;

    --Assigns the value of another Timepoint to the Timepoint object.
    MEMBER PROCEDURE f_ass_period(p D_Period_Sec) is
    -- b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, b.m_sec, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, e.m_sec IN OUT argument
    begin
        D_Period_Sec_Package.f_ass_period(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, b.m_sec, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, e.m_sec, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.b.m_min, p.b.m_sec, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, p.e.m_min, p.e.m_sec);
    end;

    --Adds an Interval to the Timepoint object.
    MEMBER PROCEDURE f_add_interval(i D_Interval) is
    -- b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, b.m_sec, b.m_m, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, e.m_sec IN OUT argument
    begin
         D_Period_Sec_Package.f_add_interval(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, b.m_sec, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, e.m_sec, i.m_Value);
    end;

    --Subtracts an Interval from the Timepoint object.
    MEMBER PROCEDURE f_sub_interval(i D_Interval) is
    -- b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, b.m_sec, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, e.m_sec IN OUT argument
    begin
         D_Period_Sec_Package.f_sub_interval(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, b.m_sec, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, e.m_sec, i.m_Value);
    end;

    --Adds the interval to begin and end Timepoints of the Period object.
    MEMBER FUNCTION f_add(p D_Period_Sec, i D_Interval) return D_Period_Sec is
    b_y pls_integer := 0;
    b_m pls_integer := 0;
    b_d pls_integer := 0;
    b_h pls_integer := 0;
    b_min pls_integer := 0;
    b_sec double precision := 0;
    e_y pls_integer := 0;
    e_m pls_integer := 0;
    e_d pls_integer := 0;
    e_h pls_integer := 0;
    e_min pls_integer := 0;
    e_sec double precision := 0;
    begin
         D_Period_Sec_Package.f_add(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, b.m_sec, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, e.m_sec, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.b.m_min, p.b.m_sec, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, p.e.m_min, p.e.m_sec, i.m_Value, b_y, b_m, b_d, b_h, b_min, b_sec, e_y, e_m, e_d, e_h, e_min, e_sec);
         return D_Period_Sec(D_Timepoint_Sec(b_y, b_m, b_d, b_h, b_min, b_sec), D_Timepoint_Sec(e_y, e_m, e_d, e_h, e_min, e_sec));
    end;

    --Subtracts the interval to begin and end Timepoints of the Period object.
    MEMBER FUNCTION f_sub(p D_Period_Sec, i D_Interval) return D_Period_Sec  is
    b_y pls_integer := 0;
    b_m pls_integer := 0;
    b_d pls_integer := 0;
    b_h pls_integer := 0;
    b_min pls_integer := 0;
    b_sec double precision := 0;
    e_y pls_integer := 0;
    e_m pls_integer := 0;
    e_d pls_integer := 0;
    e_h pls_integer := 0;
    e_min pls_integer := 0;
    e_sec double precision := 0;
    begin
         D_Period_Sec_Package.f_sub(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, b.m_sec, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, e.m_sec, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.b.m_min, p.b.m_sec, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, p.e.m_min, p.e.m_sec, i.m_Value, b_y, b_m, b_d, b_h, b_min, b_sec, e_y, e_m, e_d, e_h, e_min, e_sec);
         return D_Period_Sec(D_Timepoint_Sec(b_y, b_m, b_d, b_h, b_min, b_sec), D_Timepoint_Sec(e_y, e_m, e_d, e_h, e_min, e_sec));
    end;

    --Constructs a Temporal Element object adding two Periods.
    MEMBER FUNCTION f_add(p1 D_Period_Sec, p2 D_Period_Sec) return REF D_Temp_Element_Sec is
    str Varchar2(32766) := '';
    TE_sec REF D_Temp_Element_Sec;
    begin
         str := D_Period_Sec_Package.f_add(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, b.m_sec, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, e.m_sec, p1.b.m_y, p1.b.m_m, p1.b.m_d, p1.b.m_h, p1.b.m_min, p1.b.m_sec, p1.e.m_y, p1.e.m_m, p1.e.m_d, p1.e.m_h, p1.e.m_min, p1.e.m_sec, p2.b.m_y, p2.b.m_m, p2.b.m_d, p2.b.m_h, p2.b.m_min, p2.b.m_sec, p2.e.m_y, p2.e.m_m, p2.e.m_d, p2.e.m_h, p2.e.m_min, p2.e.m_sec);
         INSERT INTO temp_elements_sec t
         VALUES (D_Temp_Element_Sec(return_temporal_element_sec(str)))
         RETURNING REF(t) INTO TE_sec;
         return TE_sec;
    end;

    --Constructs a Temporal Element object subtracting two Periods.
    MEMBER FUNCTION f_sub(p1 D_Period_Sec, p2 D_Period_Sec) return REF D_Temp_Element_Sec is
    str Varchar2(32766) := '';
    TE_sec REF D_Temp_Element_Sec;
    begin
         str := D_Period_Sec_Package.f_sub(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, b.m_sec, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, e.m_sec, p1.b.m_y, p1.b.m_m, p1.b.m_d, p1.b.m_h, p1.b.m_min, p1.b.m_sec, p1.e.m_y, p1.e.m_m, p1.e.m_d, p1.e.m_h, p1.e.m_min, p1.e.m_sec, p2.b.m_y, p2.b.m_m, p2.b.m_d, p2.b.m_h, p2.b.m_min, p2.b.m_sec, p2.e.m_y, p2.e.m_m, p2.e.m_d, p2.e.m_h, p2.e.m_min, p2.e.m_sec);
         INSERT INTO temp_elements_sec t
         VALUES (D_Temp_Element_Sec(return_temporal_element_sec(str)))
         RETURNING REF(t) INTO TE_sec;
         return TE_sec;
    end;

    --Constructs a Temporal Element object adding a Period to a Temporal Element.
    MEMBER FUNCTION f_add(p D_Period_Sec, te REF D_Temp_Element_Sec) return REF D_Temp_Element_Sec is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_Sec;
    TE_sec REF D_Temp_Element_Sec;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         str := D_Period_Sec_Package.f_add(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, b.m_sec, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, e.m_sec, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.b.m_min, p.b.m_sec, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, p.e.m_min, p.e.m_sec, te1.to_string());
         INSERT INTO temp_elements_sec t
         VALUES (D_Temp_Element_Sec(return_temporal_element_sec(str)))
         RETURNING REF(t) INTO TE_sec;
         return TE_sec;
    end;

    --Constructs a Temporal Element object subtracting a Temporal Element from a Period.
    MEMBER FUNCTION f_sub(p D_Period_Sec, te REF D_Temp_Element_Sec) return REF D_Temp_Element_Sec is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_Sec;
    TE_sec REF D_Temp_Element_Sec;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         str := D_Period_Sec_Package.f_sub(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, b.m_sec, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, e.m_sec, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.b.m_min, p.b.m_sec, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, p.e.m_min, p.e.m_sec, te1.to_string());
         INSERT INTO temp_elements_sec t
         VALUES (D_Temp_Element_Sec(return_temporal_element_sec(str)))
         RETURNING REF(t) INTO TE_sec;
         return TE_sec;
    end;

    --Returns a Period object representing the intersection between a Period and a Timepoint.
    MEMBER FUNCTION intersects(p D_Period_Sec, tp D_Timepoint_Sec) return D_Period_Sec is
    b_y pls_integer := 0;
    b_m pls_integer := 0;
    b_d pls_integer := 0;
    b_h pls_integer := 0;
    b_min pls_integer := 0;
    b_sec double precision := 0;
    e_y pls_integer := 0;
    e_m pls_integer := 0;
    e_d pls_integer := 0;
    e_h pls_integer := 0;
    e_min pls_integer := 0;
    e_sec double precision := 0;
    begin
         D_Period_Sec_Package.intersects(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, b.m_sec, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, e.m_sec, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.b.m_min, p.b.m_sec, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, p.e.m_min, p.e.m_sec, tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min, tp.m_sec, b_y, b_m, b_d, b_h, b_min, b_sec, e_y, e_m, e_d, e_h, e_min, e_sec);
         return D_Period_Sec(D_Timepoint_Sec(b_y, b_m, b_d, b_h, b_min, b_sec), D_Timepoint_Sec(e_y, e_m, e_d, e_h, e_min, e_sec));
    end;

    --Returns a Period object representing the intersection between two Periods.
    MEMBER FUNCTION intersects(p1 D_Period_Sec, p2 D_Period_Sec) return D_Period_Sec is
    b_y pls_integer := 0;
    b_m pls_integer := 0;
    b_d pls_integer := 0;
    b_h pls_integer := 0;
    b_min pls_integer := 0;
    b_sec double precision := 0;
    e_y pls_integer := 0;
    e_m pls_integer := 0;
    e_d pls_integer := 0;
    e_h pls_integer := 0;
    e_min pls_integer := 0;
    e_sec double precision := 0;
    begin
         D_Period_Sec_Package.intersects(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, b.m_sec, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, e.m_sec, p1.b.m_y, p1.b.m_m, p1.b.m_d, p1.b.m_h, p1.b.m_min, p1.b.m_sec, p1.e.m_y, p1.e.m_m, p1.e.m_d, p1.e.m_h, p1.e.m_min, p1.e.m_sec, p2.b.m_y, p2.b.m_m, p2.b.m_d, p2.b.m_h, p2.b.m_min, p2.b.m_sec, p2.e.m_y, p2.e.m_m, p2.e.m_d, p2.e.m_h, p2.e.m_min, p2.e.m_sec, b_y, b_m, b_d, b_h, b_min, b_sec, e_y, e_m, e_d, e_h, e_min, e_sec);
         return D_Period_Sec(D_Timepoint_Sec(b_y, b_m, b_d, b_h, b_min, b_sec), D_Timepoint_Sec(e_y, e_m, e_d, e_h, e_min, e_sec));
    end;

    --Returns a Temporal Element object representing the intersection between a Period and a Temporal Element.
    MEMBER FUNCTION intersects(p D_Period_Sec, te REF D_Temp_Element_Sec) return REF D_Temp_Element_Sec is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_Sec;
    TE_sec REF D_Temp_Element_Sec;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         str := D_Period_Sec_Package.intersects(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, b.m_sec, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, e.m_sec, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.b.m_min, p.b.m_sec, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, p.e.m_min, p.e.m_sec, te1.to_string());
         INSERT INTO temp_elements_sec t
         VALUES (D_Temp_Element_Sec(return_temporal_element_sec(str)))
         RETURNING REF(t) INTO TE_sec;
         return TE_sec;
    end;

    --Returns true if the Periods have the same value.
    MEMBER FUNCTION f_eq(p1 D_Period_Sec, p2 D_Period_Sec) return pls_integer is
    i pls_integer := D_Period_Sec_Package.f_eq(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, b.m_sec, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, e.m_sec, p1.b.m_y, p1.b.m_m, p1.b.m_d, p1.b.m_h, p1.b.m_min, p1.b.m_sec, p1.e.m_y, p1.e.m_m, p1.e.m_d, p1.e.m_h, p1.e.m_min, p1.e.m_sec, p2.b.m_y, p2.b.m_m, p2.b.m_d, p2.b.m_h, p2.b.m_min, p2.b.m_sec, p2.e.m_y, p2.e.m_m, p2.e.m_d, p2.e.m_h, p2.e.m_min, p2.e.m_sec);
    begin
         return i;
    end;

    --Returns true if the Periods have different value.
    MEMBER FUNCTION f_n_eq(p1 D_Period_Sec, p2 D_Period_Sec) return pls_integer is
    i pls_integer := D_Period_Sec_Package.f_n_eq(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, b.m_sec, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, e.m_sec, p1.b.m_y, p1.b.m_m, p1.b.m_d, p1.b.m_h, p1.b.m_min, p1.b.m_sec, p1.e.m_y, p1.e.m_m, p1.e.m_d, p1.e.m_h, p1.e.m_min, p1.e.m_sec, p2.b.m_y, p2.b.m_m, p2.b.m_d, p2.b.m_h, p2.b.m_min, p2.b.m_sec, p2.e.m_y, p2.e.m_m, p2.e.m_d, p2.e.m_h, p2.e.m_min, p2.e.m_sec);
    begin
         return i;
    end;

    --Returns true if the begin Timepoint of the first Period precedes the begin Timepoint of the second Period.
    MEMBER FUNCTION f_l(p1 D_Period_Sec, p2 D_Period_Sec) return pls_integer is
    i pls_integer := D_Period_Sec_Package.f_l(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, b.m_sec, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, e.m_sec, p1.b.m_y, p1.b.m_m, p1.b.m_d, p1.b.m_h, p1.b.m_min, p1.b.m_sec, p1.e.m_y, p1.e.m_m, p1.e.m_d, p1.e.m_h, p1.e.m_min, p1.e.m_sec, p2.b.m_y, p2.b.m_m, p2.b.m_d, p2.b.m_h, p2.b.m_min, p2.b.m_sec, p2.e.m_y, p2.e.m_m, p2.e.m_d, p2.e.m_h, p2.e.m_min, p2.e.m_sec);
    begin
         return i;
    end;

    --Returns true if the begin Timepoint of the first Period precedes or is equal to the begin Timepoint of the second Period.
    MEMBER FUNCTION f_l_e(p1 D_Period_Sec, p2 D_Period_Sec) return pls_integer is
    i pls_integer := D_Period_Sec_Package.f_l_e(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, b.m_sec, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, e.m_sec, p1.b.m_y, p1.b.m_m, p1.b.m_d, p1.b.m_h, p1.b.m_min, p1.b.m_sec, p1.e.m_y, p1.e.m_m, p1.e.m_d, p1.e.m_h, p1.e.m_min, p1.e.m_sec, p2.b.m_y, p2.b.m_m, p2.b.m_d, p2.b.m_h, p2.b.m_min, p2.b.m_sec, p2.e.m_y, p2.e.m_m, p2.e.m_d, p2.e.m_h, p2.e.m_min, p2.e.m_sec);
    begin
         return i;
    end;

    --Returns true if the begin Timepoint of the first Period follows the begin Timepoint of the second Period.
    MEMBER FUNCTION f_b(p1 D_Period_Sec, p2 D_Period_Sec) return pls_integer is
    i pls_integer := D_Period_Sec_Package.f_b(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, b.m_sec, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, e.m_sec, p1.b.m_y, p1.b.m_m, p1.b.m_d, p1.b.m_h, p1.b.m_min, p1.b.m_sec, p1.e.m_y, p1.e.m_m, p1.e.m_d, p1.e.m_h, p1.e.m_min, p1.e.m_sec, p2.b.m_y, p2.b.m_m, p2.b.m_d, p2.b.m_h, p2.b.m_min, p2.b.m_sec, p2.e.m_y, p2.e.m_m, p2.e.m_d, p2.e.m_h, p2.e.m_min, p2.e.m_sec);
    begin
         return i;
    end;

    --Returns true if the begin Timepoint of the first Period follows or is equal to the begin Timepoint of the second Period.
    MEMBER FUNCTION f_b_e(p1 D_Period_Sec, p2 D_Period_Sec) return pls_integer is
    i pls_integer := D_Period_Sec_Package.f_b_e(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, b.m_sec, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, e.m_sec, p1.b.m_y, p1.b.m_m, p1.b.m_d, p1.b.m_h, p1.b.m_min, p1.b.m_sec, p1.e.m_y, p1.e.m_m, p1.e.m_d, p1.e.m_h, p1.e.m_min, p1.e.m_sec, p2.b.m_y, p2.b.m_m, p2.b.m_d, p2.b.m_h, p2.b.m_min, p2.b.m_sec, p2.e.m_y, p2.e.m_m, p2.e.m_d, p2.e.m_h, p2.e.m_min, p2.e.m_sec);
    begin
         return i;
    end;

    --Returns true if the Period overlaps the Timepoint.
    MEMBER FUNCTION f_overlaps(p D_Period_Sec, tp D_Timepoint_Sec) return pls_integer is
    i pls_integer := D_Period_Sec_Package.f_overlaps(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, b.m_sec, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, e.m_sec, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.b.m_min, p.b.m_sec, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, p.e.m_min, p.e.m_sec, tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min, tp.m_sec);
    begin
         return i;
    end;

    --Returns true if the Period precedes the Timepoint.
    MEMBER FUNCTION f_precedes(p D_Period_Sec, tp D_Timepoint_Sec) return pls_integer is
    i pls_integer := D_Period_Sec_Package.f_precedes(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, b.m_sec, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, e.m_sec, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.b.m_min, p.b.m_sec, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, p.e.m_min, p.e.m_sec, tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min, tp.m_sec);
    begin
         return i;
    end;

    --Returns true if the Period meets the Timepoint.
    MEMBER FUNCTION f_meets(p D_Period_Sec, tp D_Timepoint_Sec) return pls_integer is
    i pls_integer := D_Period_Sec_Package.f_meets(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, b.m_sec, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, e.m_sec, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.b.m_min, p.b.m_sec, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, p.e.m_min, p.e.m_sec, tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min, tp.m_sec);
    begin
         return i;
    end;

    --Returns true if the Period is equal to Timepoint.
    MEMBER FUNCTION f_equal(p D_Period_Sec, tp D_Timepoint_Sec) return pls_integer is
    i pls_integer := D_Period_Sec_Package.f_equal(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, b.m_sec, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, e.m_sec, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.b.m_min, p.b.m_sec, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, p.e.m_min, p.e.m_sec, tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min, tp.m_sec);
    begin
         return i;
    end;

    --Returns true if the Period contains the Timepoint.
    MEMBER FUNCTION f_contains(p D_Period_Sec, tp D_Timepoint_Sec) return pls_integer is
    i pls_integer := D_Period_Sec_Package.f_contains(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, b.m_sec, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, e.m_sec, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.b.m_min, p.b.m_sec, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, p.e.m_min, p.e.m_sec, tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min, tp.m_sec);
    begin
         return i;
    end;

    --Returns true if two Periods overlap.
    MEMBER FUNCTION f_overlaps(p1 D_Period_Sec, p2 D_Period_Sec) return pls_integer is
    i pls_integer := D_Period_Sec_Package.f_overlaps(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, b.m_sec, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, e.m_sec, p1.b.m_y, p1.b.m_m, p1.b.m_d, p1.b.m_h, p1.b.m_min, p1.b.m_sec, p1.e.m_y, p1.e.m_m, p1.e.m_d, p1.e.m_h, p1.e.m_min, p1.e.m_sec, p2.b.m_y, p2.b.m_m, p2.b.m_d, p2.b.m_h, p2.b.m_min, p2.b.m_sec, p2.e.m_y, p2.e.m_m, p2.e.m_d, p2.e.m_h, p2.e.m_min, p2.e.m_sec);
    begin
         return i;
    end;

    --Returns true if the first Period precedes the second Period.
    MEMBER FUNCTION f_precedes(p1 D_Period_Sec, p2 D_Period_Sec) return pls_integer is
    i pls_integer := D_Period_Sec_Package.f_precedes(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, b.m_sec, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, e.m_sec, p1.b.m_y, p1.b.m_m, p1.b.m_d, p1.b.m_h, p1.b.m_min, p1.b.m_sec, p1.e.m_y, p1.e.m_m, p1.e.m_d, p1.e.m_h, p1.e.m_min, p1.e.m_sec, p2.b.m_y, p2.b.m_m, p2.b.m_d, p2.b.m_h, p2.b.m_min, p2.b.m_sec, p2.e.m_y, p2.e.m_m, p2.e.m_d, p2.e.m_h, p2.e.m_min, p2.e.m_sec);
    begin
         return i;
    end;

    --Returns true if the first Period meets the second Period.
    MEMBER FUNCTION f_meets(p1 D_Period_Sec, p2 D_Period_Sec) return pls_integer is
    i pls_integer := D_Period_Sec_Package.f_meets(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, b.m_sec, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, e.m_sec, p1.b.m_y, p1.b.m_m, p1.b.m_d, p1.b.m_h, p1.b.m_min, p1.b.m_sec, p1.e.m_y, p1.e.m_m, p1.e.m_d, p1.e.m_h, p1.e.m_min, p1.e.m_sec, p2.b.m_y, p2.b.m_m, p2.b.m_d, p2.b.m_h, p2.b.m_min, p2.b.m_sec, p2.e.m_y, p2.e.m_m, p2.e.m_d, p2.e.m_h, p2.e.m_min, p2.e.m_sec);
    begin
         return i;
    end;

    --Returns true if the first Period is equal to the second Period.
    MEMBER FUNCTION f_equal(p1 D_Period_Sec, p2 D_Period_Sec) return pls_integer is
    i pls_integer := D_Period_Sec_Package.f_equal(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, b.m_sec, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, e.m_sec, p1.b.m_y, p1.b.m_m, p1.b.m_d, p1.b.m_h, p1.b.m_min, p1.b.m_sec, p1.e.m_y, p1.e.m_m, p1.e.m_d, p1.e.m_h, p1.e.m_min, p1.e.m_sec, p2.b.m_y, p2.b.m_m, p2.b.m_d, p2.b.m_h, p2.b.m_min, p2.b.m_sec, p2.e.m_y, p2.e.m_m, p2.e.m_d, p2.e.m_h, p2.e.m_min, p2.e.m_sec);
    begin
         return i;
    end;

    --Returns true if the first Period contains the second Period.
    MEMBER FUNCTION f_contains(p1 D_Period_Sec, p2 D_Period_Sec) return pls_integer is
    i pls_integer := D_Period_Sec_Package.f_contains(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, b.m_sec, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, e.m_sec, p1.b.m_y, p1.b.m_m, p1.b.m_d, p1.b.m_h, p1.b.m_min, p1.b.m_sec, p1.e.m_y, p1.e.m_m, p1.e.m_d, p1.e.m_h, p1.e.m_min, p1.e.m_sec, p2.b.m_y, p2.b.m_m, p2.b.m_d, p2.b.m_h, p2.b.m_min, p2.b.m_sec, p2.e.m_y, p2.e.m_m, p2.e.m_d, p2.e.m_h, p2.e.m_min, p2.e.m_sec);
    begin
         return i;
    end;

    --Returns true if the Period overlaps the Temporal Element.
    MEMBER FUNCTION f_overlaps(p D_Period_Sec, te REF D_Temp_Element_Sec) return pls_integer is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_Sec;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         return D_Period_Sec_Package.f_overlaps(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, b.m_sec, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, e.m_sec, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.b.m_min, p.b.m_sec, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, p.e.m_min, p.e.m_sec, te1.to_string());
    end;

    --Returns true if the Period precedes the Temporal Element.
    MEMBER FUNCTION f_precedes(p D_Period_Sec, te REF D_Temp_Element_Sec) return pls_integer is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_Sec;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         return D_Period_Sec_Package.f_precedes(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, b.m_sec, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, e.m_sec, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.b.m_min, p.b.m_sec, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, p.e.m_min, p.e.m_sec, te1.to_string());
    end;

    --Returns true if the Period meets the Temporal Element.
    MEMBER FUNCTION f_meets(p D_Period_Sec, te REF D_Temp_Element_Sec) return pls_integer is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_Sec;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         return D_Period_Sec_Package.f_meets(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, b.m_sec, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, e.m_sec, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.b.m_min, p.b.m_sec, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, p.e.m_min, p.e.m_sec, te1.to_string());
    end;

    --Returns true if the Period is equal to the Temporal Element.
    MEMBER FUNCTION f_equal(p D_Period_Sec, te REF D_Temp_Element_Sec) return pls_integer is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_Sec;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         return D_Period_Sec_Package.f_equal(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, b.m_sec, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, e.m_sec, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.b.m_min, p.b.m_sec, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, p.e.m_min, p.e.m_sec, te1.to_string());
    end;

    --Returns true if the Timepoint contains the Temporal Element.
    MEMBER FUNCTION f_contains(p D_Period_Sec, te REF D_Temp_Element_Sec) return pls_integer is
    str Varchar2(32766) := '';
    te1 D_Temp_Element_Sec;
    begin
         SELECT DEREF(te) INTO te1 FROM DUAL;
         return D_Period_Sec_Package.f_contains(b.m_y, b.m_m, b.m_d, b.m_h, b.m_min, b.m_sec, e.m_y, e.m_m, e.m_d, e.m_h, e.m_min, e.m_sec, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.b.m_min, p.b.m_sec, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, p.e.m_min, p.e.m_sec, te1.to_string());
    end;

end;
/

-- Type body D_TEMP_ELEMENT_Y

CREATE OR REPLACE
type body D_Temp_Element_Y is

    --Creates a string for the Temporal Element object.
    MEMBER FUNCTION to_string return Varchar2 is
    i pls_integer;
    s Varchar2(32766) := '';
    begin
         i := te.FIRST;  -- get subscript of first element
         WHILE i IS NOT NULL LOOP
            s := concat(s, TO_CHAR(te(i).b.m_y));
            s := concat(s, ',');
            s := concat(s, TO_CHAR(te(i).e.m_y));
            s := concat(s, '#');

            i := te.NEXT(i);  -- get subscript of next element
         END LOOP;

         return s;
    end;

    --Creates a Temporal Element object from the string and assigns it to the current TE.
    MEMBER PROCEDURE to_temporal_element(te_string Varchar2) is
    new_te temp_element_y;
    s Varchar2(32000);
    t1 pls_integer :=0;
    t2 pls_integer :=0;
    i pls_integer :=0;

    begin
        s := te_string;
        new_te := temp_element_y();

        WHILE LENGTH(s) != 0 LOOP
            t1 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t2 := TO_NUMBER( LPAD(s, INSTR(s, '#') - 1) );
            s :=  SUBSTR(s, INSTR(s,'#') + 1, LENGTH(s) - INSTR(s,'#') + 1 );

            new_te.EXTEND;
            i := new_te.LAST;
            new_te(i) := d_period_y(d_timepoint_y(t1), d_timepoint_y(t2));
        END LOOP;

        te := new_te;
    end;

    --Creates a Temporal Element object from the string and returns it.
    MEMBER FUNCTION return_temporal_element(te_string Varchar2) return temp_element_y is
    new_te temp_element_y;
    s Varchar2(32000);
    t1 pls_integer :=0;
    t2 pls_integer :=0;
    i pls_integer :=0;

    begin
        s := te_string;
        new_te := temp_element_y();

        WHILE LENGTH(s) != 0 LOOP
            t1 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t2 := TO_NUMBER( LPAD(s, INSTR(s, '#') - 1) );
            s :=  SUBSTR(s, INSTR(s,'#') + 1, LENGTH(s) - INSTR(s,'#') + 1 );

            new_te.EXTEND;
            i := new_te.LAST;
            new_te(i) := d_period_y(d_timepoint_y(t1), d_timepoint_y(t2));
        END LOOP;

        return new_te;
    end;

    --Returns the first Period of the Temporal Element object.
    MEMBER FUNCTION f_begin return D_Period_Y is
    b_y pls_integer := 0;
    e_y pls_integer := 0;
    begin
         D_TE_Y_Package.f_begin(to_string(), b_y, e_y);
         return D_Period_Y(D_Timepoint_Y(b_y), D_Timepoint_Y(e_y));
    end;

    --Returns the last Period of the Temporal Element object.
    MEMBER FUNCTION f_end return D_Period_Y is
    b_y pls_integer := 0;
    e_y pls_integer := 0;
    begin
         D_TE_Y_Package.f_end(to_string(), b_y, e_y);
         return D_Period_Y(D_Timepoint_Y(b_y), D_Timepoint_Y(e_y));
    end;

    --Returns the Granularity of the Temporal Element object.
    MEMBER FUNCTION get_granularity return pls_integer is
    g pls_integer := D_TE_Y_Package.get_granularity(to_string());
    begin
         return g;
    end;

    --Returns an Interval object representing the sum of the duration of the Periods in the Temporal Element object.
    MEMBER FUNCTION duration return D_Interval is
    i_Value double precision := 0;
    begin
        D_TE_Y_Package.duration(to_string(), i_Value);
        return D_Interval(i_Value);
    end;

    --Returns the number of Periods contained in the Temporal Element object.
    MEMBER FUNCTION cardinality return pls_integer is
    c pls_integer := D_TE_Y_Package.cardinality(to_string());
    begin
         return c;
    end;

    --Returns the Period number num inside the Temporal Element object.
    MEMBER FUNCTION go(num pls_integer) return D_Period_Y is
    b_y pls_integer := 0;
    e_y pls_integer := 0;
    begin
         D_TE_Y_Package.go(to_string(), num, b_y, e_y);
         return D_Period_Y(D_Timepoint_Y(b_y), D_Timepoint_Y(e_y));
    end;

    --Assigns the value of another Temporal Element to the Temporal Element object.
    MEMBER PROCEDURE f_ass_temp_element(te1 D_Temp_Element_Y) is
    te_string Varchar2(32766) := '';
    begin
         te_string := to_string();
         te_string := D_TE_Y_Package.f_ass_temp_element(te_string, te1.to_string());
         to_temporal_element(te_string);
    end;

    --Adds a Temporal Element to the Temporal Element object. The result is all the times which belong to both the Temporal Element objects.
    MEMBER PROCEDURE f_add_temp_element(te1 D_Temp_Element_Y) is
    te_string Varchar2(32766) := '';
    begin
         te_string := to_string();
         te_string := D_TE_Y_Package.f_add_temp_element(te_string, te1.to_string());
         to_temporal_element(te_string);
    end;

    --Adds a Period to the Temporal Element object. The result is all the times which belong to either the Period and the Temporal Element.
    MEMBER PROCEDURE f_add_period(p D_Period_Y) is
    te_string Varchar2(32766) := '';
    begin
         te_string := to_string();
         te_string := D_TE_Y_Package.f_add_period(te_string, p.b.m_y, p.e.m_y);
         to_temporal_element(te_string);
    end;

    --Subtracts a Temporal Element from the Temporal Element object. The result is all the times which are included in the current Temporal Elementbut not in the other one.
    MEMBER PROCEDURE f_sub_temp_element(te1 D_Temp_Element_Y) is
    te_string Varchar2(32766) := '';
    begin
         te_string := to_string();
         te_string := D_TE_Y_Package.f_sub_temp_element(te_string, te1.to_string());
         to_temporal_element(te_string);
    end;

    --Subtracts a Period from the Temporal Element object. The result is all the times which are included in the current Temporal Element but not in the Period.
    MEMBER PROCEDURE f_sub_period(p D_Period_Y) is
    te_string Varchar2(32766) := '';
    begin
         te_string := to_string();
         te_string := D_TE_Y_Package.f_sub_period(te_string, p.b.m_y, p.e.m_y);
         to_temporal_element(te_string);
    end;

    --Constructs a Temporal Element adding a Period to an existing Temporal Element.
    MEMBER FUNCTION f_add(te1 D_Temp_Element_Y, p D_Period_Y) return D_Temp_Element_Y is
    str Varchar2(32766) := '';
    begin
         str := D_TE_Y_Package.f_add(to_string(), te1.to_string(), p.b.m_y, p.e.m_y);
         return D_Temp_Element_Y(return_temporal_element(str));
    end;

    --Constructs a Temporal Element adding two Temporal Elements.
    MEMBER FUNCTION f_add(te1 D_Temp_Element_Y, te2 D_Temp_Element_Y) return D_Temp_Element_Y is
    str Varchar2(32766) := '';
    begin
         str := D_TE_Y_Package.f_add(to_string(), te1.to_string(), te2.to_string());
         return D_Temp_Element_Y(return_temporal_element(str));
    end;

    --Constructs a Temporal Element subtracting a Period to an existing Temporal Element.
    MEMBER FUNCTION f_sub(te1 D_Temp_Element_Y, p D_Period_Y) return D_Temp_Element_Y is
    str Varchar2(32766) := '';
    begin
         str := D_TE_Y_Package.f_sub(to_string(), te1.to_string(), p.b.m_y, p.e.m_y);
         return D_Temp_Element_Y(return_temporal_element(str));
    end;

    --Constructs a Temporal Element subtracting two Temporal Elements.
    MEMBER FUNCTION f_sub(te1 D_Temp_Element_Y, te2 D_Temp_Element_Y) return D_Temp_Element_Y is
    str Varchar2(32766) := '';
    begin
         str := D_TE_Y_Package.f_sub(to_string(), te1.to_string(), te2.to_string());
         return D_Temp_Element_Y(return_temporal_element(str));
    end;

    --Returns a Temporal Element object representing the intersection between a Temporal Element and a Timepoint.
    MEMBER FUNCTION intersects(te1 D_Temp_Element_Y, tp D_Timepoint_Y) return D_Temp_Element_Y is
    str Varchar2(32766) := '';
    begin
         str := D_TE_Y_Package.intersects(to_string(), te1.to_string(), tp.m_y);
         return D_Temp_Element_Y(return_temporal_element(str));
    end;

    --Returns a Temporal Element object representing the intersection between a Temporal Element and a Period.
    MEMBER FUNCTION intersects(te1 D_Temp_Element_Y, p D_Period_Y) return D_Temp_Element_Y is
    str Varchar2(32766) := '';
    begin
         str := D_TE_Y_Package.intersects(to_string(), te1.to_string(), p.b.m_y, p.e.m_y);
         return D_Temp_Element_Y(return_temporal_element(str));
    end;

    --Returns a Temporal Element object representing the intersection between two Temporal Elements.
    MEMBER FUNCTION intersects(te1 D_Temp_Element_Y, te2 D_Temp_Element_Y) return D_Temp_Element_Y is
    str Varchar2(32766) := '';
    begin
         str := D_TE_Y_Package.intersects(to_string(), te1.to_string(), te2.to_string());
         return D_Temp_Element_Y(return_temporal_element(str));
    end;

    --Returns true if the Temporal Elements have the same value.
    MEMBER FUNCTION f_eq(te1 D_Temp_Element_Y, te2 D_Temp_Element_Y) return pls_integer is
    i pls_integer := D_TE_Y_Package.f_eq(to_string(), te1.to_string(), te2.to_string());
    begin
         return i;
    end;

    --Returns true if the Temporal Elements have different value.
    MEMBER FUNCTION f_n_eq(te1 D_Temp_Element_Y, te2 D_Temp_Element_Y) return pls_integer is
    i pls_integer := D_TE_Y_Package.f_n_eq(to_string(), te1.to_string(), te2.to_string());
    begin
         return i;
    end;

    --Returns true if the Temporal Element overlaps the Timepoint.
    MEMBER FUNCTION f_overlaps(te1 D_Temp_Element_Y, tp D_Timepoint_Y) return pls_integer is
    i pls_integer := D_TE_Y_Package.f_overlaps(to_string(), te1.to_string(), tp.m_y);
    begin
         return i;
    end;

    --Returns true if the Temporal Element precedes the Timepoint.
    MEMBER FUNCTION f_precedes(te1 D_Temp_Element_Y, tp D_Timepoint_Y) return pls_integer is
    i pls_integer := D_TE_Y_Package.f_precedes(to_string(), te1.to_string(), tp.m_y);
    begin
         return i;
    end;

    --Returns true if the Temporal Element meets the Timepoint.
    MEMBER FUNCTION f_meets(te1 D_Temp_Element_Y, tp D_Timepoint_Y) return pls_integer is
    i pls_integer := D_TE_Y_Package.f_meets(to_string(), te1.to_string(), tp.m_y);
    begin
         return i;
    end;

    --Returns true if the Temporal Element equal the Timepoint.
    MEMBER FUNCTION f_equal(te1 D_Temp_Element_Y, tp D_Timepoint_Y) return pls_integer is
    i pls_integer := D_TE_Y_Package.f_equal(to_string(), te1.to_string(), tp.m_y);
    begin
         return i;
    end;

    --Returns true if the Temporal Element contains the Timepoint.
    MEMBER FUNCTION f_contains(te1 D_Temp_Element_Y, tp D_Timepoint_Y) return pls_integer is
    i pls_integer := D_TE_Y_Package.f_contains(to_string(), te1.to_string(), tp.m_y);
    begin
         return i;
    end;

    --Returns true if the Temporal Element overlaps the Period
    MEMBER FUNCTION f_overlaps(te1 D_Temp_Element_Y, p D_Period_Y) return pls_integer is
    i pls_integer := D_TE_Y_Package.f_overlaps(to_string(), te1.to_string(), p.b.m_y, p.e.m_y);
    begin
         return i;
    end;

    --Returns true if the Temporal Element precedes the Period
    MEMBER FUNCTION f_precedes(te1 D_Temp_Element_Y, p D_Period_Y) return pls_integer is
    i pls_integer := D_TE_Y_Package.f_precedes(to_string(), te1.to_string(), p.b.m_y, p.e.m_y);
    begin
         return i;
    end;

    --Returns true if the Temporal Element meets the Period
    MEMBER FUNCTION f_meets(te1 D_Temp_Element_Y, p D_Period_Y) return pls_integer is
    i pls_integer := D_TE_Y_Package.f_meets(to_string(), te1.to_string(), p.b.m_y, p.e.m_y);
    begin
         return i;
    end;

    --Returns true if the Temporal Element equal the Period
    MEMBER FUNCTION f_equal(te1 D_Temp_Element_Y, p D_Period_Y) return pls_integer is
    i pls_integer := D_TE_Y_Package.f_equal(to_string(), te1.to_string(), p.b.m_y, p.e.m_y);
    begin
         return i;
    end;

    --Returns true if the Temporal Element contains the Period
    MEMBER FUNCTION f_contains(te1 D_Temp_Element_Y, p D_Period_Y) return pls_integer is
    i pls_integer := D_TE_Y_Package.f_contains(to_string(), te1.to_string(), p.b.m_y, p.e.m_y);
    begin
         return i;
    end;

    --Returns true if two Temporal Elements overlap.
    MEMBER FUNCTION f_overlaps(te1 D_Temp_Element_Y, te2 D_Temp_Element_Y) return pls_integer is
    i pls_integer := D_TE_Y_Package.f_overlaps(to_string(), te1.to_string(), te2.to_string());
    begin
         return i;
    end;

    --Returns true if the first Temporal Element precedes the second Temporal Element.
    MEMBER FUNCTION f_precedes(te1 D_Temp_Element_Y, te2 D_Temp_Element_Y) return pls_integer is
    i pls_integer := D_TE_Y_Package.f_precedes(to_string(), te1.to_string(), te2.to_string());
    begin
         return i;
    end;

    --Returns true if the first Temporal Element meets the second Temporal Element.
    MEMBER FUNCTION f_meets(te1 D_Temp_Element_Y, te2 D_Temp_Element_Y) return pls_integer is
    i pls_integer := D_TE_Y_Package.f_meets(to_string(), te1.to_string(), te2.to_string());
    begin
         return i;
    end;

    --Returns true if the first Temporal Element is equal to second Temporal Element.
    MEMBER FUNCTION f_equal(te1 D_Temp_Element_Y, te2 D_Temp_Element_Y) return pls_integer is
    i pls_integer := D_TE_Y_Package.f_equal(to_string(), te1.to_string(), te2.to_string());
    begin
         return i;
    end;

    --Returns true if the first Temporal Element contains the second Temporal Element.
    MEMBER FUNCTION f_contains(te1 D_Temp_Element_Y, te2 D_Temp_Element_Y) return pls_integer is
    i pls_integer := D_TE_Y_Package.f_contains(to_string(), te1.to_string(), te2.to_string());
    begin
         return i;
    end;

end;
/


-- Type body D_TEMP_ELEMENT_M

CREATE OR REPLACE
type body D_Temp_Element_M is

    --Creates a string for the Temporal Element object.
    MEMBER FUNCTION to_string return Varchar2 is
    i pls_integer;
    s Varchar2(32766) := '';
    begin
         i := te.FIRST;  -- get subscript of first element
         WHILE i IS NOT NULL LOOP
            s := concat(s, TO_CHAR(te(i).b.m_y));
            s := concat(s, ',');
            s := concat(s, TO_CHAR(te(i).b.m_m));
            s := concat(s, ',');
            s := concat(s, TO_CHAR(te(i).e.m_y));
            s := concat(s, ',');
            s := concat(s, TO_CHAR(te(i).e.m_m));
            s := concat(s, '#');

            i := te.NEXT(i);  -- get subscript of next element
         END LOOP;

         return s;
    end;

    --Creates a Temporal Element object from the string and assigns it to the current TE.
    MEMBER PROCEDURE to_temporal_element(te_string Varchar2) is
    new_te Temp_Element_M;
    s Varchar2(32000);
    t1 pls_integer :=0;
    t2 pls_integer :=0;
    t3 pls_integer :=0;
    t4 pls_integer :=0;
    i pls_integer :=0;

    begin
        s := te_string;
        new_te := Temp_Element_M();

        WHILE LENGTH(s) != 0 LOOP
            t1 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t2 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t3 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t4 := TO_NUMBER( LPAD(s, INSTR(s, '#') - 1) );
            s :=  SUBSTR(s, INSTR(s,'#') + 1, LENGTH(s) - INSTR(s,'#') + 1 );

            new_te.EXTEND;
            i := new_te.LAST;
            new_te(i) := D_Period_M(D_Timepoint_M(t1, t2), D_Timepoint_M(t3, t4));
        END LOOP;

        te := new_te;
    end;

    --Creates a Temporal Element object from the string and returns it.
    MEMBER FUNCTION return_temporal_element(te_string Varchar2) return Temp_Element_M is
    new_te Temp_Element_M;
    s Varchar2(32000);
    t1 pls_integer :=0;
    t2 pls_integer :=0;
    t3 pls_integer :=0;
    t4 pls_integer :=0;
    i pls_integer :=0;

    begin
        s := te_string;
        new_te := Temp_Element_M();

        WHILE LENGTH(s) != 0 LOOP
            t1 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t2 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t3 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t4 := TO_NUMBER( LPAD(s, INSTR(s, '#') - 1) );
            s :=  SUBSTR(s, INSTR(s,'#') + 1, LENGTH(s) - INSTR(s,'#') + 1 );

            new_te.EXTEND;
            i := new_te.LAST;
            new_te(i) := D_Period_M(D_Timepoint_M(t1, t2), D_Timepoint_M(t3, t4));
        END LOOP;

        return new_te;
    end;

    --Returns the first Period of the Temporal Element object.
    MEMBER FUNCTION f_begin return D_Period_M is
    b_y pls_integer := 0;
    b_m pls_integer := 0;
    e_y pls_integer := 0;
    e_m pls_integer := 0;
    begin
         D_TE_M_Package.f_begin(to_string(), b_y, b_m, e_y, e_m);
         return D_Period_M(D_Timepoint_M(b_y, b_m), D_Timepoint_M(e_y, e_m));
    end;

    --Returns the last Period of the Temporal Element object.
    MEMBER FUNCTION f_end return D_Period_M is
    b_y pls_integer := 0;
    b_m pls_integer := 0;
    e_y pls_integer := 0;
    e_m pls_integer := 0;
    begin
         D_TE_M_Package.f_end(to_string(), b_y, b_m, e_y, e_m);
         return D_Period_M(D_Timepoint_M(b_y, b_m), D_Timepoint_M(e_y, e_m));
    end;

    --Returns the Granularity of the Temporal Element object.
    MEMBER FUNCTION get_granularity return pls_integer is
    g pls_integer := D_TE_M_Package.get_granularity(to_string());
    begin
         return g;
    end;

    --Returns an Interval object representing the sum of the duration of the Periods in the Temporal Element object.
    MEMBER FUNCTION duration return D_Interval is
    i_Value double precision := 0;
    begin
        D_TE_M_Package.duration(to_string(), i_Value);
        return D_Interval(i_Value);
    end;

    --Returns the number of Periods contained in the Temporal Element object.
    MEMBER FUNCTION cardinality return pls_integer is
    c pls_integer := D_TE_M_Package.cardinality(to_string());
    begin
         return c;
    end;

    --Returns the Period number num inside the Temporal Element object.
    MEMBER FUNCTION go(num pls_integer) return D_Period_M is
    b_y pls_integer := 0;
    b_m pls_integer := 0;
    e_y pls_integer := 0;
    e_m pls_integer := 0;
    begin
         D_TE_M_Package.go(to_string(), num, b_y, b_m, e_y, e_m);
         return D_Period_M(D_Timepoint_M(b_y, b_m), D_Timepoint_M(e_y, e_m));
    end;

    --Assigns the value of another Temporal Element to the Temporal Element object.
    MEMBER PROCEDURE f_ass_temp_element(te1 D_Temp_Element_M) is
    te_string Varchar2(32766) := '';
    begin
         te_string := to_string();
         te_string := D_TE_M_Package.f_ass_temp_element(te_string, te1.to_string());
         to_temporal_element(te_string);
    end;

    --Adds a Temporal Element to the Temporal Element object. The result is all the times which belong to both the Temporal Element objects.
    MEMBER PROCEDURE f_add_temp_element(te1 D_Temp_Element_M) is
    te_string Varchar2(32766) := '';
    begin
         te_string := to_string();
         te_string := D_TE_M_Package.f_add_temp_element(te_string, te1.to_string());
         to_temporal_element(te_string);
    end;

    --Adds a Period to the Temporal Element object. The result is all the times which belong to either the Period and the Temporal Element.
    MEMBER PROCEDURE f_add_period(p D_Period_M) is
    te_string Varchar2(32766) := '';
    begin
         te_string := to_string();
         te_string := D_TE_M_Package.f_add_period(te_string, p.b.m_y, p.b.m_m, p.e.m_y, p.e.m_m);
         to_temporal_element(te_string);
    end;

    --Subtracts a Temporal Element from the Temporal Element object. The result is all the times which are included in the current Temporal Elementbut not in the other one.
    MEMBER PROCEDURE f_sub_temp_element(te1 D_Temp_Element_M) is
    te_string Varchar2(32766) := '';
    begin
         te_string := to_string();
         te_string := D_TE_M_Package.f_sub_temp_element(te_string, te1.to_string());
         to_temporal_element(te_string);
    end;

    --Subtracts a Period from the Temporal Element object. The result is all the times which are included in the current Temporal Element but not in the Period.
    MEMBER PROCEDURE f_sub_period(p D_Period_M) is
    te_string Varchar2(32766) := '';
    begin
         te_string := to_string();
         te_string := D_TE_M_Package.f_sub_period(te_string, p.b.m_y, p.b.m_m, p.e.m_y, p.e.m_m);
         to_temporal_element(te_string);
    end;

    --Constructs a Temporal Element adding a Period to an existing Temporal Element.
    MEMBER FUNCTION f_add(te1 D_Temp_Element_M, p D_Period_M) return D_Temp_Element_M is
    str Varchar2(32766) := '';
    begin
         str := D_TE_M_Package.f_add(to_string(), te1.to_string(), p.b.m_y, p.b.m_m, p.e.m_y, p.e.m_m);
         return D_Temp_Element_M(return_temporal_element(str));
    end;

    --Constructs a Temporal Element adding two Temporal Elements.
    MEMBER FUNCTION f_add(te1 D_Temp_Element_M, te2 D_Temp_Element_M) return D_Temp_Element_M is
    str Varchar2(32766) := '';
    begin
         str := D_TE_M_Package.f_add(to_string(), te1.to_string(), te2.to_string());
         return D_Temp_Element_M(return_temporal_element(str));
    end;

    --Constructs a Temporal Element subtracting a Period to an existing Temporal Element.
    MEMBER FUNCTION f_sub(te1 D_Temp_Element_M, p D_Period_M) return D_Temp_Element_M is
    str Varchar2(32766) := '';
    begin
         str := D_TE_M_Package.f_sub(to_string(), te1.to_string(), p.b.m_y, p.b.m_m, p.e.m_y, p.e.m_m);
         return D_Temp_Element_M(return_temporal_element(str));
    end;

    --Constructs a Temporal Element subtracting two Temporal Elements.
    MEMBER FUNCTION f_sub(te1 D_Temp_Element_M, te2 D_Temp_Element_M) return D_Temp_Element_M is
    str Varchar2(32766) := '';
    begin
         str := D_TE_M_Package.f_sub(to_string(), te1.to_string(), te2.to_string());
         return D_Temp_Element_M(return_temporal_element(str));
    end;

    --Returns a Temporal Element object representing the intersection between a Temporal Element and a Timepoint.
    MEMBER FUNCTION intersects(te1 D_Temp_Element_M, tp D_Timepoint_M) return D_Temp_Element_M is
    str Varchar2(32766) := '';
    begin
         str := D_TE_M_Package.intersects(to_string(), te1.to_string(), tp.m_y, tp.m_m);
         return D_Temp_Element_M(return_temporal_element(str));
    end;

    --Returns a Temporal Element object representing the intersection between a Temporal Element and a Period.
    MEMBER FUNCTION intersects(te1 D_Temp_Element_M, p D_Period_M) return D_Temp_Element_M is
    str Varchar2(32766) := '';
    begin
         str := D_TE_M_Package.intersects(to_string(), te1.to_string(), p.b.m_y, p.b.m_m, p.e.m_y, p.e.m_m);
         return D_Temp_Element_M(return_temporal_element(str));
    end;

    --Returns a Temporal Element object representing the intersection between two Temporal Elements.
    MEMBER FUNCTION intersects(te1 D_Temp_Element_M, te2 D_Temp_Element_M) return D_Temp_Element_M is
    str Varchar2(32766) := '';
    begin
         str := D_TE_M_Package.intersects(to_string(), te1.to_string(), te2.to_string());
         return D_Temp_Element_M(return_temporal_element(str));
    end;

    --Returns true if the Temporal Elements have the same value.
    MEMBER FUNCTION f_eq(te1 D_Temp_Element_M, te2 D_Temp_Element_M) return pls_integer is
    i pls_integer := D_TE_M_Package.f_eq(to_string(), te1.to_string(), te2.to_string());
    begin
         return i;
    end;

    --Returns true if the Temporal Elements have different value.
    MEMBER FUNCTION f_n_eq(te1 D_Temp_Element_M, te2 D_Temp_Element_M) return pls_integer is
    i pls_integer := D_TE_M_Package.f_n_eq(to_string(), te1.to_string(), te2.to_string());
    begin
         return i;
    end;

    --Returns true if the Temporal Element overlaps the Timepoint.
    MEMBER FUNCTION f_overlaps(te1 D_Temp_Element_M, tp D_Timepoint_M) return pls_integer is
    i pls_integer := D_TE_M_Package.f_overlaps(to_string(), te1.to_string(), tp.m_y, tp.m_m);
    begin
         return i;
    end;

    --Returns true if the Temporal Element precedes the Timepoint.
    MEMBER FUNCTION f_precedes(te1 D_Temp_Element_M, tp D_Timepoint_M) return pls_integer is
    i pls_integer := D_TE_M_Package.f_precedes(to_string(), te1.to_string(), tp.m_y, tp.m_m);
    begin
         return i;
    end;

    --Returns true if the Temporal Element meets the Timepoint.
    MEMBER FUNCTION f_meets(te1 D_Temp_Element_M, tp D_Timepoint_M) return pls_integer is
    i pls_integer := D_TE_M_Package.f_meets(to_string(), te1.to_string(), tp.m_y, tp.m_m);
    begin
         return i;
    end;

    --Returns true if the Temporal Element equal the Timepoint.
    MEMBER FUNCTION f_equal(te1 D_Temp_Element_M, tp D_Timepoint_M) return pls_integer is
    i pls_integer := D_TE_M_Package.f_equal(to_string(), te1.to_string(), tp.m_y, tp.m_m);
    begin
         return i;
    end;

    --Returns true if the Temporal Element contains the Timepoint.
    MEMBER FUNCTION f_contains(te1 D_Temp_Element_M, tp D_Timepoint_M) return pls_integer is
    i pls_integer := D_TE_M_Package.f_contains(to_string(), te1.to_string(), tp.m_y, tp.m_m);
    begin
         return i;
    end;

    --Returns true if the Temporal Element overlaps the Period
    MEMBER FUNCTION f_overlaps(te1 D_Temp_Element_M, p D_Period_M) return pls_integer is
    i pls_integer := D_TE_M_Package.f_overlaps(to_string(), te1.to_string(), p.b.m_y, p.b.m_m, p.e.m_y, p.e.m_m);
    begin
         return i;
    end;

    --Returns true if the Temporal Element precedes the Period
    MEMBER FUNCTION f_precedes(te1 D_Temp_Element_M, p D_Period_M) return pls_integer is
    i pls_integer := D_TE_M_Package.f_precedes(to_string(), te1.to_string(), p.b.m_y, p.b.m_m, p.e.m_y, p.e.m_m);
    begin
         return i;
    end;

    --Returns true if the Temporal Element meets the Period
    MEMBER FUNCTION f_meets(te1 D_Temp_Element_M, p D_Period_M) return pls_integer is
    i pls_integer := D_TE_M_Package.f_meets(to_string(), te1.to_string(), p.b.m_y, p.b.m_m, p.e.m_y, p.e.m_m);
    begin
         return i;
    end;

    --Returns true if the Temporal Element equal the Period
    MEMBER FUNCTION f_equal(te1 D_Temp_Element_M, p D_Period_M) return pls_integer is
    i pls_integer := D_TE_M_Package.f_equal(to_string(), te1.to_string(), p.b.m_y, p.b.m_m, p.e.m_y, p.e.m_m);
    begin
         return i;
    end;

    --Returns true if the Temporal Element contains the Period
    MEMBER FUNCTION f_contains(te1 D_Temp_Element_M, p D_Period_M) return pls_integer is
    i pls_integer := D_TE_M_Package.f_contains(to_string(), te1.to_string(), p.b.m_y, p.b.m_m, p.e.m_y, p.e.m_m);
    begin
         return i;
    end;

    --Returns true if two Temporal Elements overlap.
    MEMBER FUNCTION f_overlaps(te1 D_Temp_Element_M, te2 D_Temp_Element_M) return pls_integer is
    i pls_integer := D_TE_M_Package.f_overlaps(to_string(), te1.to_string(), te2.to_string());
    begin
         return i;
    end;

    --Returns true if the first Temporal Element precedes the second Temporal Element.
    MEMBER FUNCTION f_precedes(te1 D_Temp_Element_M, te2 D_Temp_Element_M) return pls_integer is
    i pls_integer := D_TE_M_Package.f_precedes(to_string(), te1.to_string(), te2.to_string());
    begin
         return i;
    end;

    --Returns true if the first Temporal Element meets the second Temporal Element.
    MEMBER FUNCTION f_meets(te1 D_Temp_Element_M, te2 D_Temp_Element_M) return pls_integer is
    i pls_integer := D_TE_M_Package.f_meets(to_string(), te1.to_string(), te2.to_string());
    begin
         return i;
    end;

    --Returns true if the first Temporal Element is equal to second Temporal Element.
    MEMBER FUNCTION f_equal(te1 D_Temp_Element_M, te2 D_Temp_Element_M) return pls_integer is
    i pls_integer := D_TE_M_Package.f_equal(to_string(), te1.to_string(), te2.to_string());
    begin
         return i;
    end;

    --Returns true if the first Temporal Element contains the second Temporal Element.
    MEMBER FUNCTION f_contains(te1 D_Temp_Element_M, te2 D_Temp_Element_M) return pls_integer is
    i pls_integer := D_TE_M_Package.f_contains(to_string(), te1.to_string(), te2.to_string());
    begin
         return i;
    end;

end;
/

-- Type body D_TEMP_ELEMENT_D

CREATE OR REPLACE
type body D_Temp_Element_D is

    --Creates a string for the Temporal Element object.
    MEMBER FUNCTION to_string return Varchar2 is
    i pls_integer;
    s Varchar2(32766) := '';
    begin
         i := te.FIRST;  -- get subscript of first element
         WHILE i IS NOT NULL LOOP
            s := concat(s, TO_CHAR(te(i).b.m_y));
            s := concat(s, ',');
            s := concat(s, TO_CHAR(te(i).b.m_m));
            s := concat(s, ',');
            s := concat(s, TO_CHAR(te(i).b.m_d));
            s := concat(s, ',');
            s := concat(s, TO_CHAR(te(i).e.m_y));
            s := concat(s, ',');
            s := concat(s, TO_CHAR(te(i).e.m_m));
            s := concat(s, ',');
            s := concat(s, TO_CHAR(te(i).e.m_d));
            s := concat(s, '#');

            i := te.NEXT(i);  -- get subscript of next element
         END LOOP;

         return s;
    end;

    --Creates a Temporal Element object from the string and assigns it to the current TE.
    MEMBER PROCEDURE to_temporal_element(te_string Varchar2) is
    new_te Temp_Element_D;
    s Varchar2(32000);
    t1 pls_integer :=0;
    t2 pls_integer :=0;
    t3 pls_integer :=0;
    t4 pls_integer :=0;
    t5 pls_integer :=0;
    t6 pls_integer :=0;
    i pls_integer :=0;

    begin
        s := te_string;
        new_te := Temp_Element_D();

        WHILE LENGTH(s) != 0 LOOP
            t1 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t2 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t3 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t4 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t5 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t6 := TO_NUMBER( LPAD(s, INSTR(s, '#') - 1) );
            s :=  SUBSTR(s, INSTR(s,'#') + 1, LENGTH(s) - INSTR(s,'#') + 1 );

            new_te.EXTEND;
            i := new_te.LAST;
            new_te(i) := D_Period_D(D_Timepoint_D(t1, t2, t3), D_Timepoint_D(t4, t5, t6));
        END LOOP;

        te := new_te;
    end;

    --Creates a Temporal Element object from the string and returns it.
    MEMBER FUNCTION return_temporal_element(te_string Varchar2) return Temp_Element_D is
    new_te Temp_Element_D;
    s Varchar2(32000);
    t1 pls_integer :=0;
    t2 pls_integer :=0;
    t3 pls_integer :=0;
    t4 pls_integer :=0;
    t5 pls_integer :=0;
    t6 pls_integer :=0;
    i pls_integer :=0;

    begin
        s := te_string;
        new_te := Temp_Element_D();

        WHILE LENGTH(s) != 0 LOOP
            t1 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t2 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t3 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t4 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t5 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t6 := TO_NUMBER( LPAD(s, INSTR(s, '#') - 1) );
            s :=  SUBSTR(s, INSTR(s,'#') + 1, LENGTH(s) - INSTR(s,'#') + 1 );

            new_te.EXTEND;
            i := new_te.LAST;
            new_te(i) := D_Period_D(D_Timepoint_D(t1, t2, t3), D_Timepoint_D(t4, t5, t6));
        END LOOP;

        return new_te;
    end;

    --Returns the first Period of the Temporal Element object.
    MEMBER FUNCTION f_begin return D_Period_D is
    b_y pls_integer := 0;
    b_m pls_integer := 0;
    b_d pls_integer := 0;
    e_y pls_integer := 0;
    e_m pls_integer := 0;
    e_d pls_integer := 0;
    begin
         D_TE_D_Package.f_begin(to_string(), b_y, b_m, b_d, e_y, e_m, e_d);
         return D_Period_D(D_Timepoint_D(b_y, b_m, b_d), D_Timepoint_D(e_y, e_m, e_d));
    end;

    --Returns the last Period of the Temporal Element object.
    MEMBER FUNCTION f_end return D_Period_D is
    b_y pls_integer := 0;
    b_m pls_integer := 0;
    b_d pls_integer := 0;
    e_y pls_integer := 0;
    e_m pls_integer := 0;
    e_d pls_integer := 0;
    begin
         D_TE_D_Package.f_end(to_string(), b_y, b_m, b_d, e_y, e_m, e_d);
         return D_Period_D(D_Timepoint_D(b_y, b_m, b_d), D_Timepoint_D(e_y, e_m, e_d));
    end;

    --Returns the Granularity of the Temporal Element object.
    MEMBER FUNCTION get_granularity return pls_integer is
    g pls_integer := D_TE_D_Package.get_granularity(to_string());
    begin
         return g;
    end;

    --Returns an Interval object representing the sum of the duration of the Periods in the Temporal Element object.
    MEMBER FUNCTION duration return D_Interval is
    i_Value double precision := 0;
    begin
        D_TE_D_Package.duration(to_string(), i_Value);
        return D_Interval(i_Value);
    end;

    --Returns the number of Periods contained in the Temporal Element object.
    MEMBER FUNCTION cardinality return pls_integer is
    c pls_integer := D_TE_D_Package.cardinality(to_string());
    begin
         return c;
    end;

    --Returns the Period number num inside the Temporal Element object.
    MEMBER FUNCTION go(num pls_integer) return D_Period_D is
    b_y pls_integer := 0;
    b_m pls_integer := 0;
    b_d pls_integer := 0;
    e_y pls_integer := 0;
    e_m pls_integer := 0;
    e_d pls_integer := 0;
    begin
         D_TE_D_Package.go(to_string(), num, b_y, b_m, b_d, e_y, e_m, e_d);
         return D_Period_D(D_Timepoint_D(b_y, b_m, b_d), D_Timepoint_D(e_y, e_m, e_d));
    end;

    --Assigns the value of another Temporal Element to the Temporal Element object.
    MEMBER PROCEDURE f_ass_temp_element(te1 D_Temp_Element_D) is
    te_string Varchar2(32766) := '';
    begin
         te_string := to_string();
         te_string := D_TE_D_Package.f_ass_temp_element(te_string, te1.to_string());
         to_temporal_element(te_string);
    end;

    --Adds a Temporal Element to the Temporal Element object. The result is all the times which belong to both the Temporal Element objects.
    MEMBER PROCEDURE f_add_temp_element(te1 D_Temp_Element_D) is
    te_string Varchar2(32766) := '';
    begin
         te_string := to_string();
         te_string := D_TE_D_Package.f_add_temp_element(te_string, te1.to_string());
         to_temporal_element(te_string);
    end;

    --Adds a Period to the Temporal Element object. The result is all the times which belong to either the Period and the Temporal Element.
    MEMBER PROCEDURE f_add_period(p D_Period_D) is
    te_string Varchar2(32766) := '';
    begin
         te_string := to_string();
         te_string := D_TE_D_Package.f_add_period(te_string, p.b.m_y, p.b.m_m, p.b.m_d, p.e.m_y, p.e.m_m, p.e.m_d);
         to_temporal_element(te_string);
    end;

    --Subtracts a Temporal Element from the Temporal Element object. The result is all the times which are included in the current Temporal Elementbut not in the other one.
    MEMBER PROCEDURE f_sub_temp_element(te1 D_Temp_Element_D) is
    te_string Varchar2(32766) := '';
    begin
         te_string := to_string();
         te_string := D_TE_D_Package.f_sub_temp_element(te_string, te1.to_string());
         to_temporal_element(te_string);
    end;

    --Subtracts a Period from the Temporal Element object. The result is all the times which are included in the current Temporal Element but not in the Period.
    MEMBER PROCEDURE f_sub_period(p D_Period_D) is
    te_string Varchar2(32766) := '';
    begin
         te_string := to_string();
         te_string := D_TE_D_Package.f_sub_period(te_string, p.b.m_y, p.b.m_m, p.b.m_d, p.e.m_y, p.e.m_m, p.e.m_d);
         to_temporal_element(te_string);
    end;

    --Constructs a Temporal Element adding a Period to an existing Temporal Element.
    MEMBER FUNCTION f_add(te1 D_Temp_Element_D, p D_Period_D) return D_Temp_Element_D is
    str Varchar2(32766) := '';
    begin
         str := D_TE_D_Package.f_add(to_string(), te1.to_string(), p.b.m_y, p.b.m_m, p.b.m_d, p.e.m_y, p.e.m_m, p.e.m_d);
         return D_Temp_Element_D(return_temporal_element(str));
    end;

    --Constructs a Temporal Element adding two Temporal Elements.
    MEMBER FUNCTION f_add(te1 D_Temp_Element_D, te2 D_Temp_Element_D) return D_Temp_Element_D is
    str Varchar2(32766) := '';
    begin
         str := D_TE_D_Package.f_add(to_string(), te1.to_string(), te2.to_string());
         return D_Temp_Element_D(return_temporal_element(str));
    end;

    --Constructs a Temporal Element subtracting a Period to an existing Temporal Element.
    MEMBER FUNCTION f_sub(te1 D_Temp_Element_D, p D_Period_D) return D_Temp_Element_D is
    str Varchar2(32766) := '';
    begin
         str := D_TE_D_Package.f_sub(to_string(), te1.to_string(), p.b.m_y, p.b.m_m, p.b.m_d, p.e.m_y, p.e.m_m, p.e.m_d);
         return D_Temp_Element_D(return_temporal_element(str));
    end;

    --Constructs a Temporal Element subtracting two Temporal Elements.
    MEMBER FUNCTION f_sub(te1 D_Temp_Element_D, te2 D_Temp_Element_D) return D_Temp_Element_D is
    str Varchar2(32766) := '';
    begin
         str := D_TE_D_Package.f_sub(to_string(), te1.to_string(), te2.to_string());
         return D_Temp_Element_D(return_temporal_element(str));
    end;

    --Returns a Temporal Element object representing the intersection between a Temporal Element and a Timepoint.
    MEMBER FUNCTION intersects(te1 D_Temp_Element_D, tp D_Timepoint_D) return D_Temp_Element_D is
    str Varchar2(32766) := '';
    begin
         str := D_TE_D_Package.intersects(to_string(), te1.to_string(), tp.m_y, tp.m_m, tp.m_d);
         return D_Temp_Element_D(return_temporal_element(str));
    end;

    --Returns a Temporal Element object representing the intersection between a Temporal Element and a Period.
    MEMBER FUNCTION intersects(te1 D_Temp_Element_D, p D_Period_D) return D_Temp_Element_D is
    str Varchar2(32766) := '';
    begin
         str := D_TE_D_Package.intersects(to_string(), te1.to_string(), p.b.m_y, p.b.m_m, p.b.m_d, p.e.m_y, p.e.m_m, p.e.m_d);
         return D_Temp_Element_D(return_temporal_element(str));
    end;

    --Returns a Temporal Element object representing the intersection between two Temporal Elements.
    MEMBER FUNCTION intersects(te1 D_Temp_Element_D, te2 D_Temp_Element_D) return D_Temp_Element_D is
    str Varchar2(32766) := '';
    begin
         str := D_TE_D_Package.intersects(to_string(), te1.to_string(), te2.to_string());
         return D_Temp_Element_D(return_temporal_element(str));
    end;

    --Returns true if the Temporal Elements have the same value.
    MEMBER FUNCTION f_eq(te1 D_Temp_Element_D, te2 D_Temp_Element_D) return pls_integer is
    i pls_integer := D_TE_D_Package.f_eq(to_string(), te1.to_string(), te2.to_string());
    begin
         return i;
    end;

    --Returns true if the Temporal Elements have different value.
    MEMBER FUNCTION f_n_eq(te1 D_Temp_Element_D, te2 D_Temp_Element_D) return pls_integer is
    i pls_integer := D_TE_D_Package.f_n_eq(to_string(), te1.to_string(), te2.to_string());
    begin
         return i;
    end;

    --Returns true if the Temporal Element overlaps the Timepoint.
    MEMBER FUNCTION f_overlaps(te1 D_Temp_Element_D, tp D_Timepoint_D) return pls_integer is
    i pls_integer := D_TE_D_Package.f_overlaps(to_string(), te1.to_string(), tp.m_y, tp.m_m, tp.m_d);
    begin
         return i;
    end;

    --Returns true if the Temporal Element precedes the Timepoint.
    MEMBER FUNCTION f_precedes(te1 D_Temp_Element_D, tp D_Timepoint_D) return pls_integer is
    i pls_integer := D_TE_D_Package.f_precedes(to_string(), te1.to_string(), tp.m_y, tp.m_m, tp.m_d);
    begin
         return i;
    end;

    --Returns true if the Temporal Element meets the Timepoint.
    MEMBER FUNCTION f_meets(te1 D_Temp_Element_D, tp D_Timepoint_D) return pls_integer is
    i pls_integer := D_TE_D_Package.f_meets(to_string(), te1.to_string(), tp.m_y, tp.m_m, tp.m_d);
    begin
         return i;
    end;

    --Returns true if the Temporal Element equal the Timepoint.
    MEMBER FUNCTION f_equal(te1 D_Temp_Element_D, tp D_Timepoint_D) return pls_integer is
    i pls_integer := D_TE_D_Package.f_equal(to_string(), te1.to_string(), tp.m_y, tp.m_m, tp.m_d);
    begin
         return i;
    end;

    --Returns true if the Temporal Element contains the Timepoint.
    MEMBER FUNCTION f_contains(te1 D_Temp_Element_D, tp D_Timepoint_D) return pls_integer is
    i pls_integer := D_TE_D_Package.f_contains(to_string(), te1.to_string(), tp.m_y, tp.m_m, tp.m_d);
    begin
         return i;
    end;

    --Returns true if the Temporal Element overlaps the Period
    MEMBER FUNCTION f_overlaps(te1 D_Temp_Element_D, p D_Period_D) return pls_integer is
    i pls_integer := D_TE_D_Package.f_overlaps(to_string(), te1.to_string(), p.b.m_y, p.b.m_m, p.b.m_d, p.e.m_y, p.e.m_m, p.e.m_d);
    begin
         return i;
    end;

    --Returns true if the Temporal Element precedes the Period
    MEMBER FUNCTION f_precedes(te1 D_Temp_Element_D, p D_Period_D) return pls_integer is
    i pls_integer := D_TE_D_Package.f_precedes(to_string(), te1.to_string(), p.b.m_y, p.b.m_m, p.b.m_d, p.e.m_y, p.e.m_m, p.e.m_d);
    begin
         return i;
    end;

    --Returns true if the Temporal Element meets the Period
    MEMBER FUNCTION f_meets(te1 D_Temp_Element_D, p D_Period_D) return pls_integer is
    i pls_integer := D_TE_D_Package.f_meets(to_string(), te1.to_string(), p.b.m_y, p.b.m_m, p.b.m_d, p.e.m_y, p.e.m_m, p.e.m_d);
    begin
         return i;
    end;

    --Returns true if the Temporal Element equal the Period
    MEMBER FUNCTION f_equal(te1 D_Temp_Element_D, p D_Period_D) return pls_integer is
    i pls_integer := D_TE_D_Package.f_equal(to_string(), te1.to_string(), p.b.m_y, p.b.m_m, p.b.m_d, p.e.m_y, p.e.m_m, p.e.m_d);
    begin
         return i;
    end;

    --Returns true if the Temporal Element contains the Period
    MEMBER FUNCTION f_contains(te1 D_Temp_Element_D, p D_Period_D) return pls_integer is
    i pls_integer := D_TE_D_Package.f_contains(to_string(), te1.to_string(), p.b.m_y, p.b.m_m, p.b.m_d, p.e.m_y, p.e.m_m, p.e.m_d);
    begin
         return i;
    end;

    --Returns true if two Temporal Elements overlap.
    MEMBER FUNCTION f_overlaps(te1 D_Temp_Element_D, te2 D_Temp_Element_D) return pls_integer is
    i pls_integer := D_TE_D_Package.f_overlaps(to_string(), te1.to_string(), te2.to_string());
    begin
         return i;
    end;

    --Returns true if the first Temporal Element precedes the second Temporal Element.
    MEMBER FUNCTION f_precedes(te1 D_Temp_Element_D, te2 D_Temp_Element_D) return pls_integer is
    i pls_integer := D_TE_D_Package.f_precedes(to_string(), te1.to_string(), te2.to_string());
    begin
         return i;
    end;

    --Returns true if the first Temporal Element meets the second Temporal Element.
    MEMBER FUNCTION f_meets(te1 D_Temp_Element_D, te2 D_Temp_Element_D) return pls_integer is
    i pls_integer := D_TE_D_Package.f_meets(to_string(), te1.to_string(), te2.to_string());
    begin
         return i;
    end;

    --Returns true if the first Temporal Element is equal to second Temporal Element.
    MEMBER FUNCTION f_equal(te1 D_Temp_Element_D, te2 D_Temp_Element_D) return pls_integer is
    i pls_integer := D_TE_D_Package.f_equal(to_string(), te1.to_string(), te2.to_string());
    begin
         return i;
    end;

    --Returns true if the first Temporal Element contains the second Temporal Element.
    MEMBER FUNCTION f_contains(te1 D_Temp_Element_D, te2 D_Temp_Element_D) return pls_integer is
    i pls_integer := D_TE_D_Package.f_contains(to_string(), te1.to_string(), te2.to_string());
    begin
         return i;
    end;

end;
/

-- Type body D_TEMP_ELEMENT_H

CREATE OR REPLACE
type body D_Temp_Element_H is

    --Creates a string for the Temporal Element object.
    MEMBER FUNCTION to_string return Varchar2 is
    i pls_integer;
    s Varchar2(32766) := '';
    begin
         i := te.FIRST;  -- get subscript of first element
         WHILE i IS NOT NULL LOOP
            s := concat(s, TO_CHAR(te(i).b.m_y));
            s := concat(s, ',');
            s := concat(s, TO_CHAR(te(i).b.m_m));
            s := concat(s, ',');
            s := concat(s, TO_CHAR(te(i).b.m_d));
            s := concat(s, ',');
            s := concat(s, TO_CHAR(te(i).b.m_h));
            s := concat(s, ',');
            s := concat(s, TO_CHAR(te(i).e.m_y));
            s := concat(s, ',');
            s := concat(s, TO_CHAR(te(i).e.m_m));
            s := concat(s, ',');
            s := concat(s, TO_CHAR(te(i).e.m_d));
            s := concat(s, ',');
            s := concat(s, TO_CHAR(te(i).e.m_h));
            s := concat(s, '#');

            i := te.NEXT(i);  -- get subscript of next element
         END LOOP;

         return s;
    end;

    --Creates a Temporal Element object from the string and assigns it to the current TE.
    MEMBER PROCEDURE to_temporal_element(te_string Varchar2) is
    new_te Temp_Element_H;
    s Varchar2(32000);
    t1 pls_integer :=0;
    t2 pls_integer :=0;
    t3 pls_integer :=0;
    t4 pls_integer :=0;
    t5 pls_integer :=0;
    t6 pls_integer :=0;
    t7 pls_integer :=0;
    t8 pls_integer :=0;
    i pls_integer :=0;

    begin
        s := te_string;
        new_te := Temp_Element_H();

        WHILE LENGTH(s) != 0 LOOP
            t1 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t2 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t3 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t4 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t5 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t6 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t7 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t8 := TO_NUMBER( LPAD(s, INSTR(s, '#') - 1) );
            s :=  SUBSTR(s, INSTR(s,'#') + 1, LENGTH(s) - INSTR(s,'#') + 1 );

            new_te.EXTEND;
            i := new_te.LAST;
            new_te(i) := D_Period_H(D_Timepoint_H(t1, t2, t3, t4), D_Timepoint_H(t5, t6, t7, t8));
        END LOOP;

        te := new_te;
    end;

    --Creates a Temporal Element object from the string and returns it.
    MEMBER FUNCTION return_temporal_element(te_string Varchar2) return Temp_Element_H is
    new_te Temp_Element_H;
    s Varchar2(32000);
    t1 pls_integer :=0;
    t2 pls_integer :=0;
    t3 pls_integer :=0;
    t4 pls_integer :=0;
    t5 pls_integer :=0;
    t6 pls_integer :=0;
    t7 pls_integer :=0;
    t8 pls_integer :=0;
    i pls_integer :=0;

    begin
        s := te_string;
        new_te := Temp_Element_H();

        WHILE LENGTH(s) != 0 LOOP
            t1 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t2 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t3 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t4 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t5 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t6 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t7 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t8 := TO_NUMBER( LPAD(s, INSTR(s, '#') - 1) );
            s :=  SUBSTR(s, INSTR(s,'#') + 1, LENGTH(s) - INSTR(s,'#') + 1 );

            new_te.EXTEND;
            i := new_te.LAST;
            new_te(i) := D_Period_H(D_Timepoint_H(t1, t2, t3, t4), D_Timepoint_H(t5, t6, t7, t8));
        END LOOP;

        return new_te;
    end;

    --Returns the first Period of the Temporal Element object.
    MEMBER FUNCTION f_begin return D_Period_H is
    b_y pls_integer := 0;
    b_m pls_integer := 0;
    b_d pls_integer := 0;
    b_h pls_integer := 0;
    e_y pls_integer := 0;
    e_m pls_integer := 0;
    e_d pls_integer := 0;
    e_h pls_integer := 0;
    begin
         D_TE_H_Package.f_begin(to_string(), b_y, b_m, b_d, b_h, e_y, e_m, e_d, e_h);
         return D_Period_H(D_Timepoint_H(b_y, b_m, b_d, b_h), D_Timepoint_H(e_y, e_m, e_d, e_h));
    end;

    --Returns the last Period of the Temporal Element object.
    MEMBER FUNCTION f_end return D_Period_H is
    b_y pls_integer := 0;
    b_m pls_integer := 0;
    b_d pls_integer := 0;
    b_h pls_integer := 0;
    e_y pls_integer := 0;
    e_m pls_integer := 0;
    e_d pls_integer := 0;
    e_h pls_integer := 0;
    begin
         D_TE_H_Package.f_end(to_string(), b_y, b_m, b_d, b_h, e_y, e_m, e_d, e_h);
         return D_Period_H(D_Timepoint_H(b_y, b_m, b_d, b_h), D_Timepoint_H(e_y, e_m, e_d, e_h));
    end;

    --Returns the Granularity of the Temporal Element object.
    MEMBER FUNCTION get_granularity return pls_integer is
    g pls_integer := D_TE_H_Package.get_granularity(to_string());
    begin
         return g;
    end;

    --Returns an Interval object representing the sum of the duration of the Periods in the Temporal Element object.
    MEMBER FUNCTION duration return D_Interval is
    i_Value double precision := 0;
    begin
        D_TE_H_Package.duration(to_string(), i_Value);
        return D_Interval(i_Value);
    end;

    --Returns the number of Periods contained in the Temporal Element object.
    MEMBER FUNCTION cardinality return pls_integer is
    c pls_integer := D_TE_H_Package.cardinality(to_string());
    begin
         return c;
    end;

    --Returns the Period number num inside the Temporal Element object.
    MEMBER FUNCTION go(num pls_integer) return D_Period_H is
    b_y pls_integer := 0;
    b_m pls_integer := 0;
    b_d pls_integer := 0;
    b_h pls_integer := 0;
    e_y pls_integer := 0;
    e_m pls_integer := 0;
    e_d pls_integer := 0;
    e_h pls_integer := 0;
    begin
         D_TE_H_Package.go(to_string(), num, b_y, b_m, b_d, b_h, e_y, e_m, e_d, e_h);
         return D_Period_H(D_Timepoint_H(b_y, b_m, b_d, b_h), D_Timepoint_H(e_y, e_m, e_d, e_h));
    end;

    --Assigns the value of another Temporal Element to the Temporal Element object.
    MEMBER PROCEDURE f_ass_temp_element(te1 D_Temp_Element_H) is
    te_string Varchar2(32766) := '';
    begin
         te_string := to_string();
         te_string := D_TE_H_Package.f_ass_temp_element(te_string, te1.to_string());
         to_temporal_element(te_string);
    end;

    --Adds a Temporal Element to the Temporal Element object. The result is all the times which belong to both the Temporal Element objects.
    MEMBER PROCEDURE f_add_temp_element(te1 D_Temp_Element_H) is
    te_string Varchar2(32766) := '';
    begin
         te_string := to_string();
         te_string := D_TE_H_Package.f_add_temp_element(te_string, te1.to_string());
         to_temporal_element(te_string);
    end;

    --Adds a Period to the Temporal Element object. The result is all the times which belong to either the Period and the Temporal Element.
    MEMBER PROCEDURE f_add_period(p D_Period_H) is
    te_string Varchar2(32766) := '';
    begin
         te_string := to_string();
         te_string := D_TE_H_Package.f_add_period(te_string, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h);
         to_temporal_element(te_string);
    end;

    --Subtracts a Temporal Element from the Temporal Element object. The result is all the times which are included in the current Temporal Elementbut not in the other one.
    MEMBER PROCEDURE f_sub_temp_element(te1 D_Temp_Element_H) is
    te_string Varchar2(32766) := '';
    begin
         te_string := to_string();
         te_string := D_TE_H_Package.f_sub_temp_element(te_string, te1.to_string());
         to_temporal_element(te_string);
    end;

    --Subtracts a Period from the Temporal Element object. The result is all the times which are included in the current Temporal Element but not in the Period.
    MEMBER PROCEDURE f_sub_period(p D_Period_H) is
    te_string Varchar2(32766) := '';
    begin
         te_string := to_string();
         te_string := D_TE_H_Package.f_sub_period(te_string, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h);
         to_temporal_element(te_string);
    end;

    --Constructs a Temporal Element adding a Period to an existing Temporal Element.
    MEMBER FUNCTION f_add(te1 D_Temp_Element_H, p D_Period_H) return D_Temp_Element_H is
    str Varchar2(32766) := '';
    begin
         str := D_TE_H_Package.f_add(to_string(), te1.to_string(), p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h);
         return D_Temp_Element_H(return_temporal_element(str));
    end;

    --Constructs a Temporal Element adding two Temporal Elements.
    MEMBER FUNCTION f_add(te1 D_Temp_Element_H, te2 D_Temp_Element_H) return D_Temp_Element_H is
    str Varchar2(32766) := '';
    begin
         str := D_TE_H_Package.f_add(to_string(), te1.to_string(), te2.to_string());
         return D_Temp_Element_H(return_temporal_element(str));
    end;

    --Constructs a Temporal Element subtracting a Period to an existing Temporal Element.
    MEMBER FUNCTION f_sub(te1 D_Temp_Element_H, p D_Period_H) return D_Temp_Element_H is
    str Varchar2(32766) := '';
    begin
         str := D_TE_H_Package.f_sub(to_string(), te1.to_string(), p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h);
         return D_Temp_Element_H(return_temporal_element(str));
    end;

    --Constructs a Temporal Element subtracting two Temporal Elements.
    MEMBER FUNCTION f_sub(te1 D_Temp_Element_H, te2 D_Temp_Element_H) return D_Temp_Element_H is
    str Varchar2(32766) := '';
    begin
         str := D_TE_H_Package.f_sub(to_string(), te1.to_string(), te2.to_string());
         return D_Temp_Element_H(return_temporal_element(str));
    end;

    --Returns a Temporal Element object representing the intersection between a Temporal Element and a Timepoint.
    MEMBER FUNCTION intersects(te1 D_Temp_Element_H, tp D_Timepoint_H) return D_Temp_Element_H is
    str Varchar2(32766) := '';
    begin
         str := D_TE_H_Package.intersects(to_string(), te1.to_string(), tp.m_y, tp.m_m, tp.m_d, tp.m_h);
         return D_Temp_Element_H(return_temporal_element(str));
    end;

    --Returns a Temporal Element object representing the intersection between a Temporal Element and a Period.
    MEMBER FUNCTION intersects(te1 D_Temp_Element_H, p D_Period_H) return D_Temp_Element_H is
    str Varchar2(32766) := '';
    begin
         str := D_TE_H_Package.intersects(to_string(), te1.to_string(), p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h);
         return D_Temp_Element_H(return_temporal_element(str));
    end;

    --Returns a Temporal Element object representing the intersection between two Temporal Elements.
    MEMBER FUNCTION intersects(te1 D_Temp_Element_H, te2 D_Temp_Element_H) return D_Temp_Element_H is
    str Varchar2(32766) := '';
    begin
         str := D_TE_H_Package.intersects(to_string(), te1.to_string(), te2.to_string());
         return D_Temp_Element_H(return_temporal_element(str));
    end;

    --Returns true if the Temporal Elements have the same value.
    MEMBER FUNCTION f_eq(te1 D_Temp_Element_H, te2 D_Temp_Element_H) return pls_integer is
    i pls_integer := D_TE_H_Package.f_eq(to_string(), te1.to_string(), te2.to_string());
    begin
         return i;
    end;

    --Returns true if the Temporal Elements have different value.
    MEMBER FUNCTION f_n_eq(te1 D_Temp_Element_H, te2 D_Temp_Element_H) return pls_integer is
    i pls_integer := D_TE_H_Package.f_n_eq(to_string(), te1.to_string(), te2.to_string());
    begin
         return i;
    end;

    --Returns true if the Temporal Element overlaps the Timepoint.
    MEMBER FUNCTION f_overlaps(te1 D_Temp_Element_H, tp D_Timepoint_H) return pls_integer is
    i pls_integer := D_TE_H_Package.f_overlaps(to_string(), te1.to_string(), tp.m_y, tp.m_m, tp.m_d, tp.m_h);
    begin
         return i;
    end;

    --Returns true if the Temporal Element precedes the Timepoint.
    MEMBER FUNCTION f_precedes(te1 D_Temp_Element_H, tp D_Timepoint_H) return pls_integer is
    i pls_integer := D_TE_H_Package.f_precedes(to_string(), te1.to_string(), tp.m_y, tp.m_m, tp.m_d, tp.m_h);
    begin
         return i;
    end;

    --Returns true if the Temporal Element meets the Timepoint.
    MEMBER FUNCTION f_meets(te1 D_Temp_Element_H, tp D_Timepoint_H) return pls_integer is
    i pls_integer := D_TE_H_Package.f_meets(to_string(), te1.to_string(), tp.m_y, tp.m_m, tp.m_d, tp.m_h);
    begin
         return i;
    end;

    --Returns true if the Temporal Element equal the Timepoint.
    MEMBER FUNCTION f_equal(te1 D_Temp_Element_H, tp D_Timepoint_H) return pls_integer is
    i pls_integer := D_TE_H_Package.f_equal(to_string(), te1.to_string(), tp.m_y, tp.m_m, tp.m_d, tp.m_h);
    begin
         return i;
    end;

    --Returns true if the Temporal Element contains the Timepoint.
    MEMBER FUNCTION f_contains(te1 D_Temp_Element_H, tp D_Timepoint_H) return pls_integer is
    i pls_integer := D_TE_H_Package.f_contains(to_string(), te1.to_string(), tp.m_y, tp.m_m, tp.m_d, tp.m_h);
    begin
         return i;
    end;

    --Returns true if the Temporal Element overlaps the Period
    MEMBER FUNCTION f_overlaps(te1 D_Temp_Element_H, p D_Period_H) return pls_integer is
    i pls_integer := D_TE_H_Package.f_overlaps(to_string(), te1.to_string(), p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h);
    begin
         return i;
    end;

    --Returns true if the Temporal Element precedes the Period
    MEMBER FUNCTION f_precedes(te1 D_Temp_Element_H, p D_Period_H) return pls_integer is
    i pls_integer := D_TE_H_Package.f_precedes(to_string(), te1.to_string(), p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h);
    begin
         return i;
    end;

    --Returns true if the Temporal Element meets the Period
    MEMBER FUNCTION f_meets(te1 D_Temp_Element_H, p D_Period_H) return pls_integer is
    i pls_integer := D_TE_H_Package.f_meets(to_string(), te1.to_string(), p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h);
    begin
         return i;
    end;

    --Returns true if the Temporal Element equal the Period
    MEMBER FUNCTION f_equal(te1 D_Temp_Element_H, p D_Period_H) return pls_integer is
    i pls_integer := D_TE_H_Package.f_equal(to_string(), te1.to_string(), p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h);
    begin
         return i;
    end;

    --Returns true if the Temporal Element contains the Period
    MEMBER FUNCTION f_contains(te1 D_Temp_Element_H, p D_Period_H) return pls_integer is
    i pls_integer := D_TE_H_Package.f_contains(to_string(), te1.to_string(), p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h);
    begin
         return i;
    end;

    --Returns true if two Temporal Elements overlap.
    MEMBER FUNCTION f_overlaps(te1 D_Temp_Element_H, te2 D_Temp_Element_H) return pls_integer is
    i pls_integer := D_TE_H_Package.f_overlaps(to_string(), te1.to_string(), te2.to_string());
    begin
         return i;
    end;

    --Returns true if the first Temporal Element precedes the second Temporal Element.
    MEMBER FUNCTION f_precedes(te1 D_Temp_Element_H, te2 D_Temp_Element_H) return pls_integer is
    i pls_integer := D_TE_H_Package.f_precedes(to_string(), te1.to_string(), te2.to_string());
    begin
         return i;
    end;

    --Returns true if the first Temporal Element meets the second Temporal Element.
    MEMBER FUNCTION f_meets(te1 D_Temp_Element_H, te2 D_Temp_Element_H) return pls_integer is
    i pls_integer := D_TE_H_Package.f_meets(to_string(), te1.to_string(), te2.to_string());
    begin
         return i;
    end;

    --Returns true if the first Temporal Element is equal to second Temporal Element.
    MEMBER FUNCTION f_equal(te1 D_Temp_Element_H, te2 D_Temp_Element_H) return pls_integer is
    i pls_integer := D_TE_H_Package.f_equal(to_string(), te1.to_string(), te2.to_string());
    begin
         return i;
    end;

    --Returns true if the first Temporal Element contains the second Temporal Element.
    MEMBER FUNCTION f_contains(te1 D_Temp_Element_H, te2 D_Temp_Element_H) return pls_integer is
    i pls_integer := D_TE_H_Package.f_contains(to_string(), te1.to_string(), te2.to_string());
    begin
         return i;
    end;

end;
/

-- Type body D_TEMP_ELEMENT_MIN

CREATE OR REPLACE
type body D_Temp_Element_Min is

    --Creates a string for the Temporal Element object.
    MEMBER FUNCTION to_string return Varchar2 is
    i pls_integer;
    s Varchar2(32766) := '';
    begin
         i := te.FIRST;  -- get subscript of first element
         WHILE i IS NOT NULL LOOP
            s := concat(s, TO_CHAR(te(i).b.m_y));
            s := concat(s, ',');
            s := concat(s, TO_CHAR(te(i).b.m_m));
            s := concat(s, ',');
            s := concat(s, TO_CHAR(te(i).b.m_d));
            s := concat(s, ',');
            s := concat(s, TO_CHAR(te(i).b.m_h));
            s := concat(s, ',');
            s := concat(s, TO_CHAR(te(i).b.m_min));
            s := concat(s, ',');
            s := concat(s, TO_CHAR(te(i).e.m_y));
            s := concat(s, ',');
            s := concat(s, TO_CHAR(te(i).e.m_m));
            s := concat(s, ',');
            s := concat(s, TO_CHAR(te(i).e.m_d));
            s := concat(s, ',');
            s := concat(s, TO_CHAR(te(i).e.m_h));
            s := concat(s, ',');
            s := concat(s, TO_CHAR(te(i).e.m_min));
            s := concat(s, '#');

            i := te.NEXT(i);  -- get subscript of next element
         END LOOP;

         return s;
    end;

    --Creates a Temporal Element object from the string and assigns it to the current TE.
    MEMBER PROCEDURE to_temporal_element(te_string Varchar2) is
    new_te Temp_Element_Min;
    s Varchar2(32000);
    t1 pls_integer :=0;
    t2 pls_integer :=0;
    t3 pls_integer :=0;
    t4 pls_integer :=0;
    t5 pls_integer :=0;
    t6 pls_integer :=0;
    t7 pls_integer :=0;
    t8 pls_integer :=0;
    t9 pls_integer :=0;
    t10 pls_integer :=0;
    i pls_integer :=0;

    begin
        s := te_string;
        new_te := Temp_Element_Min();

        WHILE LENGTH(s) != 0 LOOP
            t1 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t2 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t3 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t4 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t5 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t6 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t7 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t8 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t9 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t10 := TO_NUMBER( LPAD(s, INSTR(s, '#') - 1) );
            s :=  SUBSTR(s, INSTR(s,'#') + 1, LENGTH(s) - INSTR(s,'#') + 1 );

            new_te.EXTEND;
            i := new_te.LAST;
            new_te(i) := D_Period_Min(D_Timepoint_Min(t1, t2, t3, t4, t5), D_Timepoint_Min(t6, t7, t8, t9, t10));
        END LOOP;

        te := new_te;
    end;

    --Creates a Temporal Element object from the string and returns it.
    MEMBER FUNCTION return_temporal_element(te_string Varchar2) return Temp_Element_Min is
    new_te Temp_Element_Min;
    s Varchar2(32000);
    t1 pls_integer :=0;
    t2 pls_integer :=0;
    t3 pls_integer :=0;
    t4 pls_integer :=0;
    t5 pls_integer :=0;
    t6 pls_integer :=0;
    t7 pls_integer :=0;
    t8 pls_integer :=0;
    t9 pls_integer :=0;
    t10 pls_integer :=0;
    i pls_integer :=0;

    begin
        s := te_string;
        new_te := Temp_Element_Min();

        WHILE LENGTH(s) != 0 LOOP
            t1 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t2 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t3 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t4 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t5 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t6 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t7 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t8 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t9 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t10 := TO_NUMBER( LPAD(s, INSTR(s, '#') - 1) );
            s :=  SUBSTR(s, INSTR(s,'#') + 1, LENGTH(s) - INSTR(s,'#') + 1 );

            new_te.EXTEND;
            i := new_te.LAST;
            new_te(i) := D_Period_Min(D_Timepoint_Min(t1, t2, t3, t4, t5), D_Timepoint_Min(t6, t7, t8, t9, t10));
        END LOOP;

        return new_te;
    end;

    --Returns the first Period of the Temporal Element object.
    MEMBER FUNCTION f_begin return D_Period_Min is
    b_y pls_integer := 0;
    b_m pls_integer := 0;
    b_d pls_integer := 0;
    b_h pls_integer := 0;
    b_min pls_integer := 0;
    e_y pls_integer := 0;
    e_m pls_integer := 0;
    e_d pls_integer := 0;
    e_h pls_integer := 0;
    e_min pls_integer := 0;
    begin
         D_TE_Min_Package.f_begin(to_string(), b_y, b_m, b_d, b_h, b_min, e_y, e_m, e_d, e_h, e_min);
         return D_Period_Min(D_Timepoint_Min(b_y, b_m, b_d, b_h, b_min), D_Timepoint_Min(e_y, e_m, e_d, e_h, e_min));
    end;

    --Returns the last Period of the Temporal Element object.
    MEMBER FUNCTION f_end return D_Period_Min is
    b_y pls_integer := 0;
    b_m pls_integer := 0;
    b_d pls_integer := 0;
    b_h pls_integer := 0;
    b_min pls_integer := 0;
    e_y pls_integer := 0;
    e_m pls_integer := 0;
    e_d pls_integer := 0;
    e_h pls_integer := 0;
    e_min pls_integer := 0;
    begin
         D_TE_Min_Package.f_end(to_string(), b_y, b_m, b_d, b_h, b_min, e_y, e_m, e_d, e_h, e_min);
         return D_Period_Min(D_Timepoint_Min(b_y, b_m, b_d, b_h, b_min), D_Timepoint_Min(e_y, e_m, e_d, e_h, e_min));
    end;

    --Returns the Granularity of the Temporal Element object.
    MEMBER FUNCTION get_granularity return pls_integer is
    g pls_integer := D_TE_Min_Package.get_granularity(to_string());
    begin
         return g;
    end;

    --Returns an Interval object representing the sum of the duration of the Periods in the Temporal Element object.
    MEMBER FUNCTION duration return D_Interval is
    i_Value double precision := 0;
    begin
        D_TE_Min_Package.duration(to_string(), i_Value);
        return D_Interval(i_Value);
    end;

    --Returns the number of Periods contained in the Temporal Element object.
    MEMBER FUNCTION cardinality return pls_integer is
    c pls_integer := D_TE_Min_Package.cardinality(to_string());
    begin
         return c;
    end;

    --Returns the Period number num inside the Temporal Element object.
    MEMBER FUNCTION go(num pls_integer) return D_Period_Min is
    b_y pls_integer := 0;
    b_m pls_integer := 0;
    b_d pls_integer := 0;
    b_h pls_integer := 0;
    b_min pls_integer := 0;
    e_y pls_integer := 0;
    e_m pls_integer := 0;
    e_d pls_integer := 0;
    e_h pls_integer := 0;
    e_min pls_integer := 0;
    begin
         D_TE_Min_Package.go(to_string(), num, b_y, b_m, b_d, b_h, b_min, e_y, e_m, e_d, e_h, e_min);
         return D_Period_Min(D_Timepoint_Min(b_y, b_m, b_d, b_h, b_min), D_Timepoint_Min(e_y, e_m, e_d, e_h, e_min));
    end;

    --Assigns the value of another Temporal Element to the Temporal Element object.
    MEMBER PROCEDURE f_ass_temp_element(te1 D_Temp_Element_Min) is
    te_string Varchar2(32766) := '';
    begin
         te_string := to_string();
         te_string := D_TE_Min_Package.f_ass_temp_element(te_string, te1.to_string());
         to_temporal_element(te_string);
    end;

    --Adds a Temporal Element to the Temporal Element object. The result is all the times which belong to both the Temporal Element objects.
    MEMBER PROCEDURE f_add_temp_element(te1 D_Temp_Element_Min) is
    te_string Varchar2(32766) := '';
    begin
         te_string := to_string();
         te_string := D_TE_Min_Package.f_add_temp_element(te_string, te1.to_string());
         to_temporal_element(te_string);
    end;

    --Adds a Period to the Temporal Element object. The result is all the times which belong to either the Period and the Temporal Element.
    MEMBER PROCEDURE f_add_period(p D_Period_Min) is
    te_string Varchar2(32766) := '';
    begin
         te_string := to_string();
         te_string := D_TE_Min_Package.f_add_period(te_string, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.b.m_min, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, p.e.m_min);
         to_temporal_element(te_string);
    end;

    --Subtracts a Temporal Element from the Temporal Element object. The result is all the times which are included in the current Temporal Elementbut not in the other one.
    MEMBER PROCEDURE f_sub_temp_element(te1 D_Temp_Element_Min) is
    te_string Varchar2(32766) := '';
    begin
         te_string := to_string();
         te_string := D_TE_Min_Package.f_sub_temp_element(te_string, te1.to_string());
         to_temporal_element(te_string);
    end;

    --Subtracts a Period from the Temporal Element object. The result is all the times which are included in the current Temporal Element but not in the Period.
    MEMBER PROCEDURE f_sub_period(p D_Period_Min) is
    te_string Varchar2(32766) := '';
    begin
         te_string := to_string();
         te_string := D_TE_Min_Package.f_sub_period(te_string, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.b.m_min, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, p.e.m_min);
         to_temporal_element(te_string);
    end;

    --Constructs a Temporal Element adding a Period to an existing Temporal Element.
    MEMBER FUNCTION f_add(te1 D_Temp_Element_Min, p D_Period_Min) return D_Temp_Element_Min is
    str Varchar2(32766) := '';
    begin
         str := D_TE_Min_Package.f_add(to_string(), te1.to_string(), p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.b.m_min, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, p.e.m_min);
         return D_Temp_Element_Min(return_temporal_element(str));
    end;

    --Constructs a Temporal Element adding two Temporal Elements.
    MEMBER FUNCTION f_add(te1 D_Temp_Element_Min, te2 D_Temp_Element_Min) return D_Temp_Element_Min is
    str Varchar2(32766) := '';
    begin
         str := D_TE_Min_Package.f_add(to_string(), te1.to_string(), te2.to_string());
         return D_Temp_Element_Min(return_temporal_element(str));
    end;

    --Constructs a Temporal Element subtracting a Period to an existing Temporal Element.
    MEMBER FUNCTION f_sub(te1 D_Temp_Element_Min, p D_Period_Min) return D_Temp_Element_Min is
    str Varchar2(32766) := '';
    begin
         str := D_TE_Min_Package.f_sub(to_string(), te1.to_string(), p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.b.m_min, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, p.e.m_min);
         return D_Temp_Element_Min(return_temporal_element(str));
    end;

    --Constructs a Temporal Element subtracting two Temporal Elements.
    MEMBER FUNCTION f_sub(te1 D_Temp_Element_Min, te2 D_Temp_Element_Min) return D_Temp_Element_Min is
    str Varchar2(32766) := '';
    begin
         str := D_TE_Min_Package.f_sub(to_string(), te1.to_string(), te2.to_string());
         return D_Temp_Element_Min(return_temporal_element(str));
    end;

    --Returns a Temporal Element object representing the intersection between a Temporal Element and a Timepoint.
    MEMBER FUNCTION intersects(te1 D_Temp_Element_Min, tp D_Timepoint_Min) return D_Temp_Element_Min is
    str Varchar2(32766) := '';
    begin
         str := D_TE_Min_Package.intersects(to_string(), te1.to_string(), tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min);
         return D_Temp_Element_Min(return_temporal_element(str));
    end;

    --Returns a Temporal Element object representing the intersection between a Temporal Element and a Period.
    MEMBER FUNCTION intersects(te1 D_Temp_Element_Min, p D_Period_Min) return D_Temp_Element_Min is
    str Varchar2(32766) := '';
    begin
         str := D_TE_Min_Package.intersects(to_string(), te1.to_string(), p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.b.m_min, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, p.e.m_min);
         return D_Temp_Element_Min(return_temporal_element(str));
    end;

    --Returns a Temporal Element object representing the intersection between two Temporal Elements.
    MEMBER FUNCTION intersects(te1 D_Temp_Element_Min, te2 D_Temp_Element_Min) return D_Temp_Element_Min is
    str Varchar2(32766) := '';
    begin
         str := D_TE_Min_Package.intersects(to_string(), te1.to_string(), te2.to_string());
         return D_Temp_Element_Min(return_temporal_element(str));
    end;

    --Returns true if the Temporal Elements have the same value.
    MEMBER FUNCTION f_eq(te1 D_Temp_Element_Min, te2 D_Temp_Element_Min) return pls_integer is
    i pls_integer := D_TE_Min_Package.f_eq(to_string(), te1.to_string(), te2.to_string());
    begin
         return i;
    end;

    --Returns true if the Temporal Elements have different value.
    MEMBER FUNCTION f_n_eq(te1 D_Temp_Element_Min, te2 D_Temp_Element_Min) return pls_integer is
    i pls_integer := D_TE_Min_Package.f_n_eq(to_string(), te1.to_string(), te2.to_string());
    begin
         return i;
    end;

    --Returns true if the Temporal Element overlaps the Timepoint.
    MEMBER FUNCTION f_overlaps(te1 D_Temp_Element_Min, tp D_Timepoint_Min) return pls_integer is
    i pls_integer := D_TE_Min_Package.f_overlaps(to_string(), te1.to_string(), tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min);
    begin
         return i;
    end;

    --Returns true if the Temporal Element precedes the Timepoint.
    MEMBER FUNCTION f_precedes(te1 D_Temp_Element_Min, tp D_Timepoint_Min) return pls_integer is
    i pls_integer := D_TE_Min_Package.f_precedes(to_string(), te1.to_string(), tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min);
    begin
         return i;
    end;

    --Returns true if the Temporal Element meets the Timepoint.
    MEMBER FUNCTION f_meets(te1 D_Temp_Element_Min, tp D_Timepoint_Min) return pls_integer is
    i pls_integer := D_TE_Min_Package.f_meets(to_string(), te1.to_string(), tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min);
    begin
         return i;
    end;

    --Returns true if the Temporal Element equal the Timepoint.
    MEMBER FUNCTION f_equal(te1 D_Temp_Element_Min, tp D_Timepoint_Min) return pls_integer is
    i pls_integer := D_TE_Min_Package.f_equal(to_string(), te1.to_string(), tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min);
    begin
         return i;
    end;

    --Returns true if the Temporal Element contains the Timepoint.
    MEMBER FUNCTION f_contains(te1 D_Temp_Element_Min, tp D_Timepoint_Min) return pls_integer is
    i pls_integer := D_TE_Min_Package.f_contains(to_string(), te1.to_string(), tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min);
    begin
         return i;
    end;

    --Returns true if the Temporal Element overlaps the Period
    MEMBER FUNCTION f_overlaps(te1 D_Temp_Element_Min, p D_Period_Min) return pls_integer is
    i pls_integer := D_TE_Min_Package.f_overlaps(to_string(), te1.to_string(), p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.b.m_min, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, p.e.m_min);
    begin
         return i;
    end;

    --Returns true if the Temporal Element precedes the Period
    MEMBER FUNCTION f_precedes(te1 D_Temp_Element_Min, p D_Period_Min) return pls_integer is
    i pls_integer := D_TE_Min_Package.f_precedes(to_string(), te1.to_string(), p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.b.m_min, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, p.e.m_min);
    begin
         return i;
    end;

    --Returns true if the Temporal Element meets the Period
    MEMBER FUNCTION f_meets(te1 D_Temp_Element_Min, p D_Period_Min) return pls_integer is
    i pls_integer := D_TE_Min_Package.f_meets(to_string(), te1.to_string(), p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.b.m_min, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, p.e.m_min);
    begin
         return i;
    end;

    --Returns true if the Temporal Element equal the Period
    MEMBER FUNCTION f_equal(te1 D_Temp_Element_Min, p D_Period_Min) return pls_integer is
    i pls_integer := D_TE_Min_Package.f_equal(to_string(), te1.to_string(), p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.b.m_min, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, p.e.m_min);
    begin
         return i;
    end;

    --Returns true if the Temporal Element contains the Period
    MEMBER FUNCTION f_contains(te1 D_Temp_Element_Min, p D_Period_Min) return pls_integer is
    i pls_integer := D_TE_Min_Package.f_contains(to_string(), te1.to_string(), p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.b.m_min, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, p.e.m_min);
    begin
         return i;
    end;

    --Returns true if two Temporal Elements overlap.
    MEMBER FUNCTION f_overlaps(te1 D_Temp_Element_Min, te2 D_Temp_Element_Min) return pls_integer is
    i pls_integer := D_TE_Min_Package.f_overlaps(to_string(), te1.to_string(), te2.to_string());
    begin
         return i;
    end;

    --Returns true if the first Temporal Element precedes the second Temporal Element.
    MEMBER FUNCTION f_precedes(te1 D_Temp_Element_Min, te2 D_Temp_Element_Min) return pls_integer is
    i pls_integer := D_TE_Min_Package.f_precedes(to_string(), te1.to_string(), te2.to_string());
    begin
         return i;
    end;

    --Returns true if the first Temporal Element meets the second Temporal Element.
    MEMBER FUNCTION f_meets(te1 D_Temp_Element_Min, te2 D_Temp_Element_Min) return pls_integer is
    i pls_integer := D_TE_Min_Package.f_meets(to_string(), te1.to_string(), te2.to_string());
    begin
         return i;
    end;

    --Returns true if the first Temporal Element is equal to second Temporal Element.
    MEMBER FUNCTION f_equal(te1 D_Temp_Element_Min, te2 D_Temp_Element_Min) return pls_integer is
    i pls_integer := D_TE_Min_Package.f_equal(to_string(), te1.to_string(), te2.to_string());
    begin
         return i;
    end;

    --Returns true if the first Temporal Element contains the second Temporal Element.
    MEMBER FUNCTION f_contains(te1 D_Temp_Element_Min, te2 D_Temp_Element_Min) return pls_integer is
    i pls_integer := D_TE_Min_Package.f_contains(to_string(), te1.to_string(), te2.to_string());
    begin
         return i;
    end;

end;
/

-- Type body D_TEMP_ELEMENT_SEC

CREATE OR REPLACE
type body D_Temp_Element_Sec is

    --Creates a string for the Temporal Element object.
    MEMBER FUNCTION to_string return Varchar2 is
    i pls_integer;
    s Varchar2(32766) := '';
    begin
         i := te.FIRST;  -- get subscript of first element
         WHILE i IS NOT NULL LOOP
            s := concat(s, TO_CHAR(te(i).b.m_y));
            s := concat(s, ',');
            s := concat(s, TO_CHAR(te(i).b.m_m));
            s := concat(s, ',');
            s := concat(s, TO_CHAR(te(i).b.m_d));
            s := concat(s, ',');
            s := concat(s, TO_CHAR(te(i).b.m_h));
            s := concat(s, ',');
            s := concat(s, TO_CHAR(te(i).b.m_min));
            s := concat(s, ',');
            s := concat(s, TO_CHAR(te(i).b.m_sec));
            s := concat(s, ',');
            s := concat(s, TO_CHAR(te(i).e.m_y));
            s := concat(s, ',');
            s := concat(s, TO_CHAR(te(i).e.m_m));
            s := concat(s, ',');
            s := concat(s, TO_CHAR(te(i).e.m_d));
            s := concat(s, ',');
            s := concat(s, TO_CHAR(te(i).e.m_h));
            s := concat(s, ',');
            s := concat(s, TO_CHAR(te(i).e.m_min));
            s := concat(s, ',');
            s := concat(s, TO_CHAR(te(i).e.m_sec));
            s := concat(s, '#');

            i := te.NEXT(i);  -- get subscript of next element
         END LOOP;

         return s;
    end;

    --Creates a Temporal Element object from the string and assigns it to the current TE.
    MEMBER PROCEDURE to_temporal_element(te_string Varchar2) is
    new_te Temp_Element_Sec;
    s Varchar2(32766);
    t1 pls_integer :=0;
    t2 pls_integer :=0;
    t3 pls_integer :=0;
    t4 pls_integer :=0;
    t5 pls_integer :=0;
    t6 double precision :=0;
    t7 pls_integer :=0;
    t8 pls_integer :=0;
    t9 pls_integer :=0;
    t10 pls_integer :=0;
    t11 pls_integer :=0;
    t12 double precision :=0;
    i pls_integer :=0;

    begin
        s := te_string;
        new_te := Temp_Element_Sec();

        WHILE LENGTH(s) != 0 LOOP
            t1 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t2 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t3 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t4 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t5 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t6 := TO_NUMBER( REPLACE( LPAD(s, INSTR(s, ',') - 1), '.', ',') );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t7 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t8 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t9 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t10 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t11 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t12 := TO_NUMBER( REPLACE( LPAD(s, INSTR(s, '#') - 1), '.', ',') );
            s :=  SUBSTR(s, INSTR(s,'#') + 1, LENGTH(s) - INSTR(s,'#') + 1 );

            new_te.EXTEND;
            i := new_te.LAST;
            new_te(i) := D_Period_Sec(D_Timepoint_Sec(t1, t2, t3, t4, t5, t6), D_Timepoint_Sec(t7, t8, t9, t10, t11, t12));
        END LOOP;

        te := new_te;
    end;

    --Creates a Temporal Element object from the string and returns it.
    MEMBER FUNCTION return_temporal_element(te_string Varchar2) return Temp_Element_Sec is
    new_te Temp_Element_Sec;
    s Varchar2(32766);
    t1 pls_integer :=0;
    t2 pls_integer :=0;
    t3 pls_integer :=0;
    t4 pls_integer :=0;
    t5 pls_integer :=0;
    t6 double precision :=0;
    t7 pls_integer :=0;
    t8 pls_integer :=0;
    t9 pls_integer :=0;
    t10 pls_integer :=0;
    t11 pls_integer :=0;
    t12 double precision :=0;
    i pls_integer :=0;

    begin
        s := te_string;
        new_te := Temp_Element_Sec();

        WHILE LENGTH(s) != 0 LOOP
            t1 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t2 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t3 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t4 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t5 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t6 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t7 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t8 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t9 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t10 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t11 := TO_NUMBER( LPAD(s, INSTR(s, ',') - 1) );
            s :=  SUBSTR(s, INSTR(s,',') + 1, LENGTH(s) - INSTR(s,',') + 1 );
            t12 := TO_NUMBER( LPAD(s, INSTR(s, '#') - 1) );
            s :=  SUBSTR(s, INSTR(s,'#') + 1, LENGTH(s) - INSTR(s,'#') + 1 );

            new_te.EXTEND;
            i := new_te.LAST;
            new_te(i) := D_Period_Sec(D_Timepoint_Sec(t1, t2, t3, t4, t5, t6), D_Timepoint_Sec(t7, t8, t9, t10, t11, t12));
        END LOOP;

        return new_te;
    end;

    --Returns the first Period of the Temporal Element object.
    MEMBER FUNCTION f_begin return D_Period_Sec is
    b_y pls_integer := 0;
    b_m pls_integer := 0;
    b_d pls_integer := 0;
    b_h pls_integer := 0;
    b_min pls_integer := 0;
    b_sec double precision := 0;
    e_y pls_integer := 0;
    e_m pls_integer := 0;
    e_d pls_integer := 0;
    e_h pls_integer := 0;
    e_min pls_integer := 0;
    e_sec double precision := 0;
    begin
         D_TE_Sec_Package.f_begin(to_string(), b_y, b_m, b_d, b_h, b_min, b_sec, e_y, e_m, e_d, e_h, e_min, e_sec);
         return D_Period_Sec(D_Timepoint_Sec(b_y, b_m, b_d, b_h, b_min, b_sec), D_Timepoint_Sec(e_y, e_m, e_d, e_h, e_min, e_sec));
    end;

    --Returns the last Period of the Temporal Element object.
    MEMBER FUNCTION f_end return D_Period_Sec is
    b_y pls_integer := 0;
    b_m pls_integer := 0;
    b_d pls_integer := 0;
    b_h pls_integer := 0;
    b_min pls_integer := 0;
    b_sec double precision := 0;
    e_y pls_integer := 0;
    e_m pls_integer := 0;
    e_d pls_integer := 0;
    e_h pls_integer := 0;
    e_min pls_integer := 0;
    e_sec double precision := 0;
    begin
         D_TE_Sec_Package.f_end(to_string(), b_y, b_m, b_d, b_h, b_min, b_sec, e_y, e_m, e_d, e_h, e_min, e_sec);
         return D_Period_Sec(D_Timepoint_Sec(b_y, b_m, b_d, b_h, b_min, b_sec), D_Timepoint_Sec(e_y, e_m, e_d, e_h, e_min, e_sec));
    end;

    --Returns the Granularity of the Temporal Element object.
    MEMBER FUNCTION get_granularity return pls_integer is
    g pls_integer := D_TE_Sec_Package.get_granularity(to_string());
    begin
         return g;
    end;

    --Returns an Interval object representing the sum of the duration of the Periods in the Temporal Element object.
    MEMBER FUNCTION duration return D_Interval is
    i_Value double precision := 0;
    begin
        D_TE_Sec_Package.duration(to_string(), i_Value);
        return D_Interval(i_Value);
    end;

    --Returns the number of Periods contained in the Temporal Element object.
    MEMBER FUNCTION cardinality return pls_integer is
    c pls_integer := D_TE_Sec_Package.cardinality(to_string());
    begin
         return c;
    end;

    --Returns the Period number num inside the Temporal Element object.
    MEMBER FUNCTION go(num pls_integer) return D_Period_Sec is
    b_y pls_integer := 0;
    b_m pls_integer := 0;
    b_d pls_integer := 0;
    b_h pls_integer := 0;
    b_min pls_integer := 0;
    b_sec double precision := 0;
    e_y pls_integer := 0;
    e_m pls_integer := 0;
    e_d pls_integer := 0;
    e_h pls_integer := 0;
    e_min pls_integer := 0;
    e_sec double precision := 0;
    begin
         D_TE_Sec_Package.go(to_string(), num, b_y, b_m, b_d, b_h, b_min, b_sec, e_y, e_m, e_d, e_h, e_min, e_sec);
         return D_Period_Sec(D_Timepoint_Sec(b_y, b_m, b_d, b_h, b_min, b_sec), D_Timepoint_Sec(e_y, e_m, e_d, e_h, e_min, e_sec));
    end;

    --Assigns the value of another Temporal Element to the Temporal Element object.
    MEMBER PROCEDURE f_ass_temp_element(te1 D_Temp_Element_Sec) is
    te_string Varchar2(32766) := '';
    begin
         te_string := to_string();
         te_string := D_TE_Sec_Package.f_ass_temp_element(te_string, te1.to_string());
         to_temporal_element(te_string);
    end;

    --Adds a Temporal Element to the Temporal Element object. The result is all the times which belong to both the Temporal Element objects.
    MEMBER PROCEDURE f_add_temp_element(te1 D_Temp_Element_Sec) is
    te_string Varchar2(32766) := '';
    begin
         te_string := to_string();
         te_string := D_TE_Sec_Package.f_add_temp_element(te_string, te1.to_string());
         to_temporal_element(te_string);
    end;

    --Adds a Period to the Temporal Element object. The result is all the times which belong to either the Period and the Temporal Element.
    MEMBER PROCEDURE f_add_period(p D_Period_Sec) is
    te_string Varchar2(32766) := '';
    begin
         te_string := to_string();
         te_string := D_TE_Sec_Package.f_add_period(te_string, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.b.m_min, p.b.m_sec, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, p.e.m_min, p.e.m_sec);
         to_temporal_element(te_string);
    end;

    --Subtracts a Temporal Element from the Temporal Element object. The result is all the times which are included in the current Temporal Elementbut not in the other one.
    MEMBER PROCEDURE f_sub_temp_element(te1 D_Temp_Element_Sec) is
    te_string Varchar2(32766) := '';
    begin
         te_string := to_string();
         te_string := D_TE_Sec_Package.f_sub_temp_element(te_string, te1.to_string());
         to_temporal_element(te_string);
    end;

    --Subtracts a Period from the Temporal Element object. The result is all the times which are included in the current Temporal Element but not in the Period.
    MEMBER PROCEDURE f_sub_period(p D_Period_Sec) is
    te_string Varchar2(32766) := '';
    begin
         te_string := to_string();
         te_string := D_TE_Sec_Package.f_sub_period(te_string, p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.b.m_min, p.b.m_sec, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, p.e.m_min, p.e.m_sec);
         to_temporal_element(te_string);
    end;

    --Constructs a Temporal Element adding a Period to an existing Temporal Element.
    MEMBER FUNCTION f_add(te1 D_Temp_Element_Sec, p D_Period_Sec) return D_Temp_Element_Sec is
    str Varchar2(32766) := '';
    begin
         str := D_TE_Sec_Package.f_add(to_string(), te1.to_string(), p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.b.m_min, p.b.m_sec, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, p.e.m_min, p.e.m_sec);
         return D_Temp_Element_Sec(return_temporal_element(str));
    end;

    --Constructs a Temporal Element adding two Temporal Elements.
    MEMBER FUNCTION f_add(te1 D_Temp_Element_Sec, te2 D_Temp_Element_Sec) return D_Temp_Element_Sec is
    str Varchar2(32766) := '';
    begin
         str := D_TE_Sec_Package.f_add(to_string(), te1.to_string(), te2.to_string());
         return D_Temp_Element_Sec(return_temporal_element(str));
    end;

    --Constructs a Temporal Element subtracting a Period to an existing Temporal Element.
    MEMBER FUNCTION f_sub(te1 D_Temp_Element_Sec, p D_Period_Sec) return D_Temp_Element_Sec is
    str Varchar2(32766) := '';
    begin
         str := D_TE_Sec_Package.f_sub(to_string(), te1.to_string(), p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.b.m_min, p.b.m_sec, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, p.e.m_min, p.e.m_sec);
         return D_Temp_Element_Sec(return_temporal_element(str));
    end;

    --Constructs a Temporal Element subtracting two Temporal Elements.
    MEMBER FUNCTION f_sub(te1 D_Temp_Element_Sec, te2 D_Temp_Element_Sec) return D_Temp_Element_Sec is
    str Varchar2(32766) := '';
    begin
         str := D_TE_Sec_Package.f_sub(to_string(), te1.to_string(), te2.to_string());
         return D_Temp_Element_Sec(return_temporal_element(str));
    end;

    --Returns a Temporal Element object representing the intersection between a Temporal Element and a Timepoint.
    MEMBER FUNCTION intersects(te1 D_Temp_Element_Sec, tp D_Timepoint_Sec) return D_Temp_Element_Sec is
    str Varchar2(32766) := '';
    begin
         str := D_TE_Sec_Package.intersects(to_string(), te1.to_string(), tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min, tp.m_sec);
         return D_Temp_Element_Sec(return_temporal_element(str));
    end;

    --Returns a Temporal Element object representing the intersection between a Temporal Element and a Period.
    MEMBER FUNCTION intersects(te1 D_Temp_Element_Sec, p D_Period_Sec) return D_Temp_Element_Sec is
    str Varchar2(32766) := '';
    begin
         str := D_TE_Sec_Package.intersects(to_string(), te1.to_string(), p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.b.m_min, p.b.m_sec, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, p.e.m_min, p.e.m_sec);
         return D_Temp_Element_Sec(return_temporal_element(str));
    end;

    --Returns a Temporal Element object representing the intersection between two Temporal Elements.
    MEMBER FUNCTION intersects(te1 D_Temp_Element_Sec, te2 D_Temp_Element_Sec) return D_Temp_Element_Sec is
    str Varchar2(32766) := '';
    begin
         str := D_TE_Sec_Package.intersects(to_string(), te1.to_string(), te2.to_string());
         return D_Temp_Element_Sec(return_temporal_element(str));
    end;

    --Returns true if the Temporal Elements have the same value.
    MEMBER FUNCTION f_eq(te1 D_Temp_Element_Sec, te2 D_Temp_Element_Sec) return pls_integer is
    i pls_integer := D_TE_Sec_Package.f_eq(to_string(), te1.to_string(), te2.to_string());
    begin
         return i;
    end;

    --Returns true if the Temporal Elements have different value.
    MEMBER FUNCTION f_n_eq(te1 D_Temp_Element_Sec, te2 D_Temp_Element_Sec) return pls_integer is
    i pls_integer := D_TE_Sec_Package.f_n_eq(to_string(), te1.to_string(), te2.to_string());
    begin
         return i;
    end;

    --Returns true if the Temporal Element overlaps the Timepoint.
    MEMBER FUNCTION f_overlaps(te1 D_Temp_Element_Sec, tp D_Timepoint_Sec) return pls_integer is
    i pls_integer := D_TE_Sec_Package.f_overlaps(to_string(), te1.to_string(), tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min, tp.m_sec);
    begin
         return i;
    end;

    --Returns true if the Temporal Element precedes the Timepoint.
    MEMBER FUNCTION f_precedes(te1 D_Temp_Element_Sec, tp D_Timepoint_Sec) return pls_integer is
    i pls_integer := D_TE_Sec_Package.f_precedes(to_string(), te1.to_string(), tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min, tp.m_sec);
    begin
         return i;
    end;

    --Returns true if the Temporal Element meets the Timepoint.
    MEMBER FUNCTION f_meets(te1 D_Temp_Element_Sec, tp D_Timepoint_Sec) return pls_integer is
    i pls_integer := D_TE_Sec_Package.f_meets(to_string(), te1.to_string(), tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min, tp.m_sec);
    begin
         return i;
    end;

    --Returns true if the Temporal Element equal the Timepoint.
    MEMBER FUNCTION f_equal(te1 D_Temp_Element_Sec, tp D_Timepoint_Sec) return pls_integer is
    i pls_integer := D_TE_Sec_Package.f_equal(to_string(), te1.to_string(), tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min, tp.m_sec);
    begin
         return i;
    end;

    --Returns true if the Temporal Element contains the Timepoint.
    MEMBER FUNCTION f_contains(te1 D_Temp_Element_Sec, tp D_Timepoint_Sec) return pls_integer is
    i pls_integer := D_TE_Sec_Package.f_contains(to_string(), te1.to_string(), tp.m_y, tp.m_m, tp.m_d, tp.m_h, tp.m_min, tp.m_sec);
    begin
         return i;
    end;

    --Returns true if the Temporal Element overlaps the Period
    MEMBER FUNCTION f_overlaps(te1 D_Temp_Element_Sec, p D_Period_Sec) return pls_integer is
    i pls_integer := D_TE_Sec_Package.f_overlaps(to_string(), te1.to_string(), p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.b.m_min, p.b.m_sec, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, p.e.m_min, p.e.m_sec);
    begin
         return i;
    end;

    --Returns true if the Temporal Element precedes the Period
    MEMBER FUNCTION f_precedes(te1 D_Temp_Element_Sec, p D_Period_Sec) return pls_integer is
    i pls_integer := D_TE_Sec_Package.f_precedes(to_string(), te1.to_string(), p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.b.m_min, p.b.m_sec, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, p.e.m_min, p.e.m_sec);
    begin
         return i;
    end;

    --Returns true if the Temporal Element meets the Period
    MEMBER FUNCTION f_meets(te1 D_Temp_Element_Sec, p D_Period_Sec) return pls_integer is
    i pls_integer := D_TE_Sec_Package.f_meets(to_string(), te1.to_string(), p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.b.m_min, p.b.m_sec, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, p.e.m_min, p.e.m_sec);
    begin
         return i;
    end;

    --Returns true if the Temporal Element equal the Period
    MEMBER FUNCTION f_equal(te1 D_Temp_Element_Sec, p D_Period_Sec) return pls_integer is
    i pls_integer := D_TE_Sec_Package.f_equal(to_string(), te1.to_string(), p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.b.m_min, p.b.m_sec, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, p.e.m_min, p.e.m_sec);
    begin
         return i;
    end;

    --Returns true if the Temporal Element contains the Period
    MEMBER FUNCTION f_contains(te1 D_Temp_Element_Sec, p D_Period_Sec) return pls_integer is
    i pls_integer := D_TE_Sec_Package.f_contains(to_string(), te1.to_string(), p.b.m_y, p.b.m_m, p.b.m_d, p.b.m_h, p.b.m_min, p.b.m_sec, p.e.m_y, p.e.m_m, p.e.m_d, p.e.m_h, p.e.m_min, p.e.m_sec);
    begin
         return i;
    end;

    --Returns true if two Temporal Elements overlap.
    MEMBER FUNCTION f_overlaps(te1 D_Temp_Element_Sec, te2 D_Temp_Element_Sec) return pls_integer is
    i pls_integer := D_TE_Sec_Package.f_overlaps(to_string(), te1.to_string(), te2.to_string());
    begin
         return i;
    end;

    --Returns true if the first Temporal Element precedes the second Temporal Element.
    MEMBER FUNCTION f_precedes(te1 D_Temp_Element_Sec, te2 D_Temp_Element_Sec) return pls_integer is
    i pls_integer := D_TE_Sec_Package.f_precedes(to_string(), te1.to_string(), te2.to_string());
    begin
         return i;
    end;

    --Returns true if the first Temporal Element meets the second Temporal Element.
    MEMBER FUNCTION f_meets(te1 D_Temp_Element_Sec, te2 D_Temp_Element_Sec) return pls_integer is
    i pls_integer := D_TE_Sec_Package.f_meets(to_string(), te1.to_string(), te2.to_string());
    begin
         return i;
    end;

    --Returns true if the first Temporal Element is equal to second Temporal Element.
    MEMBER FUNCTION f_equal(te1 D_Temp_Element_Sec, te2 D_Temp_Element_Sec) return pls_integer is
    i pls_integer := D_TE_Sec_Package.f_equal(to_string(), te1.to_string(), te2.to_string());
    begin
         return i;
    end;

    --Returns true if the first Temporal Element contains the second Temporal Element.
    MEMBER FUNCTION f_contains(te1 D_Temp_Element_Sec, te2 D_Temp_Element_Sec) return pls_integer is
    i pls_integer := D_TE_Sec_Package.f_contains(to_string(), te1.to_string(), te2.to_string());
    begin
         return i;
    end;

end;
/
